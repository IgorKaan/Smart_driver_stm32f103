
SMART DRIVER INTERNAL CLOCK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ef4  08002ef4  00012ef4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000018c  2000000c  08002f28  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000198  08002f28  00020198  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010de5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000214e  00000000  00000000  00030e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000526f  00000000  00000000  00032f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000760  00000000  00000000  000381d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a68  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000403e  00000000  00000000  000393a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000033ed  00000000  00000000  0003d3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000407cb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018dc  00000000  00000000  00040848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002edc 	.word	0x08002edc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002edc 	.word	0x08002edc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_frsub>:
 80009f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f8:	e002      	b.n	8000a00 <__addsf3>
 80009fa:	bf00      	nop

080009fc <__aeabi_fsub>:
 80009fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a00 <__addsf3>:
 8000a00:	0042      	lsls	r2, r0, #1
 8000a02:	bf1f      	itttt	ne
 8000a04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a08:	ea92 0f03 	teqne	r2, r3
 8000a0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a14:	d06a      	beq.n	8000aec <__addsf3+0xec>
 8000a16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a1e:	bfc1      	itttt	gt
 8000a20:	18d2      	addgt	r2, r2, r3
 8000a22:	4041      	eorgt	r1, r0
 8000a24:	4048      	eorgt	r0, r1
 8000a26:	4041      	eorgt	r1, r0
 8000a28:	bfb8      	it	lt
 8000a2a:	425b      	neglt	r3, r3
 8000a2c:	2b19      	cmp	r3, #25
 8000a2e:	bf88      	it	hi
 8000a30:	4770      	bxhi	lr
 8000a32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4249      	negne	r1, r1
 8000a52:	ea92 0f03 	teq	r2, r3
 8000a56:	d03f      	beq.n	8000ad8 <__addsf3+0xd8>
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a60:	eb10 000c 	adds.w	r0, r0, ip
 8000a64:	f1c3 0320 	rsb	r3, r3, #32
 8000a68:	fa01 f103 	lsl.w	r1, r1, r3
 8000a6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a70:	d502      	bpl.n	8000a78 <__addsf3+0x78>
 8000a72:	4249      	negs	r1, r1
 8000a74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a7c:	d313      	bcc.n	8000aa6 <__addsf3+0xa6>
 8000a7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a82:	d306      	bcc.n	8000a92 <__addsf3+0x92>
 8000a84:	0840      	lsrs	r0, r0, #1
 8000a86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a8a:	f102 0201 	add.w	r2, r2, #1
 8000a8e:	2afe      	cmp	r2, #254	; 0xfe
 8000a90:	d251      	bcs.n	8000b36 <__addsf3+0x136>
 8000a92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a9a:	bf08      	it	eq
 8000a9c:	f020 0001 	biceq.w	r0, r0, #1
 8000aa0:	ea40 0003 	orr.w	r0, r0, r3
 8000aa4:	4770      	bx	lr
 8000aa6:	0049      	lsls	r1, r1, #1
 8000aa8:	eb40 0000 	adc.w	r0, r0, r0
 8000aac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	d1ed      	bne.n	8000a92 <__addsf3+0x92>
 8000ab6:	fab0 fc80 	clz	ip, r0
 8000aba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000abe:	ebb2 020c 	subs.w	r2, r2, ip
 8000ac2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ac6:	bfaa      	itet	ge
 8000ac8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000acc:	4252      	neglt	r2, r2
 8000ace:	4318      	orrge	r0, r3
 8000ad0:	bfbc      	itt	lt
 8000ad2:	40d0      	lsrlt	r0, r2
 8000ad4:	4318      	orrlt	r0, r3
 8000ad6:	4770      	bx	lr
 8000ad8:	f092 0f00 	teq	r2, #0
 8000adc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae0:	bf06      	itte	eq
 8000ae2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ae6:	3201      	addeq	r2, #1
 8000ae8:	3b01      	subne	r3, #1
 8000aea:	e7b5      	b.n	8000a58 <__addsf3+0x58>
 8000aec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000af4:	bf18      	it	ne
 8000af6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afa:	d021      	beq.n	8000b40 <__addsf3+0x140>
 8000afc:	ea92 0f03 	teq	r2, r3
 8000b00:	d004      	beq.n	8000b0c <__addsf3+0x10c>
 8000b02:	f092 0f00 	teq	r2, #0
 8000b06:	bf08      	it	eq
 8000b08:	4608      	moveq	r0, r1
 8000b0a:	4770      	bx	lr
 8000b0c:	ea90 0f01 	teq	r0, r1
 8000b10:	bf1c      	itt	ne
 8000b12:	2000      	movne	r0, #0
 8000b14:	4770      	bxne	lr
 8000b16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b1a:	d104      	bne.n	8000b26 <__addsf3+0x126>
 8000b1c:	0040      	lsls	r0, r0, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	4770      	bx	lr
 8000b26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b2a:	bf3c      	itt	cc
 8000b2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bxcc	lr
 8000b32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3e:	4770      	bx	lr
 8000b40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b44:	bf16      	itet	ne
 8000b46:	4608      	movne	r0, r1
 8000b48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b4c:	4601      	movne	r1, r0
 8000b4e:	0242      	lsls	r2, r0, #9
 8000b50:	bf06      	itte	eq
 8000b52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b56:	ea90 0f01 	teqeq	r0, r1
 8000b5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_ui2f>:
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	e004      	b.n	8000b70 <__aeabi_i2f+0x8>
 8000b66:	bf00      	nop

08000b68 <__aeabi_i2f>:
 8000b68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b6c:	bf48      	it	mi
 8000b6e:	4240      	negmi	r0, r0
 8000b70:	ea5f 0c00 	movs.w	ip, r0
 8000b74:	bf08      	it	eq
 8000b76:	4770      	bxeq	lr
 8000b78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b7c:	4601      	mov	r1, r0
 8000b7e:	f04f 0000 	mov.w	r0, #0
 8000b82:	e01c      	b.n	8000bbe <__aeabi_l2f+0x2a>

08000b84 <__aeabi_ul2f>:
 8000b84:	ea50 0201 	orrs.w	r2, r0, r1
 8000b88:	bf08      	it	eq
 8000b8a:	4770      	bxeq	lr
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	e00a      	b.n	8000ba8 <__aeabi_l2f+0x14>
 8000b92:	bf00      	nop

08000b94 <__aeabi_l2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__aeabi_l2f+0x14>
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	ea5f 0c01 	movs.w	ip, r1
 8000bac:	bf02      	ittt	eq
 8000bae:	4684      	moveq	ip, r0
 8000bb0:	4601      	moveq	r1, r0
 8000bb2:	2000      	moveq	r0, #0
 8000bb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb8:	bf08      	it	eq
 8000bba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bc2:	fabc f28c 	clz	r2, ip
 8000bc6:	3a08      	subs	r2, #8
 8000bc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bcc:	db10      	blt.n	8000bf0 <__aeabi_l2f+0x5c>
 8000bce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd8:	f1c2 0220 	rsb	r2, r2, #32
 8000bdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be0:	fa20 f202 	lsr.w	r2, r0, r2
 8000be4:	eb43 0002 	adc.w	r0, r3, r2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f102 0220 	add.w	r2, r2, #32
 8000bf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c00:	fa21 f202 	lsr.w	r2, r1, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_fmul>:
 8000c10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c18:	bf1e      	ittt	ne
 8000c1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c1e:	ea92 0f0c 	teqne	r2, ip
 8000c22:	ea93 0f0c 	teqne	r3, ip
 8000c26:	d06f      	beq.n	8000d08 <__aeabi_fmul+0xf8>
 8000c28:	441a      	add	r2, r3
 8000c2a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c2e:	0240      	lsls	r0, r0, #9
 8000c30:	bf18      	it	ne
 8000c32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c36:	d01e      	beq.n	8000c76 <__aeabi_fmul+0x66>
 8000c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c44:	fba0 3101 	umull	r3, r1, r0, r1
 8000c48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c50:	bf3e      	ittt	cc
 8000c52:	0049      	lslcc	r1, r1, #1
 8000c54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c58:	005b      	lslcc	r3, r3, #1
 8000c5a:	ea40 0001 	orr.w	r0, r0, r1
 8000c5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c62:	2afd      	cmp	r2, #253	; 0xfd
 8000c64:	d81d      	bhi.n	8000ca2 <__aeabi_fmul+0x92>
 8000c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6e:	bf08      	it	eq
 8000c70:	f020 0001 	biceq.w	r0, r0, #1
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c7e:	bf08      	it	eq
 8000c80:	0249      	lsleq	r1, r1, #9
 8000c82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c8a:	3a7f      	subs	r2, #127	; 0x7f
 8000c8c:	bfc2      	ittt	gt
 8000c8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c96:	4770      	bxgt	lr
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	dc5d      	bgt.n	8000d60 <__aeabi_fmul+0x150>
 8000ca4:	f112 0f19 	cmn.w	r2, #25
 8000ca8:	bfdc      	itt	le
 8000caa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cae:	4770      	bxle	lr
 8000cb0:	f1c2 0200 	rsb	r2, r2, #0
 8000cb4:	0041      	lsls	r1, r0, #1
 8000cb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cba:	f1c2 0220 	rsb	r2, r2, #32
 8000cbe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cc6:	f140 0000 	adc.w	r0, r0, #0
 8000cca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cce:	bf08      	it	eq
 8000cd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd4:	4770      	bx	lr
 8000cd6:	f092 0f00 	teq	r2, #0
 8000cda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0040      	lsleq	r0, r0, #1
 8000ce2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ce6:	3a01      	subeq	r2, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xce>
 8000cea:	ea40 000c 	orr.w	r0, r0, ip
 8000cee:	f093 0f00 	teq	r3, #0
 8000cf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cf6:	bf02      	ittt	eq
 8000cf8:	0049      	lsleq	r1, r1, #1
 8000cfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cfe:	3b01      	subeq	r3, #1
 8000d00:	d0f9      	beq.n	8000cf6 <__aeabi_fmul+0xe6>
 8000d02:	ea41 010c 	orr.w	r1, r1, ip
 8000d06:	e78f      	b.n	8000c28 <__aeabi_fmul+0x18>
 8000d08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d0c:	ea92 0f0c 	teq	r2, ip
 8000d10:	bf18      	it	ne
 8000d12:	ea93 0f0c 	teqne	r3, ip
 8000d16:	d00a      	beq.n	8000d2e <__aeabi_fmul+0x11e>
 8000d18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d1c:	bf18      	it	ne
 8000d1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d22:	d1d8      	bne.n	8000cd6 <__aeabi_fmul+0xc6>
 8000d24:	ea80 0001 	eor.w	r0, r0, r1
 8000d28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d2c:	4770      	bx	lr
 8000d2e:	f090 0f00 	teq	r0, #0
 8000d32:	bf17      	itett	ne
 8000d34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d38:	4608      	moveq	r0, r1
 8000d3a:	f091 0f00 	teqne	r1, #0
 8000d3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d42:	d014      	beq.n	8000d6e <__aeabi_fmul+0x15e>
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	d101      	bne.n	8000d4e <__aeabi_fmul+0x13e>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d10f      	bne.n	8000d6e <__aeabi_fmul+0x15e>
 8000d4e:	ea93 0f0c 	teq	r3, ip
 8000d52:	d103      	bne.n	8000d5c <__aeabi_fmul+0x14c>
 8000d54:	024b      	lsls	r3, r1, #9
 8000d56:	bf18      	it	ne
 8000d58:	4608      	movne	r0, r1
 8000d5a:	d108      	bne.n	8000d6e <__aeabi_fmul+0x15e>
 8000d5c:	ea80 0001 	eor.w	r0, r0, r1
 8000d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bx	lr
 8000d6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_fdiv>:
 8000d78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d80:	bf1e      	ittt	ne
 8000d82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d86:	ea92 0f0c 	teqne	r2, ip
 8000d8a:	ea93 0f0c 	teqne	r3, ip
 8000d8e:	d069      	beq.n	8000e64 <__aeabi_fdiv+0xec>
 8000d90:	eba2 0203 	sub.w	r2, r2, r3
 8000d94:	ea80 0c01 	eor.w	ip, r0, r1
 8000d98:	0249      	lsls	r1, r1, #9
 8000d9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d9e:	d037      	beq.n	8000e10 <__aeabi_fdiv+0x98>
 8000da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	428b      	cmp	r3, r1
 8000db2:	bf38      	it	cc
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	bf24      	itt	cs
 8000dc2:	1a5b      	subcs	r3, r3, r1
 8000dc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dda:	bf24      	itt	cs
 8000ddc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000de4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de8:	bf24      	itt	cs
 8000dea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	bf18      	it	ne
 8000df6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dfa:	d1e0      	bne.n	8000dbe <__aeabi_fdiv+0x46>
 8000dfc:	2afd      	cmp	r2, #253	; 0xfd
 8000dfe:	f63f af50 	bhi.w	8000ca2 <__aeabi_fmul+0x92>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e08:	bf08      	it	eq
 8000e0a:	f020 0001 	biceq.w	r0, r0, #1
 8000e0e:	4770      	bx	lr
 8000e10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e18:	327f      	adds	r2, #127	; 0x7f
 8000e1a:	bfc2      	ittt	gt
 8000e1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e24:	4770      	bxgt	lr
 8000e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	3a01      	subs	r2, #1
 8000e30:	e737      	b.n	8000ca2 <__aeabi_fmul+0x92>
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xc2>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fdiv+0xda>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e795      	b.n	8000d90 <__aeabi_fdiv+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d108      	bne.n	8000e80 <__aeabi_fdiv+0x108>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	f47f af7d 	bne.w	8000d6e <__aeabi_fmul+0x15e>
 8000e74:	ea93 0f0c 	teq	r3, ip
 8000e78:	f47f af70 	bne.w	8000d5c <__aeabi_fmul+0x14c>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e776      	b.n	8000d6e <__aeabi_fmul+0x15e>
 8000e80:	ea93 0f0c 	teq	r3, ip
 8000e84:	d104      	bne.n	8000e90 <__aeabi_fdiv+0x118>
 8000e86:	024b      	lsls	r3, r1, #9
 8000e88:	f43f af4c 	beq.w	8000d24 <__aeabi_fmul+0x114>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e76e      	b.n	8000d6e <__aeabi_fmul+0x15e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	d1ca      	bne.n	8000e32 <__aeabi_fdiv+0xba>
 8000e9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea0:	f47f af5c 	bne.w	8000d5c <__aeabi_fmul+0x14c>
 8000ea4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea8:	f47f af3c 	bne.w	8000d24 <__aeabi_fmul+0x114>
 8000eac:	e75f      	b.n	8000d6e <__aeabi_fmul+0x15e>
 8000eae:	bf00      	nop

08000eb0 <__gesf2>:
 8000eb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000eb4:	e006      	b.n	8000ec4 <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__lesf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	e002      	b.n	8000ec4 <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__cmpsf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed4:	bf18      	it	ne
 8000ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eda:	d011      	beq.n	8000f00 <__cmpsf2+0x40>
 8000edc:	b001      	add	sp, #4
 8000ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee2:	bf18      	it	ne
 8000ee4:	ea90 0f01 	teqne	r0, r1
 8000ee8:	bf58      	it	pl
 8000eea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eee:	bf88      	it	hi
 8000ef0:	17c8      	asrhi	r0, r1, #31
 8000ef2:	bf38      	it	cc
 8000ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef8:	bf18      	it	ne
 8000efa:	f040 0001 	orrne.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f04:	d102      	bne.n	8000f0c <__cmpsf2+0x4c>
 8000f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0a:	d105      	bne.n	8000f18 <__cmpsf2+0x58>
 8000f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f10:	d1e4      	bne.n	8000edc <__cmpsf2+0x1c>
 8000f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f16:	d0e1      	beq.n	8000edc <__cmpsf2+0x1c>
 8000f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_cfrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4661      	mov	r1, ip
 8000f26:	e7ff      	b.n	8000f28 <__aeabi_cfcmpeq>

08000f28 <__aeabi_cfcmpeq>:
 8000f28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__cmpsf2>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf48      	it	mi
 8000f32:	f110 0f00 	cmnmi.w	r0, #0
 8000f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f38 <__aeabi_fcmpeq>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff fff4 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f40:	bf0c      	ite	eq
 8000f42:	2001      	moveq	r0, #1
 8000f44:	2000      	movne	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmplt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffea 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmple>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffe0 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpge>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffd2 	bl	8000f20 <__aeabi_cfrcmple>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpgt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffc8 	bl	8000f20 <__aeabi_cfrcmple>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_f2uiz>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	d20e      	bcs.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa4:	d30b      	bcc.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fae:	d409      	bmi.n	8000fc4 <__aeabi_f2uiz+0x28>
 8000fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2uiz+0x32>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d102      	bne.n	8000fd4 <__aeabi_f2uiz+0x38>
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd2:	4770      	bx	lr
 8000fd4:	f04f 0000 	mov.w	r0, #0
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_InitTick+0x3c>)
{
 8000fe0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe2:	7818      	ldrb	r0, [r3, #0]
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_InitTick+0x40>)
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff4:	f000 fb90 	bl	8001718 <HAL_SYSTICK_Config>
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	b958      	cbnz	r0, 8001014 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	2d0f      	cmp	r5, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	4602      	mov	r2, r0
 8001002:	4629      	mov	r1, r5
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f000 fb46 	bl	8001698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_InitTick+0x44>)
 800100e:	4620      	mov	r0, r4
 8001010:	601d      	str	r5, [r3, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001014:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x20>)
{
 8001026:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	f000 fb1f 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ffd0 	bl	8000fdc <HAL_InitTick>
  HAL_MspInit();
 800103c:	f001 fdbe 	bl	8002bbc <HAL_MspInit>
}
 8001040:	2000      	movs	r0, #0
 8001042:	bd08      	pop	{r3, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <HAL_IncTick+0x10>)
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_IncTick+0x14>)
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	440b      	add	r3, r1
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034
 800105c:	20000000 	.word	0x20000000

08001060 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_GetTick+0x8>)
 8001062:	6818      	ldr	r0, [r3, #0]
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000034 	.word	0x20000034

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fff6 	bl	8001060 <HAL_GetTick>
 8001074:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001078:	bf1e      	ittt	ne
 800107a:	4b04      	ldrne	r3, [pc, #16]	; (800108c <HAL_Delay+0x20>)
 800107c:	781b      	ldrbne	r3, [r3, #0]
 800107e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	1b40      	subs	r0, r0, r5
 8001086:	4284      	cmp	r4, r0
 8001088:	d8fa      	bhi.n	8001080 <HAL_Delay+0x14>
  {
  }
}
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	20000000 	.word	0x20000000

08001090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001090:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001092:	4604      	mov	r4, r0
 8001094:	2800      	cmp	r0, #0
 8001096:	d06e      	beq.n	8001176 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8001098:	f890 3020 	ldrb.w	r3, [r0, #32]
 800109c:	b90b      	cbnz	r3, 80010a2 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800109e:	f001 fdaf 	bl	8002c00 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010a2:	6822      	ldr	r2, [r4, #0]
 80010a4:	6813      	ldr	r3, [r2, #0]
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffd8 	bl	8001060 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	0791      	lsls	r1, r2, #30
 80010b8:	d451      	bmi.n	800115e <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c2:	f7ff ffcd 	bl	8001060 <HAL_GetTick>
 80010c6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	07d2      	lsls	r2, r2, #31
 80010ce:	d554      	bpl.n	800117a <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d0:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010d2:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	bf0c      	ite	eq
 80010da:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010de:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80010e2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e4:	7e62      	ldrb	r2, [r4, #25]
 80010e6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	bf0c      	ite	eq
 80010ec:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010f4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f6:	7ea2      	ldrb	r2, [r4, #26]
 80010f8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	bf0c      	ite	eq
 80010fe:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001102:	f022 0220 	bicne.w	r2, r2, #32
 8001106:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001108:	7ee2      	ldrb	r2, [r4, #27]
 800110a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	bf0c      	ite	eq
 8001110:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001114:	f042 0210 	orrne.w	r2, r2, #16
 8001118:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800111a:	7f22      	ldrb	r2, [r4, #28]
 800111c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	bf0c      	ite	eq
 8001122:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001126:	f022 0208 	bicne.w	r2, r2, #8
 800112a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800112c:	7f62      	ldrb	r2, [r4, #29]
 800112e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	bf0c      	ite	eq
 8001134:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001138:	f022 0204 	bicne.w	r2, r2, #4
 800113c:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800113e:	68e1      	ldr	r1, [r4, #12]
 8001140:	68a2      	ldr	r2, [r4, #8]
 8001142:	430a      	orrs	r2, r1
 8001144:	6921      	ldr	r1, [r4, #16]
 8001146:	430a      	orrs	r2, r1
 8001148:	6961      	ldr	r1, [r4, #20]
 800114a:	430a      	orrs	r2, r1
 800114c:	6861      	ldr	r1, [r4, #4]
 800114e:	3901      	subs	r1, #1
 8001150:	430a      	orrs	r2, r1
 8001152:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001154:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001156:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001158:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 800115c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115e:	f7ff ff7f 	bl	8001060 <HAL_GetTick>
 8001162:	1b40      	subs	r0, r0, r5
 8001164:	280a      	cmp	r0, #10
 8001166:	d9a4      	bls.n	80010b2 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001170:	2305      	movs	r3, #5
 8001172:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001176:	2001      	movs	r0, #1
}
 8001178:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800117a:	f7ff ff71 	bl	8001060 <HAL_GetTick>
 800117e:	1b40      	subs	r0, r0, r5
 8001180:	280a      	cmp	r0, #10
 8001182:	d9a1      	bls.n	80010c8 <HAL_CAN_Init+0x38>
 8001184:	e7f0      	b.n	8001168 <HAL_CAN_Init+0xd8>

08001186 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001186:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800118a:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 800118c:	3b01      	subs	r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d85f      	bhi.n	8001252 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001192:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001194:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001196:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001198:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011a4:	f000 021f 	and.w	r2, r0, #31
 80011a8:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011ac:	43d4      	mvns	r4, r2
 80011ae:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80011b2:	4025      	ands	r5, r4
 80011b4:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011b8:	69cd      	ldr	r5, [r1, #28]
 80011ba:	bb85      	cbnz	r5, 800121e <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011bc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011c0:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011c2:	4025      	ands	r5, r4
 80011c4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011c8:	888d      	ldrh	r5, [r1, #4]
 80011ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ce:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011d2:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011d6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011d8:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011da:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011de:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011e2:	6988      	ldr	r0, [r1, #24]
 80011e4:	bb68      	cbnz	r0, 8001242 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011e6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80011ea:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011ec:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011f0:	6908      	ldr	r0, [r1, #16]
 80011f2:	bb50      	cbnz	r0, 800124a <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011f4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80011f8:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011fa:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011fe:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001200:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001202:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001204:	bf02      	ittt	eq
 8001206:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 800120a:	430a      	orreq	r2, r1
 800120c:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001210:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800121c:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800121e:	2d01      	cmp	r5, #1
 8001220:	d1df      	bne.n	80011e2 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001222:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001226:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001228:	4315      	orrs	r5, r2
 800122a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800122e:	888d      	ldrh	r5, [r1, #4]
 8001230:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001234:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001238:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800123e:	898d      	ldrh	r5, [r1, #12]
 8001240:	e7cb      	b.n	80011da <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001242:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001246:	4310      	orrs	r0, r2
 8001248:	e7d0      	b.n	80011ec <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800124a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800124e:	4310      	orrs	r0, r2
 8001250:	e7d3      	b.n	80011fa <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001252:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800125a:	2001      	movs	r0, #1
  }
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}

0800125e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800125e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001260:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001264:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11f      	bne.n	80012aa <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800126a:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800126c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800126e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800127a:	f7ff fef1 	bl	8001060 <HAL_GetTick>
 800127e:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	6858      	ldr	r0, [r3, #4]
 8001284:	f010 0001 	ands.w	r0, r0, #1
 8001288:	d101      	bne.n	800128e <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800128a:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800128c:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128e:	f7ff fee7 	bl	8001060 <HAL_GetTick>
 8001292:	1b40      	subs	r0, r0, r5
 8001294:	280a      	cmp	r0, #10
 8001296:	d9f3      	bls.n	8001280 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800129a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129e:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80012a0:	2305      	movs	r3, #5
 80012a2:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
  }
}
 80012a8:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012b0:	6243      	str	r3, [r0, #36]	; 0x24
 80012b2:	e7f8      	b.n	80012a6 <HAL_CAN_Start+0x48>

080012b4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b6:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ba:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012bc:	3d01      	subs	r5, #1
 80012be:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012c0:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80012c2:	d841      	bhi.n	8001348 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012c4:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80012c8:	d03a      	beq.n	8001340 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012ca:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012ce:	2c03      	cmp	r4, #3
 80012d0:	f04f 0501 	mov.w	r5, #1
 80012d4:	d105      	bne.n	80012e2 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012dc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
  }
}
 80012e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012e2:	40a5      	lsls	r5, r4
 80012e4:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012e6:	6888      	ldr	r0, [r1, #8]
 80012e8:	68cf      	ldr	r7, [r1, #12]
 80012ea:	f104 0318 	add.w	r3, r4, #24
 80012ee:	bb10      	cbnz	r0, 8001336 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f0:	6808      	ldr	r0, [r1, #0]
 80012f2:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012fa:	6908      	ldr	r0, [r1, #16]
 80012fc:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012fe:	7d09      	ldrb	r1, [r1, #20]
 8001300:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001302:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001306:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001308:	bf08      	it	eq
 800130a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800130e:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001310:	bf04      	itt	eq
 8001312:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001316:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800131a:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 800131c:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800131e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001328:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001336:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001338:	4338      	orrs	r0, r7
 800133a:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 800133e:	e7da      	b.n	80012f6 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001340:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	e7c9      	b.n	80012dc <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001348:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800134a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134e:	e7c5      	b.n	80012dc <HAL_CAN_AddTxMessage+0x28>

08001350 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001352:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001356:	3c01      	subs	r4, #1
 8001358:	2c01      	cmp	r4, #1
 800135a:	d86b      	bhi.n	8001434 <HAL_CAN_GetRxMessage+0xe4>
 800135c:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800135e:	b941      	cbnz	r1, 8001372 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001360:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001362:	07a4      	lsls	r4, r4, #30
 8001364:	d107      	bne.n	8001376 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001366:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800136c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
  }
}
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001372:	6934      	ldr	r4, [r6, #16]
 8001374:	e7f5      	b.n	8001362 <HAL_CAN_GetRxMessage+0x12>
 8001376:	010c      	lsls	r4, r1, #4
 8001378:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800137a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800137e:	f007 0704 	and.w	r7, r7, #4
 8001382:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001384:	2f00      	cmp	r7, #0
 8001386:	d14b      	bne.n	8001420 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001388:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800138c:	0d7f      	lsrs	r7, r7, #21
 800138e:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001390:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001394:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001396:	f3c7 0740 	ubfx	r7, r7, #1, #1
 800139a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800139c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80013a0:	f007 070f 	and.w	r7, r7, #15
 80013a4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013aa:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013ae:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013b4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b6:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013b8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	4422      	add	r2, r4
 80013c2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013c6:	0a12      	lsrs	r2, r2, #8
 80013c8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013ca:	6802      	ldr	r2, [r0, #0]
 80013cc:	4422      	add	r2, r4
 80013ce:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013d2:	0c12      	lsrs	r2, r2, #16
 80013d4:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013d6:	6802      	ldr	r2, [r0, #0]
 80013d8:	4422      	add	r2, r4
 80013da:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013de:	0e12      	lsrs	r2, r2, #24
 80013e0:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013e2:	6802      	ldr	r2, [r0, #0]
 80013e4:	4422      	add	r2, r4
 80013e6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013ea:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	4422      	add	r2, r4
 80013f0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013f4:	0a12      	lsrs	r2, r2, #8
 80013f6:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f8:	6802      	ldr	r2, [r0, #0]
 80013fa:	4422      	add	r2, r4
 80013fc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001400:	0c12      	lsrs	r2, r2, #16
 8001402:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001404:	6802      	ldr	r2, [r0, #0]
 8001406:	4414      	add	r4, r2
 8001408:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800140c:	0e12      	lsrs	r2, r2, #24
 800140e:	71da      	strb	r2, [r3, #7]
 8001410:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001412:	b951      	cbnz	r1, 800142a <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	f042 0220 	orr.w	r2, r2, #32
 800141a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800141c:	2000      	movs	r0, #0
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001420:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001424:	08ff      	lsrs	r7, r7, #3
 8001426:	6057      	str	r7, [r2, #4]
 8001428:	e7b2      	b.n	8001390 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	f042 0220 	orr.w	r2, r2, #32
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	e7f3      	b.n	800141c <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001434:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143a:	e797      	b.n	800136c <HAL_CAN_GetRxMessage+0x1c>

0800143c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800143c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001440:	3b01      	subs	r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d805      	bhi.n	8001452 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001446:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001448:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800144a:	6953      	ldr	r3, [r2, #20]
 800144c:	4319      	orrs	r1, r3
 800144e:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001450:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001452:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
  }
}
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_TxMailbox0CompleteCallback>:
 800145e:	4770      	bx	lr

08001460 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001462:	4770      	bx	lr

08001464 <HAL_CAN_TxMailbox0AbortCallback>:
 8001464:	4770      	bx	lr

08001466 <HAL_CAN_TxMailbox1AbortCallback>:
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_TxMailbox2AbortCallback>:
 8001468:	4770      	bx	lr

0800146a <HAL_CAN_RxFifo0MsgPendingCallback>:
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_RxFifo0FullCallback>:
 800146c:	4770      	bx	lr

0800146e <HAL_CAN_RxFifo1MsgPendingCallback>:
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_RxFifo1FullCallback>:
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_SleepCallback>:
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001476:	4770      	bx	lr

08001478 <HAL_CAN_IRQHandler>:
{
 8001478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800147c:	6803      	ldr	r3, [r0, #0]
{
 800147e:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001480:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001482:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001486:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800148a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800148c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001490:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001494:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001498:	d022      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800149a:	f017 0401 	ands.w	r4, r7, #1
 800149e:	d007      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014a0:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014a2:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014a4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014a6:	f140 80a3 	bpl.w	80015f0 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014aa:	f7ff ffd8 	bl	800145e <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014ae:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b0:	05fb      	lsls	r3, r7, #23
 80014b2:	d509      	bpl.n	80014c8 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b8:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014ba:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014bc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014be:	f140 80a5 	bpl.w	800160c <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ffcc 	bl	8001460 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014c8:	03fb      	lsls	r3, r7, #15
 80014ca:	d509      	bpl.n	80014e0 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d0:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014d2:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014d4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014d6:	f140 80a7 	bpl.w	8001628 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014da:	4628      	mov	r0, r5
 80014dc:	f7ff ffc1 	bl	8001462 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014e0:	0733      	lsls	r3, r6, #28
 80014e2:	d507      	bpl.n	80014f4 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014e4:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014e8:	bf1f      	itttt	ne
 80014ea:	2210      	movne	r2, #16
 80014ec:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014ee:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014f2:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014f4:	0777      	lsls	r7, r6, #29
 80014f6:	d508      	bpl.n	800150a <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014f8:	f01b 0f08 	tst.w	fp, #8
 80014fc:	d005      	beq.n	800150a <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014fe:	2208      	movs	r2, #8
 8001500:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001502:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001504:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001506:	f7ff ffb1 	bl	800146c <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800150a:	07b0      	lsls	r0, r6, #30
 800150c:	d506      	bpl.n	800151c <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	0799      	lsls	r1, r3, #30
 8001514:	d002      	beq.n	800151c <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001516:	4628      	mov	r0, r5
 8001518:	f7ff ffa7 	bl	800146a <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800151c:	0672      	lsls	r2, r6, #25
 800151e:	d507      	bpl.n	8001530 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001520:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001524:	bf1f      	itttt	ne
 8001526:	2210      	movne	r2, #16
 8001528:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800152a:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800152e:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001530:	06b3      	lsls	r3, r6, #26
 8001532:	d508      	bpl.n	8001546 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001534:	f01a 0f08 	tst.w	sl, #8
 8001538:	d005      	beq.n	8001546 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800153a:	2208      	movs	r2, #8
 800153c:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800153e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001540:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001542:	f7ff ff95 	bl	8001470 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001546:	06f7      	lsls	r7, r6, #27
 8001548:	d506      	bpl.n	8001558 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	0798      	lsls	r0, r3, #30
 8001550:	d002      	beq.n	8001558 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001552:	4628      	mov	r0, r5
 8001554:	f7ff ff8b 	bl	800146e <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001558:	03b1      	lsls	r1, r6, #14
 800155a:	d508      	bpl.n	800156e <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800155c:	f019 0f10 	tst.w	r9, #16
 8001560:	d005      	beq.n	800156e <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001562:	2210      	movs	r2, #16
 8001564:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8001566:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001568:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800156a:	f7ff ff82 	bl	8001472 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800156e:	03f2      	lsls	r2, r6, #15
 8001570:	d508      	bpl.n	8001584 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001572:	f019 0f08 	tst.w	r9, #8
 8001576:	d005      	beq.n	8001584 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001578:	2208      	movs	r2, #8
 800157a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800157c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800157e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001580:	f7ff ff78 	bl	8001474 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001584:	0433      	lsls	r3, r6, #16
 8001586:	d52a      	bpl.n	80015de <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001588:	f019 0f04 	tst.w	r9, #4
 800158c:	682a      	ldr	r2, [r5, #0]
 800158e:	d024      	beq.n	80015da <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001590:	05f7      	lsls	r7, r6, #23
 8001592:	d504      	bpl.n	800159e <HAL_CAN_IRQHandler+0x126>
 8001594:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001598:	bf18      	it	ne
 800159a:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800159e:	05b0      	lsls	r0, r6, #22
 80015a0:	d504      	bpl.n	80015ac <HAL_CAN_IRQHandler+0x134>
 80015a2:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80015a6:	bf18      	it	ne
 80015a8:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ac:	0571      	lsls	r1, r6, #21
 80015ae:	d504      	bpl.n	80015ba <HAL_CAN_IRQHandler+0x142>
 80015b0:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80015b4:	bf18      	it	ne
 80015b6:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ba:	0533      	lsls	r3, r6, #20
 80015bc:	d50d      	bpl.n	80015da <HAL_CAN_IRQHandler+0x162>
 80015be:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80015c2:	d00a      	beq.n	80015da <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80015c4:	2b30      	cmp	r3, #48	; 0x30
 80015c6:	d04c      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1ea>
 80015c8:	d83c      	bhi.n	8001644 <HAL_CAN_IRQHandler+0x1cc>
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d043      	beq.n	8001656 <HAL_CAN_IRQHandler+0x1de>
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d044      	beq.n	800165c <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d2:	6993      	ldr	r3, [r2, #24]
 80015d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d8:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015da:	2304      	movs	r3, #4
 80015dc:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015de:	b12c      	cbz	r4, 80015ec <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80015e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80015e2:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80015e4:	431c      	orrs	r4, r3
 80015e6:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80015e8:	f7ff ff45 	bl	8001476 <HAL_CAN_ErrorCallback>
 80015ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015f0:	077a      	lsls	r2, r7, #29
 80015f2:	d405      	bmi.n	8001600 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015f4:	f017 0408 	ands.w	r4, r7, #8
 80015f8:	d105      	bne.n	8001606 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015fa:	f7ff ff33 	bl	8001464 <HAL_CAN_TxMailbox0AbortCallback>
 80015fe:	e757      	b.n	80014b0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001600:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001604:	e754      	b.n	80014b0 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001606:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800160a:	e751      	b.n	80014b0 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800160c:	0579      	lsls	r1, r7, #21
 800160e:	d502      	bpl.n	8001616 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001610:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8001614:	e758      	b.n	80014c8 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001616:	053a      	lsls	r2, r7, #20
 8001618:	d502      	bpl.n	8001620 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800161a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800161e:	e753      	b.n	80014c8 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001620:	4628      	mov	r0, r5
 8001622:	f7ff ff20 	bl	8001466 <HAL_CAN_TxMailbox1AbortCallback>
 8001626:	e74f      	b.n	80014c8 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001628:	0379      	lsls	r1, r7, #13
 800162a:	d502      	bpl.n	8001632 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800162c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001630:	e756      	b.n	80014e0 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001632:	033a      	lsls	r2, r7, #12
 8001634:	d502      	bpl.n	800163c <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001636:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800163a:	e751      	b.n	80014e0 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800163c:	4628      	mov	r0, r5
 800163e:	f7ff ff13 	bl	8001468 <HAL_CAN_TxMailbox2AbortCallback>
 8001642:	e74d      	b.n	80014e0 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8001644:	2b50      	cmp	r3, #80	; 0x50
 8001646:	d00f      	beq.n	8001668 <HAL_CAN_IRQHandler+0x1f0>
 8001648:	2b60      	cmp	r3, #96	; 0x60
 800164a:	d010      	beq.n	800166e <HAL_CAN_IRQHandler+0x1f6>
 800164c:	2b40      	cmp	r3, #64	; 0x40
 800164e:	d1c0      	bne.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001650:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8001654:	e7bd      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001656:	f044 0408 	orr.w	r4, r4, #8
            break;
 800165a:	e7ba      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800165c:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001660:	e7b7      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001662:	f044 0420 	orr.w	r4, r4, #32
            break;
 8001666:	e7b4      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001668:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800166c:	e7b1      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800166e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8001672:	e7ae      	b.n	80015d2 <HAL_CAN_IRQHandler+0x15a>

08001674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001676:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800167a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800168e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001690:	60d3      	str	r3, [r2, #12]
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b530      	push	{r4, r5, lr}
 800169c:	68dc      	ldr	r4, [r3, #12]
 800169e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	bf28      	it	cs
 80016ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	bf98      	it	ls
 80016b6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	fa05 f303 	lsl.w	r3, r5, r3
 80016bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c0:	bf88      	it	hi
 80016c2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4019      	ands	r1, r3
 80016c6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	fa05 f404 	lsl.w	r4, r5, r4
 80016cc:	3c01      	subs	r4, #1
 80016ce:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d2:	ea42 0201 	orr.w	r2, r2, r1
 80016d6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	bfaf      	iteee	ge
 80016dc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	4b06      	ldrlt	r3, [pc, #24]	; (80016fc <HAL_NVIC_SetPriority+0x64>)
 80016e2:	f000 000f 	andlt.w	r0, r0, #15
 80016e6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	bfa5      	ittet	ge
 80016ea:	b2d2      	uxtbge	r2, r2
 80016ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016f6:	bd30      	pop	{r4, r5, pc}
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	e000ed14 	.word	0xe000ed14

08001700 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001700:	2301      	movs	r3, #1
 8001702:	0942      	lsrs	r2, r0, #5
 8001704:	f000 001f 	and.w	r0, r0, #31
 8001708:	fa03 f000 	lsl.w	r0, r3, r0
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_NVIC_EnableIRQ+0x14>)
 800170e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	3801      	subs	r0, #1
 800171a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800171e:	d20a      	bcs.n	8001736 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001748:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800174a:	4616      	mov	r6, r2
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80018f4 <HAL_GPIO_Init+0x1b0>
 8001752:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80018f8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001756:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800175c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001760:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001764:	45a0      	cmp	r8, r4
 8001766:	d17f      	bne.n	8001868 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001768:	684d      	ldr	r5, [r1, #4]
 800176a:	2d12      	cmp	r5, #18
 800176c:	f000 80af 	beq.w	80018ce <HAL_GPIO_Init+0x18a>
 8001770:	f200 8088 	bhi.w	8001884 <HAL_GPIO_Init+0x140>
 8001774:	2d02      	cmp	r5, #2
 8001776:	f000 80a7 	beq.w	80018c8 <HAL_GPIO_Init+0x184>
 800177a:	d87c      	bhi.n	8001876 <HAL_GPIO_Init+0x132>
 800177c:	2d00      	cmp	r5, #0
 800177e:	f000 808e 	beq.w	800189e <HAL_GPIO_Init+0x15a>
 8001782:	2d01      	cmp	r5, #1
 8001784:	f000 809e 	beq.w	80018c4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001788:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800178c:	2cff      	cmp	r4, #255	; 0xff
 800178e:	bf93      	iteet	ls
 8001790:	4682      	movls	sl, r0
 8001792:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001796:	3d08      	subhi	r5, #8
 8001798:	f8d0 b000 	ldrls.w	fp, [r0]
 800179c:	bf92      	itee	ls
 800179e:	00b5      	lslls	r5, r6, #2
 80017a0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80017a4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a6:	fa09 f805 	lsl.w	r8, r9, r5
 80017aa:	ea2b 0808 	bic.w	r8, fp, r8
 80017ae:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b2:	bf88      	it	hi
 80017b4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b8:	ea48 0505 	orr.w	r5, r8, r5
 80017bc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80017c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80017c8:	d04e      	beq.n	8001868 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4d47      	ldr	r5, [pc, #284]	; (80018e8 <HAL_GPIO_Init+0x1a4>)
 80017cc:	4f46      	ldr	r7, [pc, #280]	; (80018e8 <HAL_GPIO_Init+0x1a4>)
 80017ce:	69ad      	ldr	r5, [r5, #24]
 80017d0:	f026 0803 	bic.w	r8, r6, #3
 80017d4:	f045 0501 	orr.w	r5, r5, #1
 80017d8:	61bd      	str	r5, [r7, #24]
 80017da:	69bd      	ldr	r5, [r7, #24]
 80017dc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80017e0:	f005 0501 	and.w	r5, r5, #1
 80017e4:	9501      	str	r5, [sp, #4]
 80017e6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017ea:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ee:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80017f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017f8:	fa09 f90b 	lsl.w	r9, r9, fp
 80017fc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001800:	4d3a      	ldr	r5, [pc, #232]	; (80018ec <HAL_GPIO_Init+0x1a8>)
 8001802:	42a8      	cmp	r0, r5
 8001804:	d068      	beq.n	80018d8 <HAL_GPIO_Init+0x194>
 8001806:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800180a:	42a8      	cmp	r0, r5
 800180c:	d066      	beq.n	80018dc <HAL_GPIO_Init+0x198>
 800180e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001812:	42a8      	cmp	r0, r5
 8001814:	d064      	beq.n	80018e0 <HAL_GPIO_Init+0x19c>
 8001816:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800181a:	42a8      	cmp	r0, r5
 800181c:	bf0c      	ite	eq
 800181e:	2503      	moveq	r5, #3
 8001820:	2504      	movne	r5, #4
 8001822:	fa05 f50b 	lsl.w	r5, r5, fp
 8001826:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800182a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001830:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001834:	bf14      	ite	ne
 8001836:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001838:	43a5      	biceq	r5, r4
 800183a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800183c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001842:	bf14      	ite	ne
 8001844:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001846:	43a5      	biceq	r5, r4
 8001848:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800184a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001850:	bf14      	ite	ne
 8001852:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001854:	43a5      	biceq	r5, r4
 8001856:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001858:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800185e:	bf14      	ite	ne
 8001860:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001862:	ea25 0404 	biceq.w	r4, r5, r4
 8001866:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001868:	3601      	adds	r6, #1
 800186a:	2e10      	cmp	r6, #16
 800186c:	f47f af73 	bne.w	8001756 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001870:	b003      	add	sp, #12
 8001872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001876:	2d03      	cmp	r5, #3
 8001878:	d022      	beq.n	80018c0 <HAL_GPIO_Init+0x17c>
 800187a:	2d11      	cmp	r5, #17
 800187c:	d184      	bne.n	8001788 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187e:	68ca      	ldr	r2, [r1, #12]
 8001880:	3204      	adds	r2, #4
          break;
 8001882:	e781      	b.n	8001788 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001884:	4f1a      	ldr	r7, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x1ac>)
 8001886:	42bd      	cmp	r5, r7
 8001888:	d009      	beq.n	800189e <HAL_GPIO_Init+0x15a>
 800188a:	d812      	bhi.n	80018b2 <HAL_GPIO_Init+0x16e>
 800188c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80018fc <HAL_GPIO_Init+0x1b8>
 8001890:	454d      	cmp	r5, r9
 8001892:	d004      	beq.n	800189e <HAL_GPIO_Init+0x15a>
 8001894:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001898:	454d      	cmp	r5, r9
 800189a:	f47f af75 	bne.w	8001788 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189e:	688a      	ldr	r2, [r1, #8]
 80018a0:	b1c2      	cbz	r2, 80018d4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80018a4:	bf0c      	ite	eq
 80018a6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80018aa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ae:	2208      	movs	r2, #8
 80018b0:	e76a      	b.n	8001788 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80018b2:	4575      	cmp	r5, lr
 80018b4:	d0f3      	beq.n	800189e <HAL_GPIO_Init+0x15a>
 80018b6:	4565      	cmp	r5, ip
 80018b8:	d0f1      	beq.n	800189e <HAL_GPIO_Init+0x15a>
 80018ba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001900 <HAL_GPIO_Init+0x1bc>
 80018be:	e7eb      	b.n	8001898 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2200      	movs	r2, #0
 80018c2:	e761      	b.n	8001788 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	68ca      	ldr	r2, [r1, #12]
          break;
 80018c6:	e75f      	b.n	8001788 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c8:	68ca      	ldr	r2, [r1, #12]
 80018ca:	3208      	adds	r2, #8
          break;
 80018cc:	e75c      	b.n	8001788 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ce:	68ca      	ldr	r2, [r1, #12]
 80018d0:	320c      	adds	r2, #12
          break;
 80018d2:	e759      	b.n	8001788 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d4:	2204      	movs	r2, #4
 80018d6:	e757      	b.n	8001788 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d8:	2500      	movs	r5, #0
 80018da:	e7a2      	b.n	8001822 <HAL_GPIO_Init+0xde>
 80018dc:	2501      	movs	r5, #1
 80018de:	e7a0      	b.n	8001822 <HAL_GPIO_Init+0xde>
 80018e0:	2502      	movs	r5, #2
 80018e2:	e79e      	b.n	8001822 <HAL_GPIO_Init+0xde>
 80018e4:	40010400 	.word	0x40010400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	10210000 	.word	0x10210000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10320000 	.word	0x10320000
 80018fc:	10110000 	.word	0x10110000
 8001900:	10220000 	.word	0x10220000

08001904 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	b10a      	cbz	r2, 800190a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001906:	6101      	str	r1, [r0, #16]
 8001908:	4770      	bx	lr
 800190a:	0409      	lsls	r1, r1, #16
 800190c:	e7fb      	b.n	8001906 <HAL_GPIO_WritePin+0x2>
	...

08001910 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001910:	6803      	ldr	r3, [r0, #0]
{
 8001912:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	07db      	lsls	r3, r3, #31
{
 8001918:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	d410      	bmi.n	800193e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	079f      	lsls	r7, r3, #30
 8001920:	d45e      	bmi.n	80019e0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	0719      	lsls	r1, r3, #28
 8001926:	f100 8095 	bmi.w	8001a54 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	075a      	lsls	r2, r3, #29
 800192e:	f100 80bf 	bmi.w	8001ab0 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	69ea      	ldr	r2, [r5, #28]
 8001934:	2a00      	cmp	r2, #0
 8001936:	f040 812d 	bne.w	8001b94 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800193a:	2000      	movs	r0, #0
 800193c:	e014      	b.n	8001968 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800193e:	4c90      	ldr	r4, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001940:	6863      	ldr	r3, [r4, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d007      	beq.n	800195a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	03de      	lsls	r6, r3, #15
 8001958:	d509      	bpl.n	800196e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	039c      	lsls	r4, r3, #14
 800195e:	d5dd      	bpl.n	800191c <HAL_RCC_OscConfig+0xc>
 8001960:	686b      	ldr	r3, [r5, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1da      	bne.n	800191c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
}
 8001968:	b002      	add	sp, #8
 800196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	686b      	ldr	r3, [r5, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d110      	bne.n	8001998 <HAL_RCC_OscConfig+0x88>
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800197e:	f7ff fb6f 	bl	8001060 <HAL_GetTick>
 8001982:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	0398      	lsls	r0, r3, #14
 8001988:	d4c8      	bmi.n	800191c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198a:	f7ff fb69 	bl	8001060 <HAL_GetTick>
 800198e:	1b80      	subs	r0, r0, r6
 8001990:	2864      	cmp	r0, #100	; 0x64
 8001992:	d9f7      	bls.n	8001984 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001994:	2003      	movs	r0, #3
 8001996:	e7e7      	b.n	8001968 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001998:	b99b      	cbnz	r3, 80019c2 <HAL_RCC_OscConfig+0xb2>
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6023      	str	r3, [r4, #0]
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019aa:	f7ff fb59 	bl	8001060 <HAL_GetTick>
 80019ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	0399      	lsls	r1, r3, #14
 80019b4:	d5b2      	bpl.n	800191c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff fb53 	bl	8001060 <HAL_GetTick>
 80019ba:	1b80      	subs	r0, r0, r6
 80019bc:	2864      	cmp	r0, #100	; 0x64
 80019be:	d9f7      	bls.n	80019b0 <HAL_RCC_OscConfig+0xa0>
 80019c0:	e7e8      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	d103      	bne.n	80019d2 <HAL_RCC_OscConfig+0xc2>
 80019ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ce:	6023      	str	r3, [r4, #0]
 80019d0:	e7d1      	b.n	8001976 <HAL_RCC_OscConfig+0x66>
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6023      	str	r3, [r4, #0]
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	e7cd      	b.n	800197c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019e0:	4c67      	ldr	r4, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	f013 0f0c 	tst.w	r3, #12
 80019e8:	d007      	beq.n	80019fa <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d110      	bne.n	8001a16 <HAL_RCC_OscConfig+0x106>
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	03da      	lsls	r2, r3, #15
 80019f8:	d40d      	bmi.n	8001a16 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	079b      	lsls	r3, r3, #30
 80019fe:	d502      	bpl.n	8001a06 <HAL_RCC_OscConfig+0xf6>
 8001a00:	692b      	ldr	r3, [r5, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d1af      	bne.n	8001966 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	696a      	ldr	r2, [r5, #20]
 8001a0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a12:	6023      	str	r3, [r4, #0]
 8001a14:	e785      	b.n	8001922 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a16:	692a      	ldr	r2, [r5, #16]
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	b16a      	cbz	r2, 8001a38 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a20:	f7ff fb1e 	bl	8001060 <HAL_GetTick>
 8001a24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	079f      	lsls	r7, r3, #30
 8001a2a:	d4ec      	bmi.n	8001a06 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb18 	bl	8001060 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f7      	bls.n	8001a26 <HAL_RCC_OscConfig+0x116>
 8001a36:	e7ad      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001a38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fb11 	bl	8001060 <HAL_GetTick>
 8001a3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	0798      	lsls	r0, r3, #30
 8001a44:	f57f af6d 	bpl.w	8001922 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fb0a 	bl	8001060 <HAL_GetTick>
 8001a4c:	1b80      	subs	r0, r0, r6
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	d9f6      	bls.n	8001a40 <HAL_RCC_OscConfig+0x130>
 8001a52:	e79f      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a54:	69aa      	ldr	r2, [r5, #24]
 8001a56:	4c4a      	ldr	r4, [pc, #296]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x278>)
 8001a5a:	b1da      	cbz	r2, 8001a94 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a60:	f7ff fafe 	bl	8001060 <HAL_GetTick>
 8001a64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a68:	079b      	lsls	r3, r3, #30
 8001a6a:	d50d      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a78:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a7a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a7c:	9b01      	ldr	r3, [sp, #4]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	9201      	str	r2, [sp, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_RCC_OscConfig+0x16a>
 8001a86:	e750      	b.n	800192a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff faea 	bl	8001060 <HAL_GetTick>
 8001a8c:	1b80      	subs	r0, r0, r6
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d9e9      	bls.n	8001a66 <HAL_RCC_OscConfig+0x156>
 8001a92:	e77f      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001a94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a96:	f7ff fae3 	bl	8001060 <HAL_GetTick>
 8001a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a9e:	079f      	lsls	r7, r3, #30
 8001aa0:	f57f af43 	bpl.w	800192a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fadc 	bl	8001060 <HAL_GetTick>
 8001aa8:	1b80      	subs	r0, r0, r6
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9f6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x18c>
 8001aae:	e771      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4c33      	ldr	r4, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	69e3      	ldr	r3, [r4, #28]
 8001ab4:	00d8      	lsls	r0, r3, #3
 8001ab6:	d424      	bmi.n	8001b02 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001ab8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	69e3      	ldr	r3, [r4, #28]
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61e3      	str	r3, [r4, #28]
 8001ac2:	69e3      	ldr	r3, [r4, #28]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4e30      	ldr	r6, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001ace:	6833      	ldr	r3, [r6, #0]
 8001ad0:	05d9      	lsls	r1, r3, #23
 8001ad2:	d518      	bpl.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	68eb      	ldr	r3, [r5, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d126      	bne.n	8001b28 <HAL_RCC_OscConfig+0x218>
 8001ada:	6a23      	ldr	r3, [r4, #32]
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fabd 	bl	8001060 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001aea:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	6a23      	ldr	r3, [r4, #32]
 8001aee:	079b      	lsls	r3, r3, #30
 8001af0:	d53f      	bpl.n	8001b72 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001af2:	2f00      	cmp	r7, #0
 8001af4:	f43f af1d 	beq.w	8001932 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	69e3      	ldr	r3, [r4, #28]
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	61e3      	str	r3, [r4, #28]
 8001b00:	e717      	b.n	8001932 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2700      	movs	r7, #0
 8001b04:	e7e2      	b.n	8001acc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b0e:	f7ff faa7 	bl	8001060 <HAL_GetTick>
 8001b12:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	6833      	ldr	r3, [r6, #0]
 8001b16:	05da      	lsls	r2, r3, #23
 8001b18:	d4dc      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1a:	f7ff faa1 	bl	8001060 <HAL_GetTick>
 8001b1e:	eba0 0008 	sub.w	r0, r0, r8
 8001b22:	2864      	cmp	r0, #100	; 0x64
 8001b24:	d9f6      	bls.n	8001b14 <HAL_RCC_OscConfig+0x204>
 8001b26:	e735      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	b9ab      	cbnz	r3, 8001b56 <HAL_RCC_OscConfig+0x246>
 8001b2a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6223      	str	r3, [r4, #32]
 8001b36:	6a23      	ldr	r3, [r4, #32]
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fa8f 	bl	8001060 <HAL_GetTick>
 8001b42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	6a23      	ldr	r3, [r4, #32]
 8001b46:	0798      	lsls	r0, r3, #30
 8001b48:	d5d3      	bpl.n	8001af2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fa89 	bl	8001060 <HAL_GetTick>
 8001b4e:	1b80      	subs	r0, r0, r6
 8001b50:	4540      	cmp	r0, r8
 8001b52:	d9f7      	bls.n	8001b44 <HAL_RCC_OscConfig+0x234>
 8001b54:	e71e      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	6a23      	ldr	r3, [r4, #32]
 8001b5a:	d103      	bne.n	8001b64 <HAL_RCC_OscConfig+0x254>
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6223      	str	r3, [r4, #32]
 8001b62:	e7ba      	b.n	8001ada <HAL_RCC_OscConfig+0x1ca>
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6223      	str	r3, [r4, #32]
 8001b6a:	6a23      	ldr	r3, [r4, #32]
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	e7b6      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fa75 	bl	8001060 <HAL_GetTick>
 8001b76:	eba0 0008 	sub.w	r0, r0, r8
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	d9b6      	bls.n	8001aec <HAL_RCC_OscConfig+0x1dc>
 8001b7e:	e709      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	42420000 	.word	0x42420000
 8001b88:	42420480 	.word	0x42420480
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b94:	4c22      	ldr	r4, [pc, #136]	; (8001c20 <HAL_RCC_OscConfig+0x310>)
 8001b96:	6863      	ldr	r3, [r4, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	f43f aee2 	beq.w	8001966 <HAL_RCC_OscConfig+0x56>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4e1f      	ldr	r6, [pc, #124]	; (8001c24 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001baa:	d12b      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa58 	bl	8001060 <HAL_GetTick>
 8001bb0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	0199      	lsls	r1, r3, #6
 8001bb6:	d41f      	bmi.n	8001bf8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb8:	6a2b      	ldr	r3, [r5, #32]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc0:	6862      	ldr	r2, [r4, #4]
 8001bc2:	68a9      	ldr	r1, [r5, #8]
 8001bc4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bda:	2301      	movs	r3, #1
 8001bdc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bde:	f7ff fa3f 	bl	8001060 <HAL_GetTick>
 8001be2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	019a      	lsls	r2, r3, #6
 8001be8:	f53f aea7 	bmi.w	800193a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fa38 	bl	8001060 <HAL_GetTick>
 8001bf0:	1b40      	subs	r0, r0, r5
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	d9f6      	bls.n	8001be4 <HAL_RCC_OscConfig+0x2d4>
 8001bf6:	e6cd      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff fa32 	bl	8001060 <HAL_GetTick>
 8001bfc:	1bc0      	subs	r0, r0, r7
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9d7      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x2a2>
 8001c02:	e6c7      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001c04:	f7ff fa2c 	bl	8001060 <HAL_GetTick>
 8001c08:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	f57f ae94 	bpl.w	800193a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fa25 	bl	8001060 <HAL_GetTick>
 8001c16:	1b40      	subs	r0, r0, r5
 8001c18:	2802      	cmp	r0, #2
 8001c1a:	d9f6      	bls.n	8001c0a <HAL_RCC_OscConfig+0x2fa>
 8001c1c:	e6ba      	b.n	8001994 <HAL_RCC_OscConfig+0x84>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	42420060 	.word	0x42420060

08001c28 <HAL_RCC_GetSysClockFreq>:
{
 8001c28:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x70>)
{
 8001c2c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2e:	ac02      	add	r4, sp, #8
 8001c30:	f103 0510 	add.w	r5, r3, #16
 8001c34:	4622      	mov	r2, r4
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	c203      	stmia	r2!, {r0, r1}
 8001c3e:	42ab      	cmp	r3, r5
 8001c40:	4614      	mov	r4, r2
 8001c42:	d1f7      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c44:	2301      	movs	r3, #1
 8001c46:	f88d 3004 	strb.w	r3, [sp, #4]
 8001c4a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001c4c:	4913      	ldr	r1, [pc, #76]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x74>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c4e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001c52:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	f003 020c 	and.w	r2, r3, #12
 8001c58:	2a04      	cmp	r2, #4
 8001c5a:	d01b      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x6c>
 8001c5c:	2a08      	cmp	r2, #8
 8001c5e:	d002      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3e>
      sysclockfreq = HSI_VALUE;
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x78>)
}
 8001c62:	b007      	add	sp, #28
 8001c64:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c66:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c6a:	a806      	add	r0, sp, #24
 8001c6c:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c6e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c70:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c74:	d50b      	bpl.n	8001c8e <HAL_RCC_GetSysClockFreq+0x66>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c76:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x7c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7a:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7e:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c80:	aa06      	add	r2, sp, #24
 8001c82:	4413      	add	r3, r2
 8001c84:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c8c:	e7e9      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001c90:	4350      	muls	r0, r2
 8001c92:	e7e6      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x7c>)
  return sysclockfreq;
 8001c96:	e7e4      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c98:	08002ef4 	.word	0x08002ef4
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	007a1200 	.word	0x007a1200
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_ClockConfig+0x154>)
{
 8001cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cb2:	6813      	ldr	r3, [r2, #0]
{
 8001cb4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	428b      	cmp	r3, r1
{
 8001cbc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cbe:	d32a      	bcc.n	8001d16 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	6829      	ldr	r1, [r5, #0]
 8001cc2:	078c      	lsls	r4, r1, #30
 8001cc4:	d434      	bmi.n	8001d30 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	07ca      	lsls	r2, r1, #31
 8001cc8:	d447      	bmi.n	8001d5a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cca:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_RCC_ClockConfig+0x154>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	429e      	cmp	r6, r3
 8001cd4:	f0c0 8082 	bcc.w	8001ddc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	682a      	ldr	r2, [r5, #0]
 8001cda:	4c4a      	ldr	r4, [pc, #296]	; (8001e04 <HAL_RCC_ClockConfig+0x158>)
 8001cdc:	f012 0f04 	tst.w	r2, #4
 8001ce0:	f040 8087 	bne.w	8001df2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	0713      	lsls	r3, r2, #28
 8001ce6:	d506      	bpl.n	8001cf6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce8:	6863      	ldr	r3, [r4, #4]
 8001cea:	692a      	ldr	r2, [r5, #16]
 8001cec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001cf0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cf4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf6:	f7ff ff97 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001cfa:	6863      	ldr	r3, [r4, #4]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_RCC_ClockConfig+0x15c>)
 8001cfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	40d8      	lsrs	r0, r3
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x160>)
 8001d08:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff f966 	bl	8000fdc <HAL_InitTick>
  return HAL_OK;
 8001d10:	2000      	movs	r0, #0
}
 8001d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f023 0307 	bic.w	r3, r3, #7
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d20:	6813      	ldr	r3, [r2, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	4299      	cmp	r1, r3
 8001d28:	d0ca      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d36:	bf1e      	ittt	ne
 8001d38:	685a      	ldrne	r2, [r3, #4]
 8001d3a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001d3e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d42:	bf42      	ittt	mi
 8001d44:	685a      	ldrmi	r2, [r3, #4]
 8001d46:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001d4a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68a8      	ldr	r0, [r5, #8]
 8001d50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d54:	4302      	orrs	r2, r0
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	e7b5      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	686a      	ldr	r2, [r5, #4]
 8001d5c:	4c29      	ldr	r4, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x158>)
 8001d5e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	d11c      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	d0df      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d70:	f023 0303 	bic.w	r3, r3, #3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001d78:	f7ff f972 	bl	8001060 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001d7e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d114      	bne.n	8001dae <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d84:	6863      	ldr	r3, [r4, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d09d      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7ff f967 	bl	8001060 <HAL_GetTick>
 8001d92:	1bc0      	subs	r0, r0, r7
 8001d94:	4540      	cmp	r0, r8
 8001d96:	d9f5      	bls.n	8001d84 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	2a02      	cmp	r2, #2
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001da6:	e7df      	b.n	8001d68 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	f013 0f02 	tst.w	r3, #2
 8001dac:	e7dc      	b.n	8001d68 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db2:	6863      	ldr	r3, [r4, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d086      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff f950 	bl	8001060 <HAL_GetTick>
 8001dc0:	1bc0      	subs	r0, r0, r7
 8001dc2:	4540      	cmp	r0, r8
 8001dc4:	d9f5      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x106>
 8001dc6:	e7e7      	b.n	8001d98 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f94a 	bl	8001060 <HAL_GetTick>
 8001dcc:	1bc0      	subs	r0, r0, r7
 8001dce:	4540      	cmp	r0, r8
 8001dd0:	d8e2      	bhi.n	8001d98 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	6863      	ldr	r3, [r4, #4]
 8001dd4:	f013 0f0c 	tst.w	r3, #12
 8001dd8:	d1f6      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x11c>
 8001dda:	e776      	b.n	8001cca <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	f023 0307 	bic.w	r3, r3, #7
 8001de2:	4333      	orrs	r3, r6
 8001de4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	429e      	cmp	r6, r3
 8001dee:	d19c      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x7e>
 8001df0:	e772      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df2:	6863      	ldr	r3, [r4, #4]
 8001df4:	68e9      	ldr	r1, [r5, #12]
 8001df6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6063      	str	r3, [r4, #4]
 8001dfe:	e771      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x38>
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08002f04 	.word	0x08002f04
 8001e0c:	20000008 	.word	0x20000008

08001e10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e10:	6a03      	ldr	r3, [r0, #32]
{
 8001e12:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e1e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e2e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e30:	4d0a      	ldr	r5, [pc, #40]	; (8001e5c <TIM_OC1_SetConfig+0x4c>)
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	d10b      	bne.n	8001e4e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e38:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e3c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e3e:	698e      	ldr	r6, [r1, #24]
 8001e40:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e42:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e4c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e50:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e52:	684a      	ldr	r2, [r1, #4]
 8001e54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e56:	6203      	str	r3, [r0, #32]
 8001e58:	bd70      	pop	{r4, r5, r6, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e60:	6a03      	ldr	r3, [r0, #32]
{
 8001e62:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e82:	4d0b      	ldr	r5, [pc, #44]	; (8001eb0 <TIM_OC3_SetConfig+0x50>)
 8001e84:	42a8      	cmp	r0, r5
 8001e86:	d10d      	bne.n	8001ea4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e92:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e94:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e96:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e9a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ea0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ea6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ea8:	684a      	ldr	r2, [r1, #4]
 8001eaa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eac:	6203      	str	r3, [r0, #32]
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb4:	6a03      	ldr	r3, [r0, #32]
{
 8001eb6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ebc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ebe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ec2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ece:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed8:	4d06      	ldr	r5, [pc, #24]	; (8001ef4 <TIM_OC4_SetConfig+0x40>)
 8001eda:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001edc:	bf02      	ittt	eq
 8001ede:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ee0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ee4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eec:	684a      	ldr	r2, [r1, #4]
 8001eee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef0:	6203      	str	r3, [r0, #32]
 8001ef2:	bd30      	pop	{r4, r5, pc}
 8001ef4:	40012c00 	.word	0x40012c00

08001ef8 <HAL_TIM_PWM_MspInit>:
 8001ef8:	4770      	bx	lr

08001efa <HAL_TIM_IC_MspInit>:
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001efc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	f04f 0302 	mov.w	r3, #2
 8001f08:	d01c      	beq.n	8001f44 <HAL_TIM_ConfigClockSource+0x48>
 8001f0a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f10:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001f12:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001f16:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f18:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f1c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f20:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f22:	680a      	ldr	r2, [r1, #0]
 8001f24:	2a40      	cmp	r2, #64	; 0x40
 8001f26:	d079      	beq.n	800201c <HAL_TIM_ConfigClockSource+0x120>
 8001f28:	d819      	bhi.n	8001f5e <HAL_TIM_ConfigClockSource+0x62>
 8001f2a:	2a10      	cmp	r2, #16
 8001f2c:	f000 8093 	beq.w	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f30:	d80a      	bhi.n	8001f48 <HAL_TIM_ConfigClockSource+0x4c>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	f000 8089 	beq.w	800204a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f44:	4618      	mov	r0, r3
}
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f48:	2a20      	cmp	r2, #32
 8001f4a:	f000 808a 	beq.w	8002062 <HAL_TIM_ConfigClockSource+0x166>
 8001f4e:	2a30      	cmp	r2, #48	; 0x30
 8001f50:	d1f2      	bne.n	8001f38 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f52:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f58:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f5c:	e036      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f5e:	2a70      	cmp	r2, #112	; 0x70
 8001f60:	d036      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f62:	d81b      	bhi.n	8001f9c <HAL_TIM_ConfigClockSource+0xa0>
 8001f64:	2a50      	cmp	r2, #80	; 0x50
 8001f66:	d042      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0xf2>
 8001f68:	2a60      	cmp	r2, #96	; 0x60
 8001f6a:	d1e5      	bne.n	8001f38 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f6e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f70:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f74:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f76:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f78:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f7c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f84:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f88:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f8c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f90:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f96:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f9a:	e017      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f9c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001fa0:	d011      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0xca>
 8001fa2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fa6:	d1c7      	bne.n	8001f38 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fa8:	688a      	ldr	r2, [r1, #8]
 8001faa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fac:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fae:	68c9      	ldr	r1, [r1, #12]
 8001fb0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fba:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fbc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc4:	e002      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	e7b3      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd0:	688a      	ldr	r2, [r1, #8]
 8001fd2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fd4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd6:	68c9      	ldr	r1, [r1, #12]
 8001fd8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fda:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fe2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001fe4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001fe6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fe8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001fec:	e7ee      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fee:	684c      	ldr	r4, [r1, #4]
 8001ff0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ff2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ff6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ffa:	f025 0501 	bic.w	r5, r5, #1
 8001ffe:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002000:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002002:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002004:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002008:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800200c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800200e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002010:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002016:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800201a:	e7d7      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201c:	684c      	ldr	r4, [r1, #4]
 800201e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002020:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002022:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002024:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002028:	f025 0501 	bic.w	r5, r5, #1
 800202c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002030:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002032:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002036:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800203a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800203c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800203e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002040:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002044:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002048:	e7c0      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800204a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800204c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002050:	f042 0207 	orr.w	r2, r2, #7
 8002054:	e7ba      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002056:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002058:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800205c:	f042 0217 	orr.w	r2, r2, #23
 8002060:	e7b4      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002062:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002064:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002068:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800206c:	e7ae      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0xd0>

0800206e <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 800206e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d01c      	beq.n	80020b0 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8002076:	290c      	cmp	r1, #12
 8002078:	d818      	bhi.n	80020ac <HAL_TIM_ReadCapturedValue+0x3e>
 800207a:	e8df f001 	tbb	[pc, r1]
 800207e:	1707      	.short	0x1707
 8002080:	170e1717 	.word	0x170e1717
 8002084:	17111717 	.word	0x17111717
 8002088:	1717      	.short	0x1717
 800208a:	14          	.byte	0x14
 800208b:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 800208c:	6803      	ldr	r3, [r0, #0]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8002090:	2200      	movs	r2, #0
 8002092:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8002096:	4618      	mov	r0, r3
 8002098:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800209a:	6803      	ldr	r3, [r0, #0]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 800209e:	e7f7      	b.n	8002090 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR3;
 80020a0:	6803      	ldr	r3, [r0, #0]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 80020a4:	e7f4      	b.n	8002090 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg =   htim->Instance->CCR4;
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 80020aa:	e7f1      	b.n	8002090 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e7ef      	b.n	8002090 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 80020b0:	2302      	movs	r3, #2
 80020b2:	e7f0      	b.n	8002096 <HAL_TIM_ReadCapturedValue+0x28>

080020b4 <HAL_TIM_PeriodElapsedCallback>:
 80020b4:	4770      	bx	lr

080020b6 <HAL_TIM_OC_DelayElapsedCallback>:
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80020b8:	4770      	bx	lr

080020ba <HAL_TIM_TriggerCallback>:
 80020ba:	4770      	bx	lr

080020bc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020bc:	6803      	ldr	r3, [r0, #0]
{
 80020be:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c0:	691a      	ldr	r2, [r3, #16]
{
 80020c2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c4:	0791      	lsls	r1, r2, #30
 80020c6:	d50e      	bpl.n	80020e6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	0792      	lsls	r2, r2, #30
 80020cc:	d50b      	bpl.n	80020e6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ce:	f06f 0202 	mvn.w	r2, #2
 80020d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d4:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020da:	079b      	lsls	r3, r3, #30
 80020dc:	d077      	beq.n	80021ce <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80020de:	f000 fac7 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	2300      	movs	r3, #0
 80020e4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	0750      	lsls	r0, r2, #29
 80020ec:	d510      	bpl.n	8002110 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	0751      	lsls	r1, r2, #29
 80020f2:	d50d      	bpl.n	8002110 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f4:	f06f 0204 	mvn.w	r2, #4
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020fc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fe:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002104:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002106:	d068      	beq.n	80021da <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002108:	f000 fab2 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210c:	2300      	movs	r3, #0
 800210e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	0712      	lsls	r2, r2, #28
 8002116:	d50f      	bpl.n	8002138 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	0710      	lsls	r0, r2, #28
 800211c:	d50c      	bpl.n	8002138 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211e:	f06f 0208 	mvn.w	r2, #8
 8002122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002124:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002126:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002128:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800212c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212e:	d05a      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	f000 fa9e 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002134:	2300      	movs	r3, #0
 8002136:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	06d2      	lsls	r2, r2, #27
 800213e:	d510      	bpl.n	8002162 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	06d0      	lsls	r0, r2, #27
 8002144:	d50d      	bpl.n	8002162 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002146:	f06f 0210 	mvn.w	r2, #16
 800214a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002150:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002152:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002158:	d04b      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	f000 fa89 	bl	8002670 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	2300      	movs	r3, #0
 8002160:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	07d1      	lsls	r1, r2, #31
 8002168:	d508      	bpl.n	800217c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	07d2      	lsls	r2, r2, #31
 800216e:	d505      	bpl.n	800217c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002170:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002174:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002176:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002178:	f7ff ff9c 	bl	80020b4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	0610      	lsls	r0, r2, #24
 8002182:	d508      	bpl.n	8002196 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	0611      	lsls	r1, r2, #24
 8002188:	d505      	bpl.n	8002196 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800218a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800218e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002190:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002192:	f000 fa6c 	bl	800266e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	0652      	lsls	r2, r2, #25
 800219c:	d508      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	0650      	lsls	r0, r2, #25
 80021a2:	d505      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80021a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021ac:	f7ff ff85 	bl	80020ba <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	0691      	lsls	r1, r2, #26
 80021b6:	d522      	bpl.n	80021fe <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	0692      	lsls	r2, r2, #26
 80021bc:	d51f      	bpl.n	80021fe <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021be:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80021c2:	4620      	mov	r0, r4
}
 80021c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80021ca:	f000 ba4f 	b.w	800266c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	f7ff ff72 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff ff70 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80021d8:	e783      	b.n	80020e2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	f7ff ff6c 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021de:	4620      	mov	r0, r4
 80021e0:	f7ff ff6a 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80021e4:	e792      	b.n	800210c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	f7ff ff66 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ff64 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80021f0:	e7a0      	b.n	8002134 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	f7ff ff60 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff ff5e 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80021fc:	e7af      	b.n	800215e <HAL_TIM_IRQHandler+0xa2>
 80021fe:	bd10      	pop	{r4, pc}

08002200 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002202:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	4290      	cmp	r0, r2
 8002206:	d00a      	beq.n	800221e <TIM_Base_SetConfig+0x1e>
 8002208:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800220c:	d007      	beq.n	800221e <TIM_Base_SetConfig+0x1e>
 800220e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002212:	4290      	cmp	r0, r2
 8002214:	d003      	beq.n	800221e <TIM_Base_SetConfig+0x1e>
 8002216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221a:	4290      	cmp	r0, r2
 800221c:	d115      	bne.n	800224a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800221e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002224:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <TIM_Base_SetConfig+0x6c>)
 8002228:	4290      	cmp	r0, r2
 800222a:	d00a      	beq.n	8002242 <TIM_Base_SetConfig+0x42>
 800222c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002230:	d007      	beq.n	8002242 <TIM_Base_SetConfig+0x42>
 8002232:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002236:	4290      	cmp	r0, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0x42>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4290      	cmp	r0, r2
 8002240:	d103      	bne.n	800224a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002242:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002248:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800224a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800224c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002250:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002252:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002254:	688b      	ldr	r3, [r1, #8]
 8002256:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002258:	680b      	ldr	r3, [r1, #0]
 800225a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <TIM_Base_SetConfig+0x6c>)
 800225e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002260:	bf04      	itt	eq
 8002262:	690b      	ldreq	r3, [r1, #16]
 8002264:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002266:	2301      	movs	r3, #1
 8002268:	6143      	str	r3, [r0, #20]
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00

08002270 <HAL_TIM_Base_Init>:
{
 8002270:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002272:	4604      	mov	r4, r0
 8002274:	b1a0      	cbz	r0, 80022a0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002276:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800227a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800227e:	b91b      	cbnz	r3, 8002288 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002280:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002284:	f000 fcfc 	bl	8002c80 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002288:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800228c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002290:	1d21      	adds	r1, r4, #4
 8002292:	f7ff ffb5 	bl	8002200 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002296:	2301      	movs	r3, #1
  return HAL_OK;
 8002298:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800229a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800229e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
}
 80022a2:	bd10      	pop	{r4, pc}

080022a4 <HAL_TIM_PWM_Init>:
{
 80022a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022a6:	4604      	mov	r4, r0
 80022a8:	b1a0      	cbz	r0, 80022d4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b2:	b91b      	cbnz	r3, 80022bc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80022b8:	f7ff fe1e 	bl	8001ef8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022be:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80022c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	1d21      	adds	r1, r4, #4
 80022c6:	f7ff ff9b 	bl	8002200 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ca:	2301      	movs	r3, #1
  return HAL_OK;
 80022cc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80022ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	bd10      	pop	{r4, pc}

080022d8 <HAL_TIM_IC_Init>:
{
 80022d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022da:	4604      	mov	r4, r0
 80022dc:	b1a0      	cbz	r0, 8002308 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e6:	b91b      	cbnz	r3, 80022f0 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80022ec:	f7ff fe05 	bl	8001efa <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80022f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	1d21      	adds	r1, r4, #4
 80022fa:	f7ff ff81 	bl	8002200 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022fe:	2301      	movs	r3, #1
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002306:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
}
 800230a:	bd10      	pop	{r4, pc}

0800230c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230c:	6a03      	ldr	r3, [r0, #32]
{
 800230e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002310:	f023 0310 	bic.w	r3, r3, #16
 8002314:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002316:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002318:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800231a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800231c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800231e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002322:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002326:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002328:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800232c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002330:	4d0b      	ldr	r5, [pc, #44]	; (8002360 <TIM_OC2_SetConfig+0x54>)
 8002332:	42a8      	cmp	r0, r5
 8002334:	d10d      	bne.n	8002352 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002336:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800233c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002340:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002342:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002344:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002348:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800234a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800234e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002352:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002354:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002356:	684a      	ldr	r2, [r1, #4]
 8002358:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800235a:	6203      	str	r3, [r0, #32]
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	bf00      	nop
 8002360:	40012c00 	.word	0x40012c00

08002364 <HAL_TIM_PWM_ConfigChannel>:
{
 8002364:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002366:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800236a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800236c:	2b01      	cmp	r3, #1
 800236e:	f04f 0002 	mov.w	r0, #2
 8002372:	d025      	beq.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002374:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002376:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800237a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800237e:	2a0c      	cmp	r2, #12
 8002380:	d818      	bhi.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002382:	e8df f002 	tbb	[pc, r2]
 8002386:	1707      	.short	0x1707
 8002388:	171e1717 	.word	0x171e1717
 800238c:	172f1717 	.word	0x172f1717
 8002390:	1717      	.short	0x1717
 8002392:	40          	.byte	0x40
 8002393:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	f7ff fd3b 	bl	8001e10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800239a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800239c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	f042 0208 	orr.w	r2, r2, #8
 80023a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	f022 0204 	bic.w	r2, r2, #4
 80023ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023b2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023b6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	f7ff ffa2 	bl	800230c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023e2:	e7e6      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	f7ff fd3b 	bl	8001e60 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	f042 0208 	orr.w	r2, r2, #8
 80023f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	f022 0204 	bic.w	r2, r2, #4
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002402:	61da      	str	r2, [r3, #28]
    break;
 8002404:	e7d6      	b.n	80023b4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	f7ff fd54 	bl	8001eb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800240c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800240e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002426:	e7ec      	b.n	8002402 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002428 <TIM_TI1_SetConfig>:
{
 8002428:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800242c:	4e12      	ldr	r6, [pc, #72]	; (8002478 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242e:	f024 0401 	bic.w	r4, r4, #1
 8002432:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002434:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8002436:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002438:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800243a:	d00a      	beq.n	8002452 <TIM_TI1_SetConfig+0x2a>
 800243c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002440:	d007      	beq.n	8002452 <TIM_TI1_SetConfig+0x2a>
 8002442:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002446:	42b0      	cmp	r0, r6
 8002448:	d003      	beq.n	8002452 <TIM_TI1_SetConfig+0x2a>
 800244a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800244e:	42b0      	cmp	r0, r6
 8002450:	d10f      	bne.n	8002472 <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002452:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002456:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002458:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800245a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800245e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002460:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002464:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002468:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800246a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800246c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800246e:	6201      	str	r1, [r0, #32]
}
 8002470:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002472:	f044 0201 	orr.w	r2, r4, #1
 8002476:	e7ef      	b.n	8002458 <TIM_TI1_SetConfig+0x30>
 8002478:	40012c00 	.word	0x40012c00

0800247c <HAL_TIM_IC_ConfigChannel>:
{
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800247e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002482:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002484:	2b01      	cmp	r3, #1
{
 8002486:	460d      	mov	r5, r1
 8002488:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800248c:	d019      	beq.n	80024c2 <HAL_TIM_IC_ConfigChannel+0x46>
 800248e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002494:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002498:	b9a2      	cbnz	r2, 80024c4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800249a:	68cb      	ldr	r3, [r1, #12]
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	c906      	ldmia	r1, {r1, r2}
 80024a0:	f7ff ffc2 	bl	8002428 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024a4:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80024a6:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	f022 020c 	bic.w	r2, r2, #12
 80024ae:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80024b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80024c4:	2a04      	cmp	r2, #4
 80024c6:	688e      	ldr	r6, [r1, #8]
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	c982      	ldmia	r1, {r1, r7}
 80024cc:	68e8      	ldr	r0, [r5, #12]
 80024ce:	d11f      	bne.n	8002510 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024d2:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d4:	f022 0210 	bic.w	r2, r2, #16
 80024d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024da:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80024dc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80024de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80024e2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024e6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024ec:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024ee:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024f0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024f8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80024fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024fc:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002504:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800250c:	619e      	str	r6, [r3, #24]
 800250e:	e7d2      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002510:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002512:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002514:	d11c      	bne.n	8002550 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800251c:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800251e:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002520:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8002524:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002526:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002528:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800252a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 800252e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002530:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 8002532:	f401 7100 	and.w	r1, r1, #512	; 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 8002536:	f425 7000 	bic.w	r0, r5, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 800253a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800253c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800253e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	f022 020c 	bic.w	r2, r2, #12
 8002546:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800254c:	61de      	str	r6, [r3, #28]
 800254e:	e7b2      	b.n	80024b6 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002550:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002554:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002556:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002558:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800255a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 800255e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002560:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002564:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002568:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800256a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800256c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800256e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 8002572:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002576:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002578:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800257a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002582:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800258a:	e7df      	b.n	800254c <HAL_TIM_IC_ConfigChannel+0xd0>

0800258c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800258c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800258e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002590:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002592:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002594:	ea23 0304 	bic.w	r3, r3, r4
 8002598:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800259a:	6a03      	ldr	r3, [r0, #32]
 800259c:	408a      	lsls	r2, r1
 800259e:	431a      	orrs	r2, r3
 80025a0:	6202      	str	r2, [r0, #32]
 80025a2:	bd10      	pop	{r4, pc}

080025a4 <HAL_TIM_PWM_Start>:
{
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025a8:	2201      	movs	r2, #1
 80025aa:	6800      	ldr	r0, [r0, #0]
 80025ac:	f7ff ffee 	bl	800258c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_TIM_PWM_Start+0x28>)
}
 80025b4:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025b6:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80025b8:	bf02      	ittt	eq
 80025ba:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80025bc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80025c0:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bd10      	pop	{r4, pc}
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <HAL_TIM_IC_Start_IT>:
{
 80025d0:	b510      	push	{r4, lr}
 80025d2:	4604      	mov	r4, r0
  switch (Channel)
 80025d4:	290c      	cmp	r1, #12
 80025d6:	d80d      	bhi.n	80025f4 <HAL_TIM_IC_Start_IT+0x24>
 80025d8:	e8df f001 	tbb	[pc, r1]
 80025dc:	0c0c0c07 	.word	0x0c0c0c07
 80025e0:	0c0c0c17 	.word	0x0c0c0c17
 80025e4:	0c0c0c1c 	.word	0x0c0c0c1c
 80025e8:	21          	.byte	0x21
 80025e9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	68d3      	ldr	r3, [r2, #12]
 80025ee:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025f2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f7ff ffc8 	bl	800258c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80025fc:	6822      	ldr	r2, [r4, #0]
}
 80025fe:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002600:	6813      	ldr	r3, [r2, #0]
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800260a:	6802      	ldr	r2, [r0, #0]
 800260c:	68d3      	ldr	r3, [r2, #12]
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	e7ee      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002614:	6802      	ldr	r2, [r0, #0]
 8002616:	68d3      	ldr	r3, [r2, #12]
 8002618:	f043 0308 	orr.w	r3, r3, #8
 800261c:	e7e9      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800261e:	6802      	ldr	r2, [r0, #0]
 8002620:	68d3      	ldr	r3, [r2, #12]
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	e7e4      	b.n	80025f2 <HAL_TIM_IC_Start_IT+0x22>

08002628 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002628:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800262c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800262e:	2b01      	cmp	r3, #1
 8002630:	f04f 0302 	mov.w	r3, #2
 8002634:	d018      	beq.n	8002668 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002636:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800263a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800263c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800263e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002640:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002646:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	4322      	orrs	r2, r4
 800264c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800265c:	2301      	movs	r3, #1
 800265e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002662:	2300      	movs	r3, #0
 8002664:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002668:	4618      	mov	r0, r3

  return HAL_OK;
}
 800266a:	bd10      	pop	{r4, pc}

0800266c <HAL_TIMEx_CommutationCallback>:
 800266c:	4770      	bx	lr

0800266e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM3) {
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x10>)
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	4293      	cmp	r3, r2
		//__HAL_TIM_SetCounter(&htim1, 0);
		TIM3->CNT = 0;
 8002676:	bf04      	itt	eq
 8002678:	2200      	moveq	r2, #0
 800267a:	625a      	streq	r2, [r3, #36]	; 0x24
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40000400 	.word	0x40000400

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b510      	push	{r4, lr}
 8002686:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002688:	2228      	movs	r2, #40	; 0x28
 800268a:	2100      	movs	r1, #0
 800268c:	a806      	add	r0, sp, #24
 800268e:	f000 fc1d 	bl	8002ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002692:	2214      	movs	r2, #20
 8002694:	2100      	movs	r1, #0
 8002696:	a801      	add	r0, sp, #4
 8002698:	f000 fc18 	bl	8002ecc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800269c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80026a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026aa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80026b4:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026b8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ba:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f7ff f928 	bl	8001910 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ca:	4621      	mov	r1, r4
 80026cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ce:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d2:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d6:	f7ff fae9 	bl	8001cac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80026da:	b010      	add	sp, #64	; 0x40
 80026dc:	bd10      	pop	{r4, pc}
	...

080026e0 <main>:
{
 80026e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
                          |GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ee:	f04f 0b04 	mov.w	fp, #4
{
 80026f2:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80026f4:	f7fe fc96 	bl	8001024 <HAL_Init>
  SystemClock_Config();
 80026f8:	f7ff ffc4 	bl	8002684 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	2210      	movs	r2, #16
 80026fe:	2100      	movs	r1, #0
 8002700:	a809      	add	r0, sp, #36	; 0x24
 8002702:	f000 fbe3 	bl	8002ecc <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002706:	4bb4      	ldr	r3, [pc, #720]	; (80029d8 <main+0x2f8>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002708:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800270c:	48b3      	ldr	r0, [pc, #716]	; (80029dc <main+0x2fc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270e:	f042 0220 	orr.w	r2, r2, #32
 8002712:	619a      	str	r2, [r3, #24]
 8002714:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8002716:	4eb2      	ldr	r6, [pc, #712]	; (80029e0 <main+0x300>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002718:	f002 0220 	and.w	r2, r2, #32
 800271c:	9200      	str	r2, [sp, #0]
 800271e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8002722:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	f042 0204 	orr.w	r2, r2, #4
 800272a:	619a      	str	r2, [r3, #24]
 800272c:	699a      	ldr	r2, [r3, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800272e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	f002 0204 	and.w	r2, r2, #4
 8002736:	9201      	str	r2, [sp, #4]
 8002738:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	699a      	ldr	r2, [r3, #24]
  htim3.Instance = TIM3;
 800273c:	4fa9      	ldr	r7, [pc, #676]	; (80029e4 <main+0x304>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	619a      	str	r2, [r3, #24]
 8002744:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002750:	f7ff f8d8 	bl	8001904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800275a:	48a3      	ldr	r0, [pc, #652]	; (80029e8 <main+0x308>)
 800275c:	f7ff f8d2 	bl	8001904 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	a909      	add	r1, sp, #36	; 0x24
 8002762:	489e      	ldr	r0, [pc, #632]	; (80029dc <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002766:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f7fe ffe7 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8002776:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
                          |GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	a909      	add	r1, sp, #36	; 0x24
 800277c:	489a      	ldr	r0, [pc, #616]	; (80029e8 <main+0x308>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800277e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f7fe ffdb 	bl	8001744 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278e:	4621      	mov	r1, r4
 8002790:	2210      	movs	r2, #16
 8002792:	a805      	add	r0, sp, #20
 8002794:	f000 fb9a 	bl	8002ecc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002798:	221c      	movs	r2, #28
 800279a:	4621      	mov	r1, r4
 800279c:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279e:	9403      	str	r4, [sp, #12]
 80027a0:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a2:	f000 fb93 	bl	8002ecc <memset>
  htim2.Init.Prescaler = 8;
 80027a6:	2308      	movs	r3, #8
 80027a8:	6073      	str	r3, [r6, #4]
  htim2.Init.Period = 1000;
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ae:	4630      	mov	r0, r6
  htim2.Init.Period = 1000;
 80027b0:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b6:	61b4      	str	r4, [r6, #24]
  htim2.Instance = TIM2;
 80027b8:	f8c6 a000 	str.w	sl, [r6]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027bc:	f7ff fd58 	bl	8002270 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c0:	a905      	add	r1, sp, #20
 80027c2:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c4:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c6:	f7ff fb99 	bl	8001efc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027ca:	4630      	mov	r0, r6
 80027cc:	f7ff fd6a 	bl	80022a4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d0:	a903      	add	r1, sp, #12
 80027d2:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d4:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d8:	f7ff ff26 	bl	8002628 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027dc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027de:	220c      	movs	r2, #12
 80027e0:	a909      	add	r1, sp, #36	; 0x24
 80027e2:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e4:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027e6:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e8:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ea:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027ec:	f7ff fdba 	bl	8002364 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80027f0:	4630      	mov	r0, r6
 80027f2:	f000 fa8b 	bl	8002d0c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f6:	4621      	mov	r1, r4
 80027f8:	2210      	movs	r2, #16
 80027fa:	a805      	add	r0, sp, #20
 80027fc:	f000 fb66 	bl	8002ecc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002800:	4621      	mov	r1, r4
 8002802:	2210      	movs	r2, #16
 8002804:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	9403      	str	r4, [sp, #12]
 8002808:	9404      	str	r4, [sp, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800280a:	f000 fb5f 	bl	8002ecc <memset>
  htim3.Init.Prescaler = 72;
 800280e:	2348      	movs	r3, #72	; 0x48
 8002810:	4a76      	ldr	r2, [pc, #472]	; (80029ec <main+0x30c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002812:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 72;
 8002814:	e887 000c 	stmia.w	r7, {r2, r3}
  htim3.Init.Period = 65535;
 8002818:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281c:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 65535;
 800281e:	60fb      	str	r3, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002820:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002822:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002824:	f7ff fd24 	bl	8002270 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002828:	a905      	add	r1, sp, #20
 800282a:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282c:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800282e:	f7ff fb65 	bl	8001efc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002832:	4638      	mov	r0, r7
 8002834:	f7ff fd50 	bl	80022d8 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002838:	a903      	add	r1, sp, #12
 800283a:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283e:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002840:	f7ff fef2 	bl	8002628 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICFilter = 15;
 8002844:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002846:	220c      	movs	r2, #12
 8002848:	a909      	add	r1, sp, #36	; 0x24
 800284a:	4638      	mov	r0, r7
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800284c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800284e:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigIC.ICFilter = 15;
 8002850:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002852:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002856:	f7ff fe11 	bl	800247c <HAL_TIM_IC_ConfigChannel>
  hcan1.Init.Prescaler = 18;
 800285a:	2312      	movs	r3, #18
  hcan1.Instance = CAN1;
 800285c:	4d64      	ldr	r5, [pc, #400]	; (80029f0 <main+0x310>)
  hcan1.Init.Prescaler = 18;
 800285e:	4965      	ldr	r1, [pc, #404]	; (80029f4 <main+0x314>)
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002860:	4628      	mov	r0, r5
  hcan1.Init.Prescaler = 18;
 8002862:	e885 000a 	stmia.w	r5, {r1, r3}
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002866:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800286a:	612b      	str	r3, [r5, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800286c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002870:	60ac      	str	r4, [r5, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002872:	616b      	str	r3, [r5, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002874:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002876:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002878:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800287a:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800287c:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800287e:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002880:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002882:	f7fe fc05 	bl	8001090 <HAL_CAN_Init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002886:	210c      	movs	r1, #12
 8002888:	4638      	mov	r0, r7
 800288a:	f7ff fea1 	bl	80025d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800288e:	210c      	movs	r1, #12
 8002890:	4630      	mov	r0, r6
 8002892:	f7ff fe87 	bl	80025a4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8002896:	4642      	mov	r2, r8
 8002898:	4659      	mov	r1, fp
 800289a:	4850      	ldr	r0, [pc, #320]	; (80029dc <main+0x2fc>)
 800289c:	f7ff f832 	bl	8001904 <HAL_GPIO_WritePin>
  pHeader.StdId = 0x3E;
 80028a0:	223e      	movs	r2, #62	; 0x3e
  pHeader.DLC = 1;
 80028a2:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <main+0x318>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80028a4:	4955      	ldr	r1, [pc, #340]	; (80029fc <main+0x31c>)
  pHeader.StdId = 0x3E;
 80028a6:	601a      	str	r2, [r3, #0]
  pHeader.IDE = CAN_ID_STD;
 80028a8:	609c      	str	r4, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 80028aa:	60dc      	str	r4, [r3, #12]
  pHeader.DLC = 1;
 80028ac:	f8c3 8010 	str.w	r8, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x1F<<5;
 80028b0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80028b4:	4628      	mov	r0, r5
  sFilterConfig.FilterIdLow = 0;
 80028b6:	e881 0018 	stmia.w	r1, {r3, r4}
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80028ba:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterMaskIdHigh = 0;
 80028bc:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80028be:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80028c0:	61cc      	str	r4, [r1, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80028c2:	f8c1 8018 	str.w	r8, [r1, #24]
  sFilterConfig.FilterActivation = ENABLE;
 80028c6:	f8c1 8020 	str.w	r8, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80028ca:	f7fe fc5c 	bl	8001186 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80028ce:	4628      	mov	r0, r5
 80028d0:	f7fe fcc5 	bl	800125e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80028d4:	4649      	mov	r1, r9
 80028d6:	4628      	mov	r0, r5
 80028d8:	f7fe fdb0 	bl	800143c <HAL_CAN_ActivateNotification>
  HAL_Delay(50);
 80028dc:	2032      	movs	r0, #50	; 0x32
 80028de:	f7fe fbc5 	bl	800106c <HAL_Delay>
  TIM2->CCR4 = 220;
 80028e2:	23dc      	movs	r3, #220	; 0xdc
	  if (t_speed < 0) {
 80028e4:	2400      	movs	r4, #0
	  rotate_time = (float)(input_capture*520)/1000000;
 80028e6:	4e46      	ldr	r6, [pc, #280]	; (8002a00 <main+0x320>)
  TIM2->CCR4 = 220;
 80028e8:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
	  if (t_speed < 0) {
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <main+0x324>)
 80028ee:	2100      	movs	r1, #0
 80028f0:	681d      	ldr	r5, [r3, #0]
 80028f2:	4f45      	ldr	r7, [pc, #276]	; (8002a08 <main+0x328>)
 80028f4:	4628      	mov	r0, r5
 80028f6:	f7fe fb29 	bl	8000f4c <__aeabi_fcmplt>
 80028fa:	4680      	mov	r8, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f000 80b8 	beq.w	8002a72 <main+0x392>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8002902:	2201      	movs	r2, #1
 8002904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002908:	4837      	ldr	r0, [pc, #220]	; (80029e8 <main+0x308>)
  target_speed_l = l_speed;
 800290a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002a24 <main+0x344>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 800290e:	f7fe fff9 	bl	8001904 <HAL_GPIO_WritePin>
		  move_left(-t_speed);
 8002912:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800291c:	4832      	ldr	r0, [pc, #200]	; (80029e8 <main+0x308>)
 800291e:	f7fe fff1 	bl	8001904 <HAL_GPIO_WritePin>
  target_speed_l = l_speed;
 8002922:	f8c8 5000 	str.w	r5, [r8]
  if (target_speed_l >= 0.1) {
 8002926:	4628      	mov	r0, r5
 8002928:	f7fd fd76 	bl	8000418 <__aeabi_f2d>
 800292c:	a328      	add	r3, pc, #160	; (adr r3, 80029d0 <main+0x2f0>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f7fe f84b 	bl	80009cc <__aeabi_dcmpge>
 8002936:	2800      	cmp	r0, #0
 8002938:	f000 8086 	beq.w	8002a48 <main+0x368>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800293c:	210c      	movs	r1, #12
 800293e:	4829      	ldr	r0, [pc, #164]	; (80029e4 <main+0x304>)
 8002940:	f7ff fb95 	bl	800206e <HAL_TIM_ReadCapturedValue>
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <main+0x32c>)
	  rotate_speed = (1/rotate_time);
 8002946:	4d32      	ldr	r5, [pc, #200]	; (8002a10 <main+0x330>)
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002948:	6018      	str	r0, [r3, #0]
	  rotate_time = (float)(input_capture*520)/1000000;
 800294a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800294e:	4358      	muls	r0, r3
 8002950:	f7fe f906 	bl	8000b60 <__aeabi_ui2f>
 8002954:	4631      	mov	r1, r6
 8002956:	f7fe fa0f 	bl	8000d78 <__aeabi_fdiv>
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <main+0x334>)
	  rotate_speed = (1/rotate_time);
 800295c:	4601      	mov	r1, r0
	  rotate_time = (float)(input_capture*520)/1000000;
 800295e:	6018      	str	r0, [r3, #0]
 8002960:	4681      	mov	r9, r0
	  rotate_speed = (1/rotate_time);
 8002962:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002966:	f7fe fa07 	bl	8000d78 <__aeabi_fdiv>
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 800296a:	492b      	ldr	r1, [pc, #172]	; (8002a18 <main+0x338>)
	  rotate_speed = (1/rotate_time);
 800296c:	6028      	str	r0, [r5, #0]
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 800296e:	f7fe f94f 	bl	8000c10 <__aeabi_fmul>
 8002972:	f7fe fb13 	bl	8000f9c <__aeabi_f2uiz>
	  if (rotate_time == 0) {
 8002976:	4621      	mov	r1, r4
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002978:	7038      	strb	r0, [r7, #0]
	  if (rotate_time == 0) {
 800297a:	4648      	mov	r0, r9
 800297c:	f7fe fadc 	bl	8000f38 <__aeabi_fcmpeq>
 8002980:	b100      	cbz	r0, 8002984 <main+0x2a4>
		  rotate_speed = 0;
 8002982:	602c      	str	r4, [r5, #0]
	  pwm = TIM2->CCR4;
 8002984:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <main+0x33c>)
 800298a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
	  if ((rotate_speed<(target_speed_l*0.999f))&&(rotate_speed!=0)) {
 800298c:	f8d8 8000 	ldr.w	r8, [r8]
 8002990:	682d      	ldr	r5, [r5, #0]
 8002992:	4923      	ldr	r1, [pc, #140]	; (8002a20 <main+0x340>)
	  pwm = TIM2->CCR4;
 8002994:	601a      	str	r2, [r3, #0]
	  if ((rotate_speed<(target_speed_l*0.999f))&&(rotate_speed!=0)) {
 8002996:	4640      	mov	r0, r8
 8002998:	f7fe f93a 	bl	8000c10 <__aeabi_fmul>
 800299c:	4629      	mov	r1, r5
 800299e:	f7fe faf3 	bl	8000f88 <__aeabi_fcmpgt>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d040      	beq.n	8002a28 <main+0x348>
 80029a6:	4621      	mov	r1, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	f7fe fac5 	bl	8000f38 <__aeabi_fcmpeq>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d13a      	bne.n	8002a28 <main+0x348>
		  if (TIM2->CCR4 > 750) {
 80029b2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80029b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d900      	bls.n	80029be <main+0x2de>
			  TIM2->CCR4 = 750;
 80029bc:	643b      	str	r3, [r7, #64]	; 0x40
	  	  TIM2->CCR4 += 1;
 80029be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80029c4:	3301      	adds	r3, #1
	  		  TIM2->CCR4 -= 1;
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
	  		  HAL_Delay(2);
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7fe fb4f 	bl	800106c <HAL_Delay>
 80029ce:	e78d      	b.n	80028ec <main+0x20c>
 80029d0:	9999999a 	.word	0x9999999a
 80029d4:	3fb99999 	.word	0x3fb99999
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	200000f4 	.word	0x200000f4
 80029e4:	20000094 	.word	0x20000094
 80029e8:	40010c00 	.word	0x40010c00
 80029ec:	40000400 	.word	0x40000400
 80029f0:	20000150 	.word	0x20000150
 80029f4:	40006400 	.word	0x40006400
 80029f8:	2000017c 	.word	0x2000017c
 80029fc:	20000038 	.word	0x20000038
 8002a00:	49742400 	.word	0x49742400
 8002a04:	20000028 	.word	0x20000028
 8002a08:	200000de 	.word	0x200000de
 8002a0c:	20000090 	.word	0x20000090
 8002a10:	200000d4 	.word	0x200000d4
 8002a14:	20000194 	.word	0x20000194
 8002a18:	42700000 	.word	0x42700000
 8002a1c:	200000f0 	.word	0x200000f0
 8002a20:	3f7fbe77 	.word	0x3f7fbe77
 8002a24:	2000002c 	.word	0x2000002c
	  else if ((rotate_speed>(target_speed_l*1.001f))) {
 8002a28:	4957      	ldr	r1, [pc, #348]	; (8002b88 <main+0x4a8>)
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	f7fe f8f0 	bl	8000c10 <__aeabi_fmul>
 8002a30:	4601      	mov	r1, r0
 8002a32:	4628      	mov	r0, r5
 8002a34:	f7fe faa8 	bl	8000f88 <__aeabi_fcmpgt>
	  else if ((rotate_speed>(target_speed_r*1.001))) {
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f43f af57 	beq.w	80028ec <main+0x20c>
	  		  TIM2->CCR4 -= 1;
 8002a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002a44:	3b01      	subs	r3, #1
 8002a46:	e7be      	b.n	80029c6 <main+0x2e6>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4e:	484f      	ldr	r0, [pc, #316]	; (8002b8c <main+0x4ac>)
 8002a50:	f7fe ff58 	bl	8001904 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a5a:	484c      	ldr	r0, [pc, #304]	; (8002b8c <main+0x4ac>)
 8002a5c:	f7fe ff52 	bl	8001904 <HAL_GPIO_WritePin>
	  rotate_speed_can = 0;
 8002a60:	2300      	movs	r3, #0
	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &rotate_speed_can, &TxMailbox);
 8002a62:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <main+0x4b0>)
	  rotate_speed_can = 0;
 8002a64:	703b      	strb	r3, [r7, #0]
	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &rotate_speed_can, &TxMailbox);
 8002a66:	494b      	ldr	r1, [pc, #300]	; (8002b94 <main+0x4b4>)
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <main+0x4b8>)
 8002a6a:	484c      	ldr	r0, [pc, #304]	; (8002b9c <main+0x4bc>)
 8002a6c:	f7fe fc22 	bl	80012b4 <HAL_CAN_AddTxMessage>
 8002a70:	e73c      	b.n	80028ec <main+0x20c>
	  else if (t_speed > 0) {
 8002a72:	4621      	mov	r1, r4
 8002a74:	4628      	mov	r0, r5
 8002a76:	f7fe fa87 	bl	8000f88 <__aeabi_fcmpgt>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d0e4      	beq.n	8002a48 <main+0x368>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002a7e:	4642      	mov	r2, r8
 8002a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a84:	4841      	ldr	r0, [pc, #260]	; (8002b8c <main+0x4ac>)
  target_speed_r = r_speed;
 8002a86:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002bb4 <main+0x4d4>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002a8a:	f7fe ff3b 	bl	8001904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a94:	483d      	ldr	r0, [pc, #244]	; (8002b8c <main+0x4ac>)
 8002a96:	f7fe ff35 	bl	8001904 <HAL_GPIO_WritePin>
  target_speed_r = r_speed;
 8002a9a:	f8ca 5000 	str.w	r5, [sl]
  if (target_speed_r >= 0.1) {
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f7fd fcba 	bl	8000418 <__aeabi_f2d>
 8002aa4:	a332      	add	r3, pc, #200	; (adr r3, 8002b70 <main+0x490>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd ff8f 	bl	80009cc <__aeabi_dcmpge>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d0ca      	beq.n	8002a48 <main+0x368>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002ab2:	210c      	movs	r1, #12
 8002ab4:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <main+0x4c0>)
 8002ab6:	f7ff fada 	bl	800206e <HAL_TIM_ReadCapturedValue>
 8002aba:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <main+0x4c4>)
	  rotate_speed = (1/rotate_time);
 8002abc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8002bb8 <main+0x4d8>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002ac0:	6018      	str	r0, [r3, #0]
	  rotate_time = (float)(input_capture*520)/1000000;
 8002ac2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ac6:	4358      	muls	r0, r3
 8002ac8:	f7fe f84a 	bl	8000b60 <__aeabi_ui2f>
 8002acc:	4631      	mov	r1, r6
 8002ace:	f7fe f953 	bl	8000d78 <__aeabi_fdiv>
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <main+0x4c8>)
	  rotate_speed = (1/rotate_time);
 8002ad4:	4601      	mov	r1, r0
	  rotate_time = (float)(input_capture*520)/1000000;
 8002ad6:	6018      	str	r0, [r3, #0]
 8002ad8:	4605      	mov	r5, r0
	  rotate_speed = (1/rotate_time);
 8002ada:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ade:	f7fe f94b 	bl	8000d78 <__aeabi_fdiv>
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002ae2:	4932      	ldr	r1, [pc, #200]	; (8002bac <main+0x4cc>)
	  rotate_speed = (1/rotate_time);
 8002ae4:	f8c8 0000 	str.w	r0, [r8]
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002ae8:	f7fe f892 	bl	8000c10 <__aeabi_fmul>
 8002aec:	f7fe fa56 	bl	8000f9c <__aeabi_f2uiz>
	  if (rotate_time == 0) {
 8002af0:	4621      	mov	r1, r4
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002af2:	7038      	strb	r0, [r7, #0]
	  if (rotate_time == 0) {
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7fe fa1f 	bl	8000f38 <__aeabi_fcmpeq>
 8002afa:	b108      	cbz	r0, 8002b00 <main+0x420>
		  rotate_speed = 0;
 8002afc:	f8c8 4000 	str.w	r4, [r8]
	  pwm = TIM2->CCR4;
 8002b00:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <main+0x4d0>)
 8002b06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	  if ((rotate_speed<(target_speed_r*0.999))&&(rotate_speed!=0)) {
 8002b08:	f8d8 7000 	ldr.w	r7, [r8]
	  pwm = TIM2->CCR4;
 8002b0c:	601a      	str	r2, [r3, #0]
	  if ((rotate_speed<(target_speed_r*0.999))&&(rotate_speed!=0)) {
 8002b0e:	4638      	mov	r0, r7
 8002b10:	f7fd fc82 	bl	8000418 <__aeabi_f2d>
 8002b14:	4680      	mov	r8, r0
 8002b16:	f8da 0000 	ldr.w	r0, [sl]
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	f7fd fc7c 	bl	8000418 <__aeabi_f2d>
 8002b20:	a315      	add	r3, pc, #84	; (adr r3, 8002b78 <main+0x498>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	4682      	mov	sl, r0
 8002b28:	468b      	mov	fp, r1
 8002b2a:	f7fd fcc9 	bl	80004c0 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4640      	mov	r0, r8
 8002b34:	4649      	mov	r1, r9
 8002b36:	f7fd ff35 	bl	80009a4 <__aeabi_dcmplt>
 8002b3a:	b158      	cbz	r0, 8002b54 <main+0x474>
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	4638      	mov	r0, r7
 8002b40:	f7fe f9fa 	bl	8000f38 <__aeabi_fcmpeq>
 8002b44:	b930      	cbnz	r0, 8002b54 <main+0x474>
		  if (TIM2->CCR4 > 750) {
 8002b46:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002b4a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002b4c:	429a      	cmp	r2, r3
			  TIM2->CCR4 = 750;
 8002b4e:	bf88      	it	hi
 8002b50:	642b      	strhi	r3, [r5, #64]	; 0x40
 8002b52:	e734      	b.n	80029be <main+0x2de>
	  else if ((rotate_speed>(target_speed_r*1.001))) {
 8002b54:	a30a      	add	r3, pc, #40	; (adr r3, 8002b80 <main+0x4a0>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	f7fd fcaf 	bl	80004c0 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4640      	mov	r0, r8
 8002b68:	4649      	mov	r1, r9
 8002b6a:	f7fd ff39 	bl	80009e0 <__aeabi_dcmpgt>
 8002b6e:	e763      	b.n	8002a38 <main+0x358>
 8002b70:	9999999a 	.word	0x9999999a
 8002b74:	3fb99999 	.word	0x3fb99999
 8002b78:	d916872b 	.word	0xd916872b
 8002b7c:	3feff7ce 	.word	0x3feff7ce
 8002b80:	9374bc6a 	.word	0x9374bc6a
 8002b84:	3ff00418 	.word	0x3ff00418
 8002b88:	3f8020c5 	.word	0x3f8020c5
 8002b8c:	40010c00 	.word	0x40010c00
 8002b90:	200000de 	.word	0x200000de
 8002b94:	2000017c 	.word	0x2000017c
 8002b98:	200000e8 	.word	0x200000e8
 8002b9c:	20000150 	.word	0x20000150
 8002ba0:	20000094 	.word	0x20000094
 8002ba4:	20000090 	.word	0x20000090
 8002ba8:	20000194 	.word	0x20000194
 8002bac:	42700000 	.word	0x42700000
 8002bb0:	200000f0 	.word	0x200000f0
 8002bb4:	20000030 	.word	0x20000030
 8002bb8:	200000d4 	.word	0x200000d4

08002bbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_MspInit+0x3c>)
{
 8002bbe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	f002 0201 	and.w	r2, r2, #1
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bd8:	61da      	str	r2, [r3, #28]
 8002bda:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002be6:	6853      	ldr	r3, [r2, #4]
 8002be8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	b002      	add	sp, #8
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000

08002c00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c00:	b510      	push	{r4, lr}
 8002c02:	4604      	mov	r4, r0
 8002c04:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c06:	2210      	movs	r2, #16
 8002c08:	2100      	movs	r1, #0
 8002c0a:	a802      	add	r0, sp, #8
 8002c0c:	f000 f95e 	bl	8002ecc <memset>
  if(hcan->Instance==CAN1)
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_CAN_MspInit+0x78>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d12d      	bne.n	8002c74 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c18:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002c1c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c24:	61da      	str	r2, [r3, #28]
 8002c26:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	4814      	ldr	r0, [pc, #80]	; (8002c7c <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c2a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002c2e:	9200      	str	r2, [sp, #0]
 8002c30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	619a      	str	r2, [r3, #24]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c48:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f7fe fd7b 	bl	8001744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c58:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	a902      	add	r1, sp, #8
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <HAL_CAN_MspInit+0x7c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	f7fe fd70 	bl	8001744 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2014      	movs	r0, #20
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f7fe fd15 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002c6e:	2014      	movs	r0, #20
 8002c70:	f7fe fd46 	bl	8001700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c74:	b006      	add	sp, #24
 8002c76:	bd10      	pop	{r4, pc}
 8002c78:	40006400 	.word	0x40006400
 8002c7c:	40010800 	.word	0x40010800

08002c80 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	2210      	movs	r2, #16
{
 8002c82:	b510      	push	{r4, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	2100      	movs	r1, #0
 8002c8a:	eb0d 0002 	add.w	r0, sp, r2
 8002c8e:	f000 f91d 	bl	8002ecc <memset>
  if(htim_base->Instance==TIM2)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	61da      	str	r2, [r3, #28]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cb0:	b008      	add	sp, #32
 8002cb2:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_TIM_Base_MspInit+0x80>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d1fa      	bne.n	8002cb0 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_TIM_Base_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cbe:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	4811      	ldr	r0, [pc, #68]	; (8002d08 <HAL_TIM_Base_MspInit+0x88>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cc2:	f042 0202 	orr.w	r2, r2, #2
 8002cc6:	61da      	str	r2, [r3, #28]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	f002 0202 	and.w	r2, r2, #2
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	f042 0208 	orr.w	r2, r2, #8
 8002cd8:	619a      	str	r2, [r3, #24]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	9303      	str	r3, [sp, #12]
 8002ce2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f7fe fd2c 	bl	8001744 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	201d      	movs	r0, #29
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	f7fe fcd1 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cf6:	201d      	movs	r0, #29
 8002cf8:	f7fe fd02 	bl	8001700 <HAL_NVIC_EnableIRQ>
}
 8002cfc:	e7d8      	b.n	8002cb0 <HAL_TIM_Base_MspInit+0x30>
 8002cfe:	bf00      	nop
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010c00 	.word	0x40010c00

08002d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4604      	mov	r4, r0
 8002d10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d12:	2210      	movs	r2, #16
 8002d14:	2100      	movs	r1, #0
 8002d16:	a802      	add	r0, sp, #8
 8002d18:	f000 f8d8 	bl	8002ecc <memset>
  if(htim->Instance==TIM2)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d113      	bne.n	8002d4c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d28:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	f042 0204 	orr.w	r2, r2, #4
 8002d30:	619a      	str	r2, [r3, #24]
 8002d32:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	4806      	ldr	r0, [pc, #24]	; (8002d50 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d3e:	2308      	movs	r3, #8
 8002d40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f7fe fcfc 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd10      	pop	{r4, pc}
 8002d50:	40010800 	.word	0x40010800

08002d54 <NMI_Handler>:
 8002d54:	4770      	bx	lr

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	e7fe      	b.n	8002d5a <BusFault_Handler>

08002d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d5c:	e7fe      	b.n	8002d5c <UsageFault_Handler>

08002d5e <SVC_Handler>:
 8002d5e:	4770      	bx	lr

08002d60 <DebugMon_Handler>:
 8002d60:	4770      	bx	lr

08002d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d62:	4770      	bx	lr

08002d64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f7fe b970 	b.w	8001048 <HAL_IncTick>

08002d68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &rotate_speed_can, &TxMailbox);
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <USB_LP_CAN1_RX0_IRQHandler+0x54>)
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <USB_LP_CAN1_RX0_IRQHandler+0x58>)
 8002d6e:	4915      	ldr	r1, [pc, #84]	; (8002dc4 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &control_data);
 8002d70:	4c15      	ldr	r4, [pc, #84]	; (8002dc8 <USB_LP_CAN1_RX0_IRQHandler+0x60>)
  HAL_CAN_AddTxMessage(&hcan1, &pHeader, &rotate_speed_can, &TxMailbox);
 8002d72:	4816      	ldr	r0, [pc, #88]	; (8002dcc <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8002d74:	f7fe fa9e 	bl	80012b4 <HAL_CAN_AddTxMessage>
  HAL_CAN_IRQHandler(&hcan1);
 8002d78:	4814      	ldr	r0, [pc, #80]	; (8002dcc <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8002d7a:	f7fe fb7d 	bl	8001478 <HAL_CAN_IRQHandler>
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &control_data);
 8002d7e:	4623      	mov	r3, r4
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <USB_LP_CAN1_RX0_IRQHandler+0x68>)
 8002d82:	2100      	movs	r1, #0
 8002d84:	4811      	ldr	r0, [pc, #68]	; (8002dcc <USB_LP_CAN1_RX0_IRQHandler+0x64>)
 8002d86:	f7fe fae3 	bl	8001350 <HAL_CAN_GetRxMessage>

  side = control_data[0];
 8002d8a:	7823      	ldrb	r3, [r4, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 8002d8e:	7013      	strb	r3, [r2, #0]
  //t_speed = control_data[1]/60.0f;
  if (side == 0) {
 8002d90:	b953      	cbnz	r3, 8002da8 <USB_LP_CAN1_RX0_IRQHandler+0x40>
	  t_speed = -(control_data[1]/60.0f);
 8002d92:	7860      	ldrb	r0, [r4, #1]
 8002d94:	f7fd fee8 	bl	8000b68 <__aeabi_i2f>
 8002d98:	490f      	ldr	r1, [pc, #60]	; (8002dd8 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8002d9a:	f7fd ffed 	bl	8000d78 <__aeabi_fdiv>
 8002d9e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  }
  else if (side == 1) {
	  t_speed = control_data[1]/60.0f;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8002da4:	6018      	str	r0, [r3, #0]
 8002da6:	bd10      	pop	{r4, pc}
  else if (side == 1) {
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d1fc      	bne.n	8002da6 <USB_LP_CAN1_RX0_IRQHandler+0x3e>
	  t_speed = control_data[1]/60.0f;
 8002dac:	7860      	ldrb	r0, [r4, #1]
 8002dae:	f7fd fedb 	bl	8000b68 <__aeabi_i2f>
 8002db2:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8002db4:	f7fd ffe0 	bl	8000d78 <__aeabi_fdiv>
 8002db8:	e7f3      	b.n	8002da2 <USB_LP_CAN1_RX0_IRQHandler+0x3a>
 8002dba:	bf00      	nop
 8002dbc:	200000e8 	.word	0x200000e8
 8002dc0:	200000de 	.word	0x200000de
 8002dc4:	2000017c 	.word	0x2000017c
 8002dc8:	200000df 	.word	0x200000df
 8002dcc:	20000150 	.word	0x20000150
 8002dd0:	20000134 	.word	0x20000134
 8002dd4:	20000061 	.word	0x20000061
 8002dd8:	42700000 	.word	0x42700000
 8002ddc:	20000028 	.word	0x20000028

08002de0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002de0:	4801      	ldr	r0, [pc, #4]	; (8002de8 <TIM3_IRQHandler+0x8>)
 8002de2:	f7ff b96b 	b.w	80020bc <HAL_TIM_IRQHandler>
 8002de6:	bf00      	nop
 8002de8:	20000094 	.word	0x20000094

08002dec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <SystemInit+0x40>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <SystemInit+0x44>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e08:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e10:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e18:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <SystemInit+0x48>)
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	f8ff0000 	.word	0xf8ff0000
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e3a:	e003      	b.n	8002e44 <LoopCopyDataInit>

08002e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e42:	3104      	adds	r1, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e4c:	d3f6      	bcc.n	8002e3c <CopyDataInit>
  ldr r2, =_sbss
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e50:	e002      	b.n	8002e58 <LoopFillZerobss>

08002e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e54:	f842 3b04 	str.w	r3, [r2], #4

08002e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e5c:	d3f9      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e5e:	f7ff ffc5 	bl	8002dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f000 f80f 	bl	8002e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e66:	f7ff fc3b 	bl	80026e0 <main>
  bx lr
 8002e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002e6c:	08002f1c 	.word	0x08002f1c
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002e78:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002e7c:	20000198 	.word	0x20000198

08002e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC1_2_IRQHandler>
	...

08002e84 <__libc_init_array>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	2500      	movs	r5, #0
 8002e88:	4e0c      	ldr	r6, [pc, #48]	; (8002ebc <__libc_init_array+0x38>)
 8002e8a:	4c0d      	ldr	r4, [pc, #52]	; (8002ec0 <__libc_init_array+0x3c>)
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	42a5      	cmp	r5, r4
 8002e92:	d109      	bne.n	8002ea8 <__libc_init_array+0x24>
 8002e94:	f000 f822 	bl	8002edc <_init>
 8002e98:	2500      	movs	r5, #0
 8002e9a:	4e0a      	ldr	r6, [pc, #40]	; (8002ec4 <__libc_init_array+0x40>)
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	; (8002ec8 <__libc_init_array+0x44>)
 8002e9e:	1ba4      	subs	r4, r4, r6
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	42a5      	cmp	r5, r4
 8002ea4:	d105      	bne.n	8002eb2 <__libc_init_array+0x2e>
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eac:	4798      	blx	r3
 8002eae:	3501      	adds	r5, #1
 8002eb0:	e7ee      	b.n	8002e90 <__libc_init_array+0xc>
 8002eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eb6:	4798      	blx	r3
 8002eb8:	3501      	adds	r5, #1
 8002eba:	e7f2      	b.n	8002ea2 <__libc_init_array+0x1e>
 8002ebc:	08002f14 	.word	0x08002f14
 8002ec0:	08002f14 	.word	0x08002f14
 8002ec4:	08002f14 	.word	0x08002f14
 8002ec8:	08002f18 	.word	0x08002f18

08002ecc <memset>:
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4402      	add	r2, r0
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d100      	bne.n	8002ed6 <memset+0xa>
 8002ed4:	4770      	bx	lr
 8002ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eda:	e7f9      	b.n	8002ed0 <memset+0x4>

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
