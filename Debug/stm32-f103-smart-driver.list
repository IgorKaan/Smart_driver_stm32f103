
stm32-f103-smart-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080031dc  080031dc  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000158  20000020  08003224  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000178  08003224  00020178  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b958  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bff  00000000  00000000  0002b9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000524a  00000000  00000000  0002d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c0  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b00  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00013631  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000066b0  00000000  00000000  000470e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006df74  00000000  00000000  0004d791  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000bb705  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a58  00000000  00000000  000bb780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	080031c4 	.word	0x080031c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	080031c4 	.word	0x080031c4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ab8:	f1a2 0201 	sub.w	r2, r2, #1
 8000abc:	d1ed      	bne.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_InitTick+0x3c>)
{
 8000fe8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fea:	7818      	ldrb	r0, [r3, #0]
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_InitTick+0x40>)
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffc:	f000 fb92 	bl	8001724 <HAL_SYSTICK_Config>
 8001000:	4604      	mov	r4, r0
 8001002:	b958      	cbnz	r0, 800101c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	2d0f      	cmp	r5, #15
 8001006:	d809      	bhi.n	800101c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	4602      	mov	r2, r0
 800100a:	4629      	mov	r1, r5
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	f000 fb46 	bl	80016a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4620      	mov	r0, r4
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_InitTick+0x44>)
 8001018:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800101a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
 800101e:	e7fc      	b.n	800101a <HAL_InitTick+0x36>
 8001020:	20000000 	.word	0x20000000
 8001024:	2000001c 	.word	0x2000001c
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x20>)
{
 800102e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	f000 fb1f 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffd0 	bl	8000fe4 <HAL_InitTick>
  HAL_MspInit();
 8001044:	f001 ff3a 	bl	8002ebc <HAL_MspInit>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd08      	pop	{r3, pc}
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x10>)
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_IncTick+0x14>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	440b      	add	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000068 	.word	0x20000068
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_GetTick+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000068 	.word	0x20000068

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fff6 	bl	8001068 <HAL_GetTick>
 800107c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001080:	bf1e      	ittt	ne
 8001082:	4b04      	ldrne	r3, [pc, #16]	; (8001094 <HAL_Delay+0x20>)
 8001084:	781b      	ldrbne	r3, [r3, #0]
 8001086:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	1b40      	subs	r0, r0, r5
 800108e:	42a0      	cmp	r0, r4
 8001090:	d3fa      	bcc.n	8001088 <HAL_Delay+0x14>
  {
  }
}
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	20000000 	.word	0x20000000

08001098 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001098:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800109a:	4604      	mov	r4, r0
 800109c:	2800      	cmp	r0, #0
 800109e:	d06e      	beq.n	800117e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010a0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80010a4:	b90b      	cbnz	r3, 80010aa <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a6:	f001 ff2b 	bl	8002f00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b4:	f7ff ffd8 	bl	8001068 <HAL_GetTick>
 80010b8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	0791      	lsls	r1, r2, #30
 80010c0:	d451      	bmi.n	8001166 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ca:	f7ff ffcd 	bl	8001068 <HAL_GetTick>
 80010ce:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	07d2      	lsls	r2, r2, #31
 80010d6:	d554      	bpl.n	8001182 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010da:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010dc:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	bf0c      	ite	eq
 80010e2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010e6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80010ea:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ec:	7e62      	ldrb	r2, [r4, #25]
 80010ee:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	bf0c      	ite	eq
 80010f4:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010f8:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80010fc:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010fe:	7ea2      	ldrb	r2, [r4, #26]
 8001100:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	bf0c      	ite	eq
 8001106:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800110a:	f022 0220 	bicne.w	r2, r2, #32
 800110e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001110:	7ee2      	ldrb	r2, [r4, #27]
 8001112:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	bf0c      	ite	eq
 8001118:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111c:	f042 0210 	orrne.w	r2, r2, #16
 8001120:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001122:	7f22      	ldrb	r2, [r4, #28]
 8001124:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	bf0c      	ite	eq
 800112a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800112e:	f022 0208 	bicne.w	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001134:	7f62      	ldrb	r2, [r4, #29]
 8001136:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	bf0c      	ite	eq
 800113c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001140:	f022 0204 	bicne.w	r2, r2, #4
 8001144:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001146:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800114a:	430a      	orrs	r2, r1
 800114c:	6921      	ldr	r1, [r4, #16]
 800114e:	430a      	orrs	r2, r1
 8001150:	6961      	ldr	r1, [r4, #20]
 8001152:	430a      	orrs	r2, r1
 8001154:	6861      	ldr	r1, [r4, #4]
 8001156:	3901      	subs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800115c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800115e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001160:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001164:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001166:	f7ff ff7f 	bl	8001068 <HAL_GetTick>
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	280a      	cmp	r0, #10
 800116e:	d9a4      	bls.n	80010ba <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001176:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001178:	2305      	movs	r3, #5
 800117a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e7f0      	b.n	8001164 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001182:	f7ff ff71 	bl	8001068 <HAL_GetTick>
 8001186:	1b40      	subs	r0, r0, r5
 8001188:	280a      	cmp	r0, #10
 800118a:	d9a1      	bls.n	80010d0 <HAL_CAN_Init+0x38>
 800118c:	e7f0      	b.n	8001170 <HAL_CAN_Init+0xd8>

0800118e <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800118e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001192:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001194:	3b01      	subs	r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d85f      	bhi.n	800125a <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800119a:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 800119c:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800119e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011aa:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011ac:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011b0:	f002 001f 	and.w	r0, r2, #31
 80011b4:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011b8:	43c4      	mvns	r4, r0
 80011ba:	4025      	ands	r5, r4
 80011bc:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011c0:	69cd      	ldr	r5, [r1, #28]
 80011c2:	bb85      	cbnz	r5, 8001226 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011c4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011c8:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011ca:	4025      	ands	r5, r4
 80011cc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011d0:	888d      	ldrh	r5, [r1, #4]
 80011d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011d6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011da:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011de:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011e0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011e2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011e6:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ea:	698a      	ldr	r2, [r1, #24]
 80011ec:	bb6a      	cbnz	r2, 800124a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f2:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011f8:	690a      	ldr	r2, [r1, #16]
 80011fa:	bb52      	cbnz	r2, 8001252 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001200:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001206:	6a0a      	ldr	r2, [r1, #32]
 8001208:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800120a:	bf02      	ittt	eq
 800120c:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8001210:	4310      	orreq	r0, r2
 8001212:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001216:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001218:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8001224:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001226:	2d01      	cmp	r5, #1
 8001228:	d1df      	bne.n	80011ea <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800122a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800122e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001230:	4305      	orrs	r5, r0
 8001232:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001236:	888d      	ldrh	r5, [r1, #4]
 8001238:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800123c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001240:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001244:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001246:	898d      	ldrh	r5, [r1, #12]
 8001248:	e7cb      	b.n	80011e2 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800124a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800124e:	4302      	orrs	r2, r0
 8001250:	e7d0      	b.n	80011f4 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001252:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001256:	4302      	orrs	r2, r0
 8001258:	e7d3      	b.n	8001202 <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800125a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
 8001264:	e7de      	b.n	8001224 <HAL_CAN_ConfigFilter+0x96>

08001266 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001266:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001268:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800126c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800126e:	2b01      	cmp	r3, #1
 8001270:	d11f      	bne.n	80012b2 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001272:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001274:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001276:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001282:	f7ff fef1 	bl	8001068 <HAL_GetTick>
 8001286:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	6858      	ldr	r0, [r3, #4]
 800128c:	f010 0001 	ands.w	r0, r0, #1
 8001290:	d101      	bne.n	8001296 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001292:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8001294:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001296:	f7ff fee7 	bl	8001068 <HAL_GetTick>
 800129a:	1b40      	subs	r0, r0, r5
 800129c:	280a      	cmp	r0, #10
 800129e:	d9f3      	bls.n	8001288 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80012a8:	2305      	movs	r3, #5
 80012aa:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80012ae:	2001      	movs	r0, #1
 80012b0:	e7f0      	b.n	8001294 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012b8:	6243      	str	r3, [r0, #36]	; 0x24
 80012ba:	e7f8      	b.n	80012ae <HAL_CAN_Start+0x48>

080012bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012be:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012c2:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c4:	3d01      	subs	r5, #1
 80012c6:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012c8:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80012ca:	d840      	bhi.n	800134e <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012cc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80012d0:	d039      	beq.n	8001346 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012d2:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012d6:	2c03      	cmp	r4, #3
 80012d8:	f04f 0501 	mov.w	r5, #1
 80012dc:	d105      	bne.n	80012ea <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e027      	b.n	800133a <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012ea:	40a5      	lsls	r5, r4
 80012ec:	601d      	str	r5, [r3, #0]
 80012ee:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 80012f2:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 80012f6:	bb08      	cbnz	r0, 800133c <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012f8:	6808      	ldr	r0, [r1, #0]
 80012fa:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001302:	6908      	ldr	r0, [r1, #16]
 8001304:	0124      	lsls	r4, r4, #4
 8001306:	1933      	adds	r3, r6, r4
 8001308:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 800130c:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 800130e:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001310:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001312:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001314:	bf02      	ittt	eq
 8001316:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800131a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800131e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001322:	6851      	ldr	r1, [r2, #4]
 8001324:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800132e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800133e:	4338      	orrs	r0, r7
 8001340:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001344:	e7db      	b.n	80012fe <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001346:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	e7ca      	b.n	80012e4 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	e7c6      	b.n	80012e4 <HAL_CAN_AddTxMessage+0x28>

08001356 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001356:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001358:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800135c:	3c01      	subs	r4, #1
 800135e:	2c01      	cmp	r4, #1
 8001360:	d86b      	bhi.n	800143a <HAL_CAN_GetRxMessage+0xe4>
 8001362:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001364:	b941      	cbnz	r1, 8001378 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001366:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001368:	07a4      	lsls	r4, r4, #30
 800136a:	d107      	bne.n	800137c <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800136c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001372:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001374:	2001      	movs	r0, #1
 8001376:	e055      	b.n	8001424 <HAL_CAN_GetRxMessage+0xce>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001378:	6934      	ldr	r4, [r6, #16]
 800137a:	e7f5      	b.n	8001368 <HAL_CAN_GetRxMessage+0x12>
 800137c:	010c      	lsls	r4, r1, #4
 800137e:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001380:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001384:	f007 0704 	and.w	r7, r7, #4
 8001388:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800138a:	2f00      	cmp	r7, #0
 800138c:	d14b      	bne.n	8001426 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800138e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001392:	0d7f      	lsrs	r7, r7, #21
 8001394:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001396:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800139a:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800139c:	f007 0702 	and.w	r7, r7, #2
 80013a0:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013a2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80013a6:	f007 070f 	and.w	r7, r7, #15
 80013aa:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013ac:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b0:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013b4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013ba:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013bc:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013be:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80013c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	4422      	add	r2, r4
 80013c8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013cc:	0a12      	lsrs	r2, r2, #8
 80013ce:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013d0:	6802      	ldr	r2, [r0, #0]
 80013d2:	4422      	add	r2, r4
 80013d4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013d8:	0c12      	lsrs	r2, r2, #16
 80013da:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	4422      	add	r2, r4
 80013e0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80013e4:	0e12      	lsrs	r2, r2, #24
 80013e6:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4422      	add	r2, r4
 80013ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013f0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013f2:	6802      	ldr	r2, [r0, #0]
 80013f4:	4422      	add	r2, r4
 80013f6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80013fa:	0a12      	lsrs	r2, r2, #8
 80013fc:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013fe:	6802      	ldr	r2, [r0, #0]
 8001400:	4422      	add	r2, r4
 8001402:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001406:	0c12      	lsrs	r2, r2, #16
 8001408:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800140a:	6802      	ldr	r2, [r0, #0]
 800140c:	4414      	add	r4, r2
 800140e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001412:	0e12      	lsrs	r2, r2, #24
 8001414:	71da      	strb	r2, [r3, #7]
 8001416:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001418:	b951      	cbnz	r1, 8001430 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8001422:	2000      	movs	r0, #0
  }
}
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001426:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800142a:	08ff      	lsrs	r7, r7, #3
 800142c:	6057      	str	r7, [r2, #4]
 800142e:	e7b2      	b.n	8001396 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	e7f3      	b.n	8001422 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	e797      	b.n	8001372 <HAL_CAN_GetRxMessage+0x1c>

08001442 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001442:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001446:	3b01      	subs	r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d805      	bhi.n	8001458 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800144c:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 800144e:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001450:	6953      	ldr	r3, [r2, #20]
 8001452:	4319      	orrs	r1, r3
 8001454:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001456:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800145a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001460:	2001      	movs	r0, #1
  }
}
 8001462:	4770      	bx	lr

08001464 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001464:	4770      	bx	lr

08001466 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_TxMailbox2CompleteCallback>:
 8001468:	4770      	bx	lr

0800146a <HAL_CAN_TxMailbox0AbortCallback>:
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_TxMailbox1AbortCallback>:
 800146c:	4770      	bx	lr

0800146e <HAL_CAN_TxMailbox2AbortCallback>:
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_RxFifo0FullCallback>:
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_RxFifo1FullCallback>:
 8001476:	4770      	bx	lr

08001478 <HAL_CAN_SleepCallback>:
 8001478:	4770      	bx	lr

0800147a <HAL_CAN_WakeUpFromRxMsgCallback>:
 800147a:	4770      	bx	lr

0800147c <HAL_CAN_ErrorCallback>:
 800147c:	4770      	bx	lr

0800147e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800147e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001482:	6803      	ldr	r3, [r0, #0]
{
 8001484:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001486:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001488:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800148c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001490:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001492:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001496:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800149a:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800149e:	d022      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014a0:	f017 0401 	ands.w	r4, r7, #1
 80014a4:	d007      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014a6:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014a8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014aa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ac:	f140 80a3 	bpl.w	80015f6 <HAL_CAN_IRQHandler+0x178>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014b0:	f7ff ffd8 	bl	8001464 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014b4:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b6:	05fb      	lsls	r3, r7, #23
 80014b8:	d509      	bpl.n	80014ce <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014c0:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014c2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014c4:	f140 80a5 	bpl.w	8001612 <HAL_CAN_IRQHandler+0x194>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014c8:	4628      	mov	r0, r5
 80014ca:	f7ff ffcc 	bl	8001466 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014ce:	03fb      	lsls	r3, r7, #15
 80014d0:	d509      	bpl.n	80014e6 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d6:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014d8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014da:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014dc:	f140 80a7 	bpl.w	800162e <HAL_CAN_IRQHandler+0x1b0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014e0:	4628      	mov	r0, r5
 80014e2:	f7ff ffc1 	bl	8001468 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014e6:	0733      	lsls	r3, r6, #28
 80014e8:	d507      	bpl.n	80014fa <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014ea:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014ee:	bf1f      	itttt	ne
 80014f0:	2210      	movne	r2, #16
 80014f2:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014f4:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014f8:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014fa:	0777      	lsls	r7, r6, #29
 80014fc:	d508      	bpl.n	8001510 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014fe:	f01b 0f08 	tst.w	fp, #8
 8001502:	d005      	beq.n	8001510 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001504:	2208      	movs	r2, #8
 8001506:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001508:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800150a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800150c:	f7ff ffb1 	bl	8001472 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001510:	07b0      	lsls	r0, r6, #30
 8001512:	d506      	bpl.n	8001522 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0799      	lsls	r1, r3, #30
 800151a:	d002      	beq.n	8001522 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800151c:	4628      	mov	r0, r5
 800151e:	f7ff ffa7 	bl	8001470 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001522:	0672      	lsls	r2, r6, #25
 8001524:	d507      	bpl.n	8001536 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001526:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800152a:	bf1f      	itttt	ne
 800152c:	2210      	movne	r2, #16
 800152e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001530:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001534:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001536:	06b3      	lsls	r3, r6, #26
 8001538:	d508      	bpl.n	800154c <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800153a:	f01a 0f08 	tst.w	sl, #8
 800153e:	d005      	beq.n	800154c <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001540:	2208      	movs	r2, #8
 8001542:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001544:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001546:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001548:	f7ff ff95 	bl	8001476 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800154c:	06f7      	lsls	r7, r6, #27
 800154e:	d506      	bpl.n	800155e <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	0798      	lsls	r0, r3, #30
 8001556:	d002      	beq.n	800155e <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff ff8b 	bl	8001474 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800155e:	03b1      	lsls	r1, r6, #14
 8001560:	d508      	bpl.n	8001574 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001562:	f019 0f10 	tst.w	r9, #16
 8001566:	d005      	beq.n	8001574 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001568:	2210      	movs	r2, #16
 800156a:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800156c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800156e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001570:	f7ff ff82 	bl	8001478 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001574:	03f2      	lsls	r2, r6, #15
 8001576:	d508      	bpl.n	800158a <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001578:	f019 0f08 	tst.w	r9, #8
 800157c:	d005      	beq.n	800158a <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800157e:	2208      	movs	r2, #8
 8001580:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001582:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001584:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001586:	f7ff ff78 	bl	800147a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800158a:	0433      	lsls	r3, r6, #16
 800158c:	d52a      	bpl.n	80015e4 <HAL_CAN_IRQHandler+0x166>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800158e:	f019 0f04 	tst.w	r9, #4
 8001592:	682a      	ldr	r2, [r5, #0]
 8001594:	d024      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x162>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001596:	05f7      	lsls	r7, r6, #23
 8001598:	d504      	bpl.n	80015a4 <HAL_CAN_IRQHandler+0x126>
 800159a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800159e:	bf18      	it	ne
 80015a0:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a4:	05b0      	lsls	r0, r6, #22
 80015a6:	d504      	bpl.n	80015b2 <HAL_CAN_IRQHandler+0x134>
 80015a8:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ac:	bf18      	it	ne
 80015ae:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b2:	0571      	lsls	r1, r6, #21
 80015b4:	d504      	bpl.n	80015c0 <HAL_CAN_IRQHandler+0x142>
 80015b6:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015ba:	bf18      	it	ne
 80015bc:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015c0:	0533      	lsls	r3, r6, #20
 80015c2:	d50d      	bpl.n	80015e0 <HAL_CAN_IRQHandler+0x162>
 80015c4:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80015c8:	d00a      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x162>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 80015ca:	2b30      	cmp	r3, #48	; 0x30
 80015cc:	d04c      	beq.n	8001668 <HAL_CAN_IRQHandler+0x1ea>
 80015ce:	d83c      	bhi.n	800164a <HAL_CAN_IRQHandler+0x1cc>
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d043      	beq.n	800165c <HAL_CAN_IRQHandler+0x1de>
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d044      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1e4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015d8:	6993      	ldr	r3, [r2, #24]
 80015da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015de:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015e0:	2304      	movs	r3, #4
 80015e2:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015e4:	b12c      	cbz	r4, 80015f2 <HAL_CAN_IRQHandler+0x174>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015e8:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80015ea:	431c      	orrs	r4, r3
 80015ec:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80015ee:	f7ff ff45 	bl	800147c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015f6:	077a      	lsls	r2, r7, #29
 80015f8:	d405      	bmi.n	8001606 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015fa:	f017 0408 	ands.w	r4, r7, #8
 80015fe:	d105      	bne.n	800160c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001600:	f7ff ff33 	bl	800146a <HAL_CAN_TxMailbox0AbortCallback>
 8001604:	e757      	b.n	80014b6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001606:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800160a:	e754      	b.n	80014b6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800160c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001610:	e751      	b.n	80014b6 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001612:	0579      	lsls	r1, r7, #21
 8001614:	d502      	bpl.n	800161c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001616:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800161a:	e758      	b.n	80014ce <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800161c:	053a      	lsls	r2, r7, #20
 800161e:	d502      	bpl.n	8001626 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001620:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001624:	e753      	b.n	80014ce <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001626:	4628      	mov	r0, r5
 8001628:	f7ff ff20 	bl	800146c <HAL_CAN_TxMailbox1AbortCallback>
 800162c:	e74f      	b.n	80014ce <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800162e:	0379      	lsls	r1, r7, #13
 8001630:	d502      	bpl.n	8001638 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001632:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001636:	e756      	b.n	80014e6 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001638:	033a      	lsls	r2, r7, #12
 800163a:	d502      	bpl.n	8001642 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800163c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8001640:	e751      	b.n	80014e6 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001642:	4628      	mov	r0, r5
 8001644:	f7ff ff13 	bl	800146e <HAL_CAN_TxMailbox2AbortCallback>
 8001648:	e74d      	b.n	80014e6 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800164a:	2b50      	cmp	r3, #80	; 0x50
 800164c:	d00f      	beq.n	800166e <HAL_CAN_IRQHandler+0x1f0>
 800164e:	2b60      	cmp	r3, #96	; 0x60
 8001650:	d010      	beq.n	8001674 <HAL_CAN_IRQHandler+0x1f6>
 8001652:	2b40      	cmp	r3, #64	; 0x40
 8001654:	d1c0      	bne.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001656:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 800165a:	e7bd      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 800165c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8001660:	e7ba      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001662:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001666:	e7b7      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001668:	f044 0420 	orr.w	r4, r4, #32
            break;
 800166c:	e7b4      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800166e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8001672:	e7b1      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001674:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8001678:	e7ae      	b.n	80015d8 <HAL_CAN_IRQHandler+0x15a>
	...

0800167c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800167e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	0c1b      	lsrs	r3, r3, #16
 800168e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001696:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001698:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b570      	push	{r4, r5, r6, lr}
 80016a4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ae:	f1c4 0507 	rsb	r5, r4, #7
 80016b2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	bf28      	it	cs
 80016ba:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016bc:	2b06      	cmp	r3, #6
 80016be:	bf98      	it	ls
 80016c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	bf88      	it	hi
 80016c8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ca:	ea21 0303 	bic.w	r3, r1, r3
 80016ce:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	fa06 f404 	lsl.w	r4, r6, r4
 80016d4:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80016d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016da:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	bfa8      	it	ge
 80016e0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80016e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	bfb8      	it	lt
 80016ea:	4a06      	ldrlt	r2, [pc, #24]	; (8001704 <HAL_NVIC_SetPriority+0x64>)
 80016ec:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	bfab      	itete	ge
 80016f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	e000ed14 	.word	0xe000ed14

08001708 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001708:	2800      	cmp	r0, #0
 800170a:	db08      	blt.n	800171e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170c:	2301      	movs	r3, #1
 800170e:	0942      	lsrs	r2, r0, #5
 8001710:	f000 001f 	and.w	r0, r0, #31
 8001714:	fa03 f000 	lsl.w	r0, r3, r0
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <HAL_NVIC_EnableIRQ+0x18>)
 800171a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	3801      	subs	r0, #1
 8001726:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800172a:	d20a      	bcs.n	8001742 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001754:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001756:	4626      	mov	r6, r4
 8001758:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001900 <HAL_GPIO_Init+0x1b0>
 800175e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001904 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	680a      	ldr	r2, [r1, #0]
 8001764:	fa32 f506 	lsrs.w	r5, r2, r6
 8001768:	d102      	bne.n	8001770 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800176a:	b003      	add	sp, #12
 800176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001770:	f04f 0801 	mov.w	r8, #1
 8001774:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001778:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800177c:	4590      	cmp	r8, r2
 800177e:	d17e      	bne.n	800187e <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001780:	684d      	ldr	r5, [r1, #4]
 8001782:	2d12      	cmp	r5, #18
 8001784:	f000 80a9 	beq.w	80018da <HAL_GPIO_Init+0x18a>
 8001788:	f200 8082 	bhi.w	8001890 <HAL_GPIO_Init+0x140>
 800178c:	2d02      	cmp	r5, #2
 800178e:	f000 80a1 	beq.w	80018d4 <HAL_GPIO_Init+0x184>
 8001792:	d876      	bhi.n	8001882 <HAL_GPIO_Init+0x132>
 8001794:	2d00      	cmp	r5, #0
 8001796:	f000 8088 	beq.w	80018aa <HAL_GPIO_Init+0x15a>
 800179a:	2d01      	cmp	r5, #1
 800179c:	f000 8098 	beq.w	80018d0 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	2aff      	cmp	r2, #255	; 0xff
 80017a6:	bf93      	iteet	ls
 80017a8:	4682      	movls	sl, r0
 80017aa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80017ae:	3d08      	subhi	r5, #8
 80017b0:	f8d0 b000 	ldrls.w	fp, [r0]
 80017b4:	bf92      	itee	ls
 80017b6:	00b5      	lslls	r5, r6, #2
 80017b8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80017bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017be:	fa09 f805 	lsl.w	r8, r9, r5
 80017c2:	ea2b 0808 	bic.w	r8, fp, r8
 80017c6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ca:	bf88      	it	hi
 80017cc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	ea48 0505 	orr.w	r5, r8, r5
 80017d4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80017dc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80017e0:	d04d      	beq.n	800187e <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4f44      	ldr	r7, [pc, #272]	; (80018f4 <HAL_GPIO_Init+0x1a4>)
 80017e4:	f026 0803 	bic.w	r8, r6, #3
 80017e8:	69bd      	ldr	r5, [r7, #24]
 80017ea:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80017ee:	f045 0501 	orr.w	r5, r5, #1
 80017f2:	61bd      	str	r5, [r7, #24]
 80017f4:	69bd      	ldr	r5, [r7, #24]
 80017f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80017fa:	f005 0501 	and.w	r5, r5, #1
 80017fe:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001800:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001806:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800180a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001812:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001816:	4d38      	ldr	r5, [pc, #224]	; (80018f8 <HAL_GPIO_Init+0x1a8>)
 8001818:	42a8      	cmp	r0, r5
 800181a:	d063      	beq.n	80018e4 <HAL_GPIO_Init+0x194>
 800181c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001820:	42a8      	cmp	r0, r5
 8001822:	d061      	beq.n	80018e8 <HAL_GPIO_Init+0x198>
 8001824:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001828:	42a8      	cmp	r0, r5
 800182a:	d05f      	beq.n	80018ec <HAL_GPIO_Init+0x19c>
 800182c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001830:	42a8      	cmp	r0, r5
 8001832:	bf0c      	ite	eq
 8001834:	2503      	moveq	r5, #3
 8001836:	2504      	movne	r5, #4
 8001838:	fa05 f50b 	lsl.w	r5, r5, fp
 800183c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001840:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001844:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001846:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800184a:	bf14      	ite	ne
 800184c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800184e:	4395      	biceq	r5, r2
 8001850:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001852:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001858:	bf14      	ite	ne
 800185a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185c:	4395      	biceq	r5, r2
 800185e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001860:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001862:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001866:	bf14      	ite	ne
 8001868:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186a:	4395      	biceq	r5, r2
 800186c:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800186e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001874:	bf14      	ite	ne
 8001876:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001878:	ea25 0202 	biceq.w	r2, r5, r2
 800187c:	60da      	str	r2, [r3, #12]
	position++;
 800187e:	3601      	adds	r6, #1
 8001880:	e76f      	b.n	8001762 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001882:	2d03      	cmp	r5, #3
 8001884:	d022      	beq.n	80018cc <HAL_GPIO_Init+0x17c>
 8001886:	2d11      	cmp	r5, #17
 8001888:	d18a      	bne.n	80017a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800188a:	68cc      	ldr	r4, [r1, #12]
 800188c:	3404      	adds	r4, #4
          break;
 800188e:	e787      	b.n	80017a0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001890:	4f1a      	ldr	r7, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x1ac>)
 8001892:	42bd      	cmp	r5, r7
 8001894:	d009      	beq.n	80018aa <HAL_GPIO_Init+0x15a>
 8001896:	d812      	bhi.n	80018be <HAL_GPIO_Init+0x16e>
 8001898:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001908 <HAL_GPIO_Init+0x1b8>
 800189c:	454d      	cmp	r5, r9
 800189e:	d004      	beq.n	80018aa <HAL_GPIO_Init+0x15a>
 80018a0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80018a4:	454d      	cmp	r5, r9
 80018a6:	f47f af7b 	bne.w	80017a0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018aa:	688c      	ldr	r4, [r1, #8]
 80018ac:	b1c4      	cbz	r4, 80018e0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ae:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80018b0:	bf0c      	ite	eq
 80018b2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80018b6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ba:	2408      	movs	r4, #8
 80018bc:	e770      	b.n	80017a0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80018be:	4565      	cmp	r5, ip
 80018c0:	d0f3      	beq.n	80018aa <HAL_GPIO_Init+0x15a>
 80018c2:	4575      	cmp	r5, lr
 80018c4:	d0f1      	beq.n	80018aa <HAL_GPIO_Init+0x15a>
 80018c6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800190c <HAL_GPIO_Init+0x1bc>
 80018ca:	e7eb      	b.n	80018a4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018cc:	2400      	movs	r4, #0
 80018ce:	e767      	b.n	80017a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d0:	68cc      	ldr	r4, [r1, #12]
          break;
 80018d2:	e765      	b.n	80017a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d4:	68cc      	ldr	r4, [r1, #12]
 80018d6:	3408      	adds	r4, #8
          break;
 80018d8:	e762      	b.n	80017a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018da:	68cc      	ldr	r4, [r1, #12]
 80018dc:	340c      	adds	r4, #12
          break;
 80018de:	e75f      	b.n	80017a0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e0:	2404      	movs	r4, #4
 80018e2:	e75d      	b.n	80017a0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e4:	2500      	movs	r5, #0
 80018e6:	e7a7      	b.n	8001838 <HAL_GPIO_Init+0xe8>
 80018e8:	2501      	movs	r5, #1
 80018ea:	e7a5      	b.n	8001838 <HAL_GPIO_Init+0xe8>
 80018ec:	2502      	movs	r5, #2
 80018ee:	e7a3      	b.n	8001838 <HAL_GPIO_Init+0xe8>
 80018f0:	40010400 	.word	0x40010400
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	10210000 	.word	0x10210000
 8001900:	10310000 	.word	0x10310000
 8001904:	10320000 	.word	0x10320000
 8001908:	10110000 	.word	0x10110000
 800190c:	10220000 	.word	0x10220000

08001910 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	b10a      	cbz	r2, 8001916 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001912:	6101      	str	r1, [r0, #16]
  }
}
 8001914:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001916:	0409      	lsls	r1, r1, #16
 8001918:	e7fb      	b.n	8001912 <HAL_GPIO_WritePin+0x2>
	...

0800191c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001920:	4605      	mov	r5, r0
 8001922:	b908      	cbnz	r0, 8001928 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
 8001926:	e03c      	b.n	80019a2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001928:	6803      	ldr	r3, [r0, #0]
 800192a:	07db      	lsls	r3, r3, #31
 800192c:	d410      	bmi.n	8001950 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	682b      	ldr	r3, [r5, #0]
 8001930:	079f      	lsls	r7, r3, #30
 8001932:	d45d      	bmi.n	80019f0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	0719      	lsls	r1, r3, #28
 8001938:	f100 8094 	bmi.w	8001a64 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	075a      	lsls	r2, r3, #29
 8001940:	f100 80be 	bmi.w	8001ac0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	69e8      	ldr	r0, [r5, #28]
 8001946:	2800      	cmp	r0, #0
 8001948:	f040 812c 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800194c:	2000      	movs	r0, #0
 800194e:	e028      	b.n	80019a2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	4c8f      	ldr	r4, [pc, #572]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001952:	6863      	ldr	r3, [r4, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d109      	bne.n	800197a <HAL_RCC_OscConfig+0x5e>
 8001966:	6863      	ldr	r3, [r4, #4]
 8001968:	03de      	lsls	r6, r3, #15
 800196a:	d506      	bpl.n	800197a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	039c      	lsls	r4, r3, #14
 8001970:	d5dd      	bpl.n	800192e <HAL_RCC_OscConfig+0x12>
 8001972:	686b      	ldr	r3, [r5, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1da      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
 8001978:	e7d4      	b.n	8001924 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	686b      	ldr	r3, [r5, #4]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x8c>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800198a:	f7ff fb6d 	bl	8001068 <HAL_GetTick>
 800198e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	0398      	lsls	r0, r3, #14
 8001994:	d4cb      	bmi.n	800192e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001996:	f7ff fb67 	bl	8001068 <HAL_GetTick>
 800199a:	1b80      	subs	r0, r0, r6
 800199c:	2864      	cmp	r0, #100	; 0x64
 800199e:	d9f7      	bls.n	8001990 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
}
 80019a2:	b002      	add	sp, #8
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	b99b      	cbnz	r3, 80019d2 <HAL_RCC_OscConfig+0xb6>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6023      	str	r3, [r4, #0]
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb55 	bl	8001068 <HAL_GetTick>
 80019be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	0399      	lsls	r1, r3, #14
 80019c4:	d5b3      	bpl.n	800192e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c6:	f7ff fb4f 	bl	8001068 <HAL_GetTick>
 80019ca:	1b80      	subs	r0, r0, r6
 80019cc:	2864      	cmp	r0, #100	; 0x64
 80019ce:	d9f7      	bls.n	80019c0 <HAL_RCC_OscConfig+0xa4>
 80019d0:	e7e6      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	d103      	bne.n	80019e2 <HAL_RCC_OscConfig+0xc6>
 80019da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019de:	6023      	str	r3, [r4, #0]
 80019e0:	e7cf      	b.n	8001982 <HAL_RCC_OscConfig+0x66>
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6023      	str	r3, [r4, #0]
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	e7cb      	b.n	8001988 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f0:	4c67      	ldr	r4, [pc, #412]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	f013 0f0c 	tst.w	r3, #12
 80019f8:	d007      	beq.n	8001a0a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	6863      	ldr	r3, [r4, #4]
 80019fc:	f003 030c 	and.w	r3, r3, #12
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d110      	bne.n	8001a26 <HAL_RCC_OscConfig+0x10a>
 8001a04:	6863      	ldr	r3, [r4, #4]
 8001a06:	03da      	lsls	r2, r3, #15
 8001a08:	d40d      	bmi.n	8001a26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	079b      	lsls	r3, r3, #30
 8001a0e:	d502      	bpl.n	8001a16 <HAL_RCC_OscConfig+0xfa>
 8001a10:	692b      	ldr	r3, [r5, #16]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d186      	bne.n	8001924 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	696a      	ldr	r2, [r5, #20]
 8001a1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	e786      	b.n	8001934 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a26:	692a      	ldr	r2, [r5, #16]
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x278>)
 8001a2a:	b16a      	cbz	r2, 8001a48 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb1a 	bl	8001068 <HAL_GetTick>
 8001a34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	079f      	lsls	r7, r3, #30
 8001a3a:	d4ec      	bmi.n	8001a16 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb14 	bl	8001068 <HAL_GetTick>
 8001a40:	1b80      	subs	r0, r0, r6
 8001a42:	2802      	cmp	r0, #2
 8001a44:	d9f7      	bls.n	8001a36 <HAL_RCC_OscConfig+0x11a>
 8001a46:	e7ab      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001a48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fb0d 	bl	8001068 <HAL_GetTick>
 8001a4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	0798      	lsls	r0, r3, #30
 8001a54:	f57f af6e 	bpl.w	8001934 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fb06 	bl	8001068 <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f6      	bls.n	8001a50 <HAL_RCC_OscConfig+0x134>
 8001a62:	e79d      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a64:	69aa      	ldr	r2, [r5, #24]
 8001a66:	4c4a      	ldr	r4, [pc, #296]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001a68:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	b1da      	cbz	r2, 8001aa4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a70:	f7ff fafa 	bl	8001068 <HAL_GetTick>
 8001a74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a78:	079b      	lsls	r3, r3, #30
 8001a7a:	d50d      	bpl.n	8001a98 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a80:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_OscConfig+0x280>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a88:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001a8a:	bf00      	nop
  }
  while (Delay --);
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_RCC_OscConfig+0x16e>
 8001a96:	e751      	b.n	800193c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fae6 	bl	8001068 <HAL_GetTick>
 8001a9c:	1b80      	subs	r0, r0, r6
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9e9      	bls.n	8001a76 <HAL_RCC_OscConfig+0x15a>
 8001aa2:	e77d      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fadf 	bl	8001068 <HAL_GetTick>
 8001aaa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aae:	079f      	lsls	r7, r3, #30
 8001ab0:	f57f af44 	bpl.w	800193c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fad8 	bl	8001068 <HAL_GetTick>
 8001ab8:	1b80      	subs	r0, r0, r6
 8001aba:	2802      	cmp	r0, #2
 8001abc:	d9f6      	bls.n	8001aac <HAL_RCC_OscConfig+0x190>
 8001abe:	e76f      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac0:	4c33      	ldr	r4, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	69e3      	ldr	r3, [r4, #28]
 8001ac4:	00d8      	lsls	r0, r3, #3
 8001ac6:	d424      	bmi.n	8001b12 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001ac8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	69e3      	ldr	r3, [r4, #28]
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61e3      	str	r3, [r4, #28]
 8001ad2:	69e3      	ldr	r3, [r4, #28]
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4e30      	ldr	r6, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x284>)
 8001ade:	6833      	ldr	r3, [r6, #0]
 8001ae0:	05d9      	lsls	r1, r3, #23
 8001ae2:	d518      	bpl.n	8001b16 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	68eb      	ldr	r3, [r5, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d126      	bne.n	8001b38 <HAL_RCC_OscConfig+0x21c>
 8001aea:	6a23      	ldr	r3, [r4, #32]
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001af2:	f7ff fab9 	bl	8001068 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001afa:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	6a23      	ldr	r3, [r4, #32]
 8001afe:	079b      	lsls	r3, r3, #30
 8001b00:	d53f      	bpl.n	8001b82 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001b02:	2f00      	cmp	r7, #0
 8001b04:	f43f af1e 	beq.w	8001944 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	69e3      	ldr	r3, [r4, #28]
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	61e3      	str	r3, [r4, #28]
 8001b10:	e718      	b.n	8001944 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2700      	movs	r7, #0
 8001b14:	e7e2      	b.n	8001adc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	6833      	ldr	r3, [r6, #0]
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b1e:	f7ff faa3 	bl	8001068 <HAL_GetTick>
 8001b22:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	6833      	ldr	r3, [r6, #0]
 8001b26:	05da      	lsls	r2, r3, #23
 8001b28:	d4dc      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff fa9d 	bl	8001068 <HAL_GetTick>
 8001b2e:	eba0 0008 	sub.w	r0, r0, r8
 8001b32:	2864      	cmp	r0, #100	; 0x64
 8001b34:	d9f6      	bls.n	8001b24 <HAL_RCC_OscConfig+0x208>
 8001b36:	e733      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	b9ab      	cbnz	r3, 8001b66 <HAL_RCC_OscConfig+0x24a>
 8001b3a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6223      	str	r3, [r4, #32]
 8001b46:	6a23      	ldr	r3, [r4, #32]
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fa8b 	bl	8001068 <HAL_GetTick>
 8001b52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	6a23      	ldr	r3, [r4, #32]
 8001b56:	0798      	lsls	r0, r3, #30
 8001b58:	d5d3      	bpl.n	8001b02 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fa85 	bl	8001068 <HAL_GetTick>
 8001b5e:	1b80      	subs	r0, r0, r6
 8001b60:	4540      	cmp	r0, r8
 8001b62:	d9f7      	bls.n	8001b54 <HAL_RCC_OscConfig+0x238>
 8001b64:	e71c      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	6a23      	ldr	r3, [r4, #32]
 8001b6a:	d103      	bne.n	8001b74 <HAL_RCC_OscConfig+0x258>
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	6223      	str	r3, [r4, #32]
 8001b72:	e7ba      	b.n	8001aea <HAL_RCC_OscConfig+0x1ce>
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6223      	str	r3, [r4, #32]
 8001b7a:	6a23      	ldr	r3, [r4, #32]
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	e7b6      	b.n	8001af0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fa71 	bl	8001068 <HAL_GetTick>
 8001b86:	eba0 0008 	sub.w	r0, r0, r8
 8001b8a:	42b0      	cmp	r0, r6
 8001b8c:	d9b6      	bls.n	8001afc <HAL_RCC_OscConfig+0x1e0>
 8001b8e:	e707      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	42420000 	.word	0x42420000
 8001b98:	42420480 	.word	0x42420480
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x334>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	461c      	mov	r4, r3
 8001baa:	f002 020c 	and.w	r2, r2, #12
 8001bae:	2a08      	cmp	r2, #8
 8001bb0:	d03d      	beq.n	8001c2e <HAL_RCC_OscConfig+0x312>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	4e27      	ldr	r6, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	d12b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fa54 	bl	8001068 <HAL_GetTick>
 8001bc0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	0199      	lsls	r1, r3, #6
 8001bc6:	d41f      	bmi.n	8001c08 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	6a2b      	ldr	r3, [r5, #32]
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	68a9      	ldr	r1, [r5, #8]
 8001bd4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001bde:	6862      	ldr	r2, [r4, #4]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001be6:	4313      	orrs	r3, r2
 8001be8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bea:	2301      	movs	r3, #1
 8001bec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bee:	f7ff fa3b 	bl	8001068 <HAL_GetTick>
 8001bf2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	019a      	lsls	r2, r3, #6
 8001bf8:	f53f aea8 	bmi.w	800194c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa34 	bl	8001068 <HAL_GetTick>
 8001c00:	1b40      	subs	r0, r0, r5
 8001c02:	2802      	cmp	r0, #2
 8001c04:	d9f6      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2d8>
 8001c06:	e6cb      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fa2e 	bl	8001068 <HAL_GetTick>
 8001c0c:	1bc0      	subs	r0, r0, r7
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9d7      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x2a6>
 8001c12:	e6c5      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001c14:	f7ff fa28 	bl	8001068 <HAL_GetTick>
 8001c18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	f57f ae95 	bpl.w	800194c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff fa21 	bl	8001068 <HAL_GetTick>
 8001c26:	1b40      	subs	r0, r0, r5
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	d9f6      	bls.n	8001c1a <HAL_RCC_OscConfig+0x2fe>
 8001c2c:	e6b8      	b.n	80019a0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	f43f aeb7 	beq.w	80019a2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001c34:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	6a2b      	ldr	r3, [r5, #32]
 8001c38:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f47f ae71 	bne.w	8001924 <HAL_RCC_OscConfig+0x8>
 8001c42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c44:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001c48:	1ac0      	subs	r0, r0, r3
 8001c4a:	bf18      	it	ne
 8001c4c:	2001      	movne	r0, #1
 8001c4e:	e6a8      	b.n	80019a2 <HAL_RCC_OscConfig+0x86>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	42420060 	.word	0x42420060

08001c58 <HAL_RCC_GetSysClockFreq>:
{
 8001c58:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001c5c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c5e:	ac02      	add	r4, sp, #8
 8001c60:	f103 0510 	add.w	r5, r3, #16
 8001c64:	4622      	mov	r2, r4
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	c203      	stmia	r2!, {r0, r1}
 8001c6e:	42ab      	cmp	r3, r5
 8001c70:	4614      	mov	r4, r2
 8001c72:	d1f7      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c74:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c7a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001c7e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	f003 020c 	and.w	r2, r3, #12
 8001c84:	2a04      	cmp	r2, #4
 8001c86:	d01b      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x68>
 8001c88:	2a08      	cmp	r2, #8
 8001c8a:	d002      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSI_VALUE;
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x74>)
}
 8001c8e:	b007      	add	sp, #28
 8001c90:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c92:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c96:	a806      	add	r0, sp, #24
 8001c98:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c9c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca0:	d50b      	bpl.n	8001cba <HAL_RCC_GetSysClockFreq+0x62>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca2:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca4:	480a      	ldr	r0, [pc, #40]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x78>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca6:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001caa:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cac:	aa06      	add	r2, sp, #24
 8001cae:	4413      	add	r3, r2
 8001cb0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb8:	e7e9      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001cbc:	4350      	muls	r0, r2
 8001cbe:	e7e6      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x78>)
  return sysclockfreq;
 8001cc2:	e7e4      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
 8001cc4:	080031dc 	.word	0x080031dc
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	007a1200 	.word	0x007a1200
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	003d0900 	.word	0x003d0900

08001cd8 <HAL_RCC_ClockConfig>:
{
 8001cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cdc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001cde:	4604      	mov	r4, r0
 8001ce0:	b910      	cbnz	r0, 8001ce8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ce2:	2001      	movs	r0, #1
}
 8001ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <HAL_RCC_ClockConfig+0x124>)
 8001cea:	6813      	ldr	r3, [r2, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d328      	bcc.n	8001d46 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	6821      	ldr	r1, [r4, #0]
 8001cf6:	078e      	lsls	r6, r1, #30
 8001cf8:	d430      	bmi.n	8001d5c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	07ca      	lsls	r2, r1, #31
 8001cfc:	d443      	bmi.n	8001d86 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_RCC_ClockConfig+0x124>)
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	d865      	bhi.n	8001dd6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	6822      	ldr	r2, [r4, #0]
 8001d0c:	4d3c      	ldr	r5, [pc, #240]	; (8001e00 <HAL_RCC_ClockConfig+0x128>)
 8001d0e:	f012 0f04 	tst.w	r2, #4
 8001d12:	d16c      	bne.n	8001dee <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	0713      	lsls	r3, r2, #28
 8001d16:	d506      	bpl.n	8001d26 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d18:	686b      	ldr	r3, [r5, #4]
 8001d1a:	6922      	ldr	r2, [r4, #16]
 8001d1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d24:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d26:	f7ff ff97 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001d2a:	686b      	ldr	r3, [r5, #4]
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <HAL_RCC_ClockConfig+0x12c>)
 8001d2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	40d8      	lsrs	r0, r3
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_RCC_ClockConfig+0x130>)
 8001d38:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_ClockConfig+0x134>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f7ff f951 	bl	8000fe4 <HAL_InitTick>
  return HAL_OK;
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7ce      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f023 0307 	bic.w	r3, r3, #7
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	428b      	cmp	r3, r1
 8001d58:	d1c3      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xa>
 8001d5a:	e7cb      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1c>
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d62:	bf1e      	ittt	ne
 8001d64:	685a      	ldrne	r2, [r3, #4]
 8001d66:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001d6a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6e:	bf42      	ittt	mi
 8001d70:	685a      	ldrmi	r2, [r3, #4]
 8001d72:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001d76:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68a0      	ldr	r0, [r4, #8]
 8001d7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d80:	4302      	orrs	r2, r0
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	e7b9      	b.n	8001cfa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	6862      	ldr	r2, [r4, #4]
 8001d88:	4e1d      	ldr	r6, [pc, #116]	; (8001e00 <HAL_RCC_ClockConfig+0x128>)
 8001d8a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	d11a      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	d0a5      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001da4:	f7ff f960 	bl	8001068 <HAL_GetTick>
 8001da8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	6873      	ldr	r3, [r6, #4]
 8001dac:	6862      	ldr	r2, [r4, #4]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001db6:	d0a2      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff f956 	bl	8001068 <HAL_GetTick>
 8001dbc:	1bc0      	subs	r0, r0, r7
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d9f3      	bls.n	8001daa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	e78e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	2a02      	cmp	r2, #2
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dce:	e7e1      	b.n	8001d94 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	f013 0f02 	tst.w	r3, #2
 8001dd4:	e7de      	b.n	8001d94 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	f023 0307 	bic.w	r3, r3, #7
 8001ddc:	432b      	orrs	r3, r5
 8001dde:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	42ab      	cmp	r3, r5
 8001de8:	f47f af7b 	bne.w	8001ce2 <HAL_RCC_ClockConfig+0xa>
 8001dec:	e78d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dee:	686b      	ldr	r3, [r5, #4]
 8001df0:	68e1      	ldr	r1, [r4, #12]
 8001df2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001df6:	430b      	orrs	r3, r1
 8001df8:	606b      	str	r3, [r5, #4]
 8001dfa:	e78b      	b.n	8001d14 <HAL_RCC_ClockConfig+0x3c>
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080031ec 	.word	0x080031ec
 8001e08:	2000001c 	.word	0x2000001c
 8001e0c:	20000004 	.word	0x20000004

08001e10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e10:	6a03      	ldr	r3, [r0, #32]
{
 8001e12:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e1e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e2e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e30:	4d0a      	ldr	r5, [pc, #40]	; (8001e5c <TIM_OC1_SetConfig+0x4c>)
 8001e32:	42a8      	cmp	r0, r5
 8001e34:	d10b      	bne.n	8001e4e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e38:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e3c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e3e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e42:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001e46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e4c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e50:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e52:	684a      	ldr	r2, [r1, #4]
 8001e54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e56:	6203      	str	r3, [r0, #32]
}
 8001e58:	bd70      	pop	{r4, r5, r6, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e60:	6a03      	ldr	r3, [r0, #32]
{
 8001e62:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e82:	4d0b      	ldr	r5, [pc, #44]	; (8001eb0 <TIM_OC3_SetConfig+0x50>)
 8001e84:	42a8      	cmp	r0, r5
 8001e86:	d10d      	bne.n	8001ea4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e92:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e96:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001e9a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ea0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ea6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ea8:	684a      	ldr	r2, [r1, #4]
 8001eaa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eac:	6203      	str	r3, [r0, #32]
}
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb4:	6a03      	ldr	r3, [r0, #32]
{
 8001eb6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ebc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ebe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ec2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ece:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed8:	4d06      	ldr	r5, [pc, #24]	; (8001ef4 <TIM_OC4_SetConfig+0x40>)
 8001eda:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001edc:	bf02      	ittt	eq
 8001ede:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ee0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ee4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ee8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eec:	684a      	ldr	r2, [r1, #4]
 8001eee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ef0:	6203      	str	r3, [r0, #32]
}
 8001ef2:	bd30      	pop	{r4, r5, pc}
 8001ef4:	40012c00 	.word	0x40012c00

08001ef8 <HAL_TIM_PWM_MspInit>:
 8001ef8:	4770      	bx	lr

08001efa <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8001efa:	290c      	cmp	r1, #12
 8001efc:	d814      	bhi.n	8001f28 <HAL_TIM_ReadCapturedValue+0x2e>
 8001efe:	e8df f001 	tbb	[pc, r1]
 8001f02:	1307      	.short	0x1307
 8001f04:	130a1313 	.word	0x130a1313
 8001f08:	130d1313 	.word	0x130d1313
 8001f0c:	1313      	.short	0x1313
 8001f0e:	10          	.byte	0x10
 8001f0f:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8001f14:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8001f16:	6803      	ldr	r3, [r0, #0]
 8001f18:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8001f1a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8001f1c:	6803      	ldr	r3, [r0, #0]
 8001f1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8001f20:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8001f26:	4770      	bx	lr
  uint32_t tmpreg = 0U;
 8001f28:	2000      	movs	r0, #0
}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PeriodElapsedCallback>:
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_OC_DelayElapsedCallback>:
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_TriggerCallback>:
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f34:	6803      	ldr	r3, [r0, #0]
{
 8001f36:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f38:	691a      	ldr	r2, [r3, #16]
{
 8001f3a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3c:	0791      	lsls	r1, r2, #30
 8001f3e:	d50e      	bpl.n	8001f5e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	0792      	lsls	r2, r2, #30
 8001f44:	d50b      	bpl.n	8001f5e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f46:	f06f 0202 	mvn.w	r2, #2
 8001f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f50:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f52:	079b      	lsls	r3, r3, #30
 8001f54:	d077      	beq.n	8002046 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	f000 fb93 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	0750      	lsls	r0, r2, #29
 8001f64:	d510      	bpl.n	8001f88 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	0751      	lsls	r1, r2, #29
 8001f6a:	d50d      	bpl.n	8001f88 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f76:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7e:	d068      	beq.n	8002052 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f80:	f000 fb7e 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f84:	2300      	movs	r3, #0
 8001f86:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	0712      	lsls	r2, r2, #28
 8001f8e:	d50f      	bpl.n	8001fb0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	0710      	lsls	r0, r2, #28
 8001f94:	d50c      	bpl.n	8001fb0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f96:	f06f 0208 	mvn.w	r2, #8
 8001f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f9e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa6:	d05a      	beq.n	800205e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa8:	f000 fb6a 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fac:	2300      	movs	r3, #0
 8001fae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	06d2      	lsls	r2, r2, #27
 8001fb6:	d510      	bpl.n	8001fda <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	06d0      	lsls	r0, r2, #27
 8001fbc:	d50d      	bpl.n	8001fda <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fbe:	f06f 0210 	mvn.w	r2, #16
 8001fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fca:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd0:	d04b      	beq.n	800206a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	f000 fb55 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	07d1      	lsls	r1, r2, #31
 8001fe0:	d508      	bpl.n	8001ff4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	07d2      	lsls	r2, r2, #31
 8001fe6:	d505      	bpl.n	8001ff4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff0:	f7ff ff9c 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	0610      	lsls	r0, r2, #24
 8001ffa:	d508      	bpl.n	800200e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	0611      	lsls	r1, r2, #24
 8002000:	d505      	bpl.n	800200e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002002:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002006:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002008:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800200a:	f000 fb0f 	bl	800262c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	0652      	lsls	r2, r2, #25
 8002014:	d508      	bpl.n	8002028 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	0650      	lsls	r0, r2, #25
 800201a:	d505      	bpl.n	8002028 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800201c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002020:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002022:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002024:	f7ff ff85 	bl	8001f32 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	0691      	lsls	r1, r2, #26
 800202e:	d522      	bpl.n	8002076 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	0692      	lsls	r2, r2, #26
 8002034:	d51f      	bpl.n	8002076 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002036:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800203a:	4620      	mov	r0, r4
}
 800203c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002040:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002042:	f000 baf2 	b.w	800262a <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	f7ff ff72 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204a:	4620      	mov	r0, r4
 800204c:	f7ff ff70 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8002050:	e783      	b.n	8001f5a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	f7ff ff6c 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002056:	4620      	mov	r0, r4
 8002058:	f7ff ff6a 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
 800205c:	e792      	b.n	8001f84 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	f7ff ff66 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff ff64 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8002068:	e7a0      	b.n	8001fac <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	f7ff ff60 	bl	8001f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff ff5e 	bl	8001f30 <HAL_TIM_PWM_PulseFinishedCallback>
 8002074:	e7af      	b.n	8001fd6 <HAL_TIM_IRQHandler+0xa2>
}
 8002076:	bd10      	pop	{r4, pc}

08002078 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800207a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800207c:	4290      	cmp	r0, r2
 800207e:	d00a      	beq.n	8002096 <TIM_Base_SetConfig+0x1e>
 8002080:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002084:	d007      	beq.n	8002096 <TIM_Base_SetConfig+0x1e>
 8002086:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800208a:	4290      	cmp	r0, r2
 800208c:	d003      	beq.n	8002096 <TIM_Base_SetConfig+0x1e>
 800208e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002092:	4290      	cmp	r0, r2
 8002094:	d115      	bne.n	80020c2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002096:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800209c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <TIM_Base_SetConfig+0x6c>)
 80020a0:	4290      	cmp	r0, r2
 80020a2:	d00a      	beq.n	80020ba <TIM_Base_SetConfig+0x42>
 80020a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020a8:	d007      	beq.n	80020ba <TIM_Base_SetConfig+0x42>
 80020aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0x42>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d103      	bne.n	80020c2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80020bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c2:	694a      	ldr	r2, [r1, #20]
 80020c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020cc:	688b      	ldr	r3, [r1, #8]
 80020ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020d0:	680b      	ldr	r3, [r1, #0]
 80020d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <TIM_Base_SetConfig+0x6c>)
 80020d6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80020d8:	bf04      	itt	eq
 80020da:	690b      	ldreq	r3, [r1, #16]
 80020dc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80020de:	2301      	movs	r3, #1
 80020e0:	6143      	str	r3, [r0, #20]
}
 80020e2:	4770      	bx	lr
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <HAL_TIM_Base_Init>:
{
 80020e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020ea:	4604      	mov	r4, r0
 80020ec:	b1a0      	cbz	r0, 8002118 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020f6:	b91b      	cbnz	r3, 8002100 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020fc:	f000 ff40 	bl	8002f80 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002102:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	1d21      	adds	r1, r4, #4
 800210a:	f7ff ffb5 	bl	8002078 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800210e:	2301      	movs	r3, #1
  return HAL_OK;
 8002110:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002116:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
 800211a:	e7fc      	b.n	8002116 <HAL_TIM_Base_Init+0x2e>

0800211c <HAL_TIM_PWM_Init>:
{
 800211c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800211e:	4604      	mov	r4, r0
 8002120:	b1a0      	cbz	r0, 800214c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002126:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800212a:	b91b      	cbnz	r3, 8002134 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800212c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002130:	f7ff fee2 	bl	8001ef8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002136:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	1d21      	adds	r1, r4, #4
 800213e:	f7ff ff9b 	bl	8002078 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002142:	2301      	movs	r3, #1
  return HAL_OK;
 8002144:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002146:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800214a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800214c:	2001      	movs	r0, #1
 800214e:	e7fc      	b.n	800214a <HAL_TIM_PWM_Init+0x2e>

08002150 <HAL_TIM_IC_Init>:
{
 8002150:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002152:	4604      	mov	r4, r0
 8002154:	b1a0      	cbz	r0, 8002180 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800215a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800215e:	b91b      	cbnz	r3, 8002168 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002160:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002164:	f000 ff1e 	bl	8002fa4 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002170:	1d21      	adds	r1, r4, #4
 8002172:	f7ff ff81 	bl	8002078 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002176:	2301      	movs	r3, #1
  return HAL_OK;
 8002178:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800217a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800217e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e7fc      	b.n	800217e <HAL_TIM_IC_Init+0x2e>

08002184 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002184:	6a03      	ldr	r3, [r0, #32]
{
 8002186:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002188:	f023 0310 	bic.w	r3, r3, #16
 800218c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800218e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002190:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002192:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002194:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002196:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800219a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800219e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80021a0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021a8:	4d0b      	ldr	r5, [pc, #44]	; (80021d8 <TIM_OC2_SetConfig+0x54>)
 80021aa:	42a8      	cmp	r0, r5
 80021ac:	d10d      	bne.n	80021ca <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80021b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021b8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021bc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80021c0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80021c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021c6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80021ca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021cc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021ce:	684a      	ldr	r2, [r1, #4]
 80021d0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80021d2:	6203      	str	r3, [r0, #32]
}
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00

080021dc <HAL_TIM_PWM_ConfigChannel>:
{
 80021dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80021de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f04f 0002 	mov.w	r0, #2
 80021ea:	d025      	beq.n	8002238 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80021ec:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80021ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80021f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80021f6:	2a0c      	cmp	r2, #12
 80021f8:	d818      	bhi.n	800222c <HAL_TIM_PWM_ConfigChannel+0x50>
 80021fa:	e8df f002 	tbb	[pc, r2]
 80021fe:	1707      	.short	0x1707
 8002200:	171e1717 	.word	0x171e1717
 8002204:	172f1717 	.word	0x172f1717
 8002208:	1717      	.short	0x1717
 800220a:	40          	.byte	0x40
 800220b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800220c:	6820      	ldr	r0, [r4, #0]
 800220e:	f7ff fdff 	bl	8001e10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002212:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002214:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	f042 0208 	orr.w	r2, r2, #8
 800221c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	f022 0204 	bic.w	r2, r2, #4
 8002224:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800222a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800222c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800222e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002230:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002234:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002238:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f7ff ffa2 	bl	8002184 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002240:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002242:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800225a:	e7e6      	b.n	800222a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	f7ff fdff 	bl	8001e60 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002262:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002264:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	f042 0208 	orr.w	r2, r2, #8
 800226c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	f022 0204 	bic.w	r2, r2, #4
 8002274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800227a:	61da      	str	r2, [r3, #28]
      break;
 800227c:	e7d6      	b.n	800222c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	f7ff fe18 	bl	8001eb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002284:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002286:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800229e:	e7ec      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0x9e>

080022a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022a2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022a4:	4e12      	ldr	r6, [pc, #72]	; (80022f0 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022a6:	f024 0401 	bic.w	r4, r4, #1
 80022aa:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022ac:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80022ae:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80022b0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022b2:	d019      	beq.n	80022e8 <TIM_TI1_SetConfig+0x48>
 80022b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022b8:	d016      	beq.n	80022e8 <TIM_TI1_SetConfig+0x48>
 80022ba:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80022be:	42b0      	cmp	r0, r6
 80022c0:	d012      	beq.n	80022e8 <TIM_TI1_SetConfig+0x48>
 80022c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022c6:	42b0      	cmp	r0, r6
 80022c8:	d00e      	beq.n	80022e8 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80022ca:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80022d6:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80022d8:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022dc:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80022e0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022e2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022e4:	6201      	str	r1, [r0, #32]
}
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80022e8:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80022ec:	4322      	orrs	r2, r4
 80022ee:	e7ee      	b.n	80022ce <TIM_TI1_SetConfig+0x2e>
 80022f0:	40012c00 	.word	0x40012c00

080022f4 <HAL_TIM_IC_ConfigChannel>:
{
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80022f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022fa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022fc:	2b01      	cmp	r3, #1
{
 80022fe:	460d      	mov	r5, r1
 8002300:	4617      	mov	r7, r2
 8002302:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002306:	d019      	beq.n	800233c <HAL_TIM_IC_ConfigChannel+0x48>
 8002308:	c906      	ldmia	r1, {r1, r2}
 800230a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002314:	6820      	ldr	r0, [r4, #0]
 8002316:	68eb      	ldr	r3, [r5, #12]
  if (Channel == TIM_CHANNEL_1)
 8002318:	b98f      	cbnz	r7, 800233e <HAL_TIM_IC_ConfigChannel+0x4a>
    TIM_TI1_SetConfig(htim->Instance,
 800231a:	f7ff ffc1 	bl	80022a0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800231e:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002320:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	f022 020c 	bic.w	r2, r2, #12
 8002328:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	430a      	orrs	r2, r1
 800232e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002330:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002332:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002334:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002338:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800233e:	2f04      	cmp	r7, #4
 8002340:	68ae      	ldr	r6, [r5, #8]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002342:	6a05      	ldr	r5, [r0, #32]
  else if (Channel == TIM_CHANNEL_2)
 8002344:	d11e      	bne.n	8002384 <HAL_TIM_IC_ConfigChannel+0x90>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002346:	f025 0510 	bic.w	r5, r5, #16
 800234a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234c:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800234e:	031b      	lsls	r3, r3, #12
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002350:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccer = TIMx->CCER;
 8002354:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002356:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800235a:	b29b      	uxth	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800235c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002360:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002362:	431a      	orrs	r2, r3
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002364:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002368:	f027 03a0 	bic.w	r3, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800236c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800236e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002370:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002372:	6983      	ldr	r3, [r0, #24]
 8002374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002378:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800237a:	6983      	ldr	r3, [r0, #24]
 800237c:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8002380:	6186      	str	r6, [r0, #24]
 8002382:	e7d5      	b.n	8002330 <HAL_TIM_IC_ConfigChannel+0x3c>
  else if (Channel == TIM_CHANNEL_3)
 8002384:	2f08      	cmp	r7, #8
 8002386:	d11c      	bne.n	80023c2 <HAL_TIM_IC_ConfigChannel+0xce>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002388:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800238c:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800238e:	69c5      	ldr	r5, [r0, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002390:	011b      	lsls	r3, r3, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002392:	f025 0503 	bic.w	r5, r5, #3
  tmpccer = TIMx->CCER;
 8002396:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002398:	432a      	orrs	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800239a:	b2db      	uxtb	r3, r3
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800239c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80023a0:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80023a2:	431a      	orrs	r2, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80023a4:	f401 7100 	and.w	r1, r1, #512	; 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 80023a8:	f427 7300 	bic.w	r3, r7, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80023ac:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023ae:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80023b0:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023b2:	69c3      	ldr	r3, [r0, #28]
 80023b4:	f023 030c 	bic.w	r3, r3, #12
 80023b8:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023ba:	69c3      	ldr	r3, [r0, #28]
 80023bc:	431e      	orrs	r6, r3
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80023be:	61c6      	str	r6, [r0, #28]
 80023c0:	e7b6      	b.n	8002330 <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80023c6:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023c8:	69c5      	ldr	r5, [r0, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8U);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80023ca:	031b      	lsls	r3, r3, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80023cc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccer = TIMx->CCER;
 80023d0:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80023d2:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80023d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80023da:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80023dc:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80023de:	4313      	orrs	r3, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80023e0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~(TIM_CCER_CC4P);
 80023e4:	f427 5200 	bic.w	r2, r7, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80023e8:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023ea:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80023ec:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80023ee:	69c3      	ldr	r3, [r0, #28]
 80023f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023f4:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80023f6:	69c3      	ldr	r3, [r0, #28]
 80023f8:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 80023fc:	e7df      	b.n	80023be <HAL_TIM_IC_ConfigChannel+0xca>

080023fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023fe:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002400:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002402:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002404:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002408:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800240c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240e:	6083      	str	r3, [r0, #8]
}
 8002410:	bd10      	pop	{r4, pc}

08002412 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002412:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002416:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002418:	2b01      	cmp	r3, #1
{
 800241a:	4604      	mov	r4, r0
 800241c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002420:	d019      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x44>
 8002422:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002428:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800242a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800242e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002434:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002438:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800243a:	680b      	ldr	r3, [r1, #0]
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d065      	beq.n	800250c <HAL_TIM_ConfigClockSource+0xfa>
 8002440:	d815      	bhi.n	800246e <HAL_TIM_ConfigClockSource+0x5c>
 8002442:	2b10      	cmp	r3, #16
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x4e>
 8002446:	d807      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x46>
 8002448:	b153      	cbz	r3, 8002460 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800244a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800244c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800244e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002452:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002456:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002458:	2b20      	cmp	r3, #32
 800245a:	d001      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x4e>
 800245c:	2b30      	cmp	r3, #48	; 0x30
 800245e:	d1f4      	bne.n	800244a <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002460:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002462:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800246a:	4313      	orrs	r3, r2
 800246c:	e01a      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800246e:	2b60      	cmp	r3, #96	; 0x60
 8002470:	d034      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0xca>
 8002472:	d819      	bhi.n	80024a8 <HAL_TIM_ConfigClockSource+0x96>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d1e8      	bne.n	800244a <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002478:	684a      	ldr	r2, [r1, #4]
 800247a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800247c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800247e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002480:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002484:	f025 0501 	bic.w	r5, r5, #1
 8002488:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800248c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002492:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002496:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002498:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800249a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024a0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80024a4:	6083      	str	r3, [r0, #8]
 80024a6:	e7d0      	b.n	800244a <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d00c      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0xb4>
 80024ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b0:	d1cb      	bne.n	800244a <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	68cb      	ldr	r3, [r1, #12]
 80024b4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80024b8:	f7ff ffa1 	bl	80023fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	6822      	ldr	r2, [r4, #0]
 80024be:	6893      	ldr	r3, [r2, #8]
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	e008      	b.n	80024d8 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80024c6:	68cb      	ldr	r3, [r1, #12]
 80024c8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80024cc:	f7ff ff97 	bl	80023fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d8:	6093      	str	r3, [r2, #8]
      break;
 80024da:	e7b6      	b.n	800244a <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024dc:	684d      	ldr	r5, [r1, #4]
 80024de:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e0:	6a01      	ldr	r1, [r0, #32]
 80024e2:	f021 0110 	bic.w	r1, r1, #16
 80024e6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80024ea:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024ec:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80024fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024fe:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002500:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002506:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800250a:	e7cb      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250c:	684a      	ldr	r2, [r1, #4]
 800250e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002510:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002512:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002514:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002518:	f025 0501 	bic.w	r5, r5, #1
 800251c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800251e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002520:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002526:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800252a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800252c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800252e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002534:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002538:	e7b4      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x92>

0800253a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800253a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800253c:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800253e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002540:	f001 011f 	and.w	r1, r1, #31
 8002544:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002546:	ea23 0304 	bic.w	r3, r3, r4
 800254a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800254c:	6a03      	ldr	r3, [r0, #32]
 800254e:	408a      	lsls	r2, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	6202      	str	r2, [r0, #32]
}
 8002554:	bd10      	pop	{r4, pc}
	...

08002558 <HAL_TIM_OC_Start>:
{
 8002558:	b510      	push	{r4, lr}
 800255a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800255c:	2201      	movs	r2, #1
 800255e:	6800      	ldr	r0, [r0, #0]
 8002560:	f7ff ffeb 	bl	800253a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_TIM_OC_Start+0x34>)
}
 8002568:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800256a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800256c:	bf02      	ittt	eq
 800256e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002570:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002574:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800257e:	bf1e      	ittt	ne
 8002580:	681a      	ldrne	r2, [r3, #0]
 8002582:	f042 0201 	orrne.w	r2, r2, #1
 8002586:	601a      	strne	r2, [r3, #0]
}
 8002588:	bd10      	pop	{r4, pc}
 800258a:	bf00      	nop
 800258c:	40012c00 	.word	0x40012c00

08002590 <HAL_TIM_PWM_Start>:
 8002590:	f7ff bfe2 	b.w	8002558 <HAL_TIM_OC_Start>

08002594 <HAL_TIM_IC_Start_IT>:
{
 8002594:	b510      	push	{r4, lr}
 8002596:	4604      	mov	r4, r0
 8002598:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 800259a:	290c      	cmp	r1, #12
 800259c:	d80c      	bhi.n	80025b8 <HAL_TIM_IC_Start_IT+0x24>
 800259e:	e8df f001 	tbb	[pc, r1]
 80025a2:	0b07      	.short	0x0b07
 80025a4:	0b1a0b0b 	.word	0x0b1a0b0b
 80025a8:	0b1e0b0b 	.word	0x0b1e0b0b
 80025ac:	0b0b      	.short	0x0b0b
 80025ae:	22          	.byte	0x22
 80025af:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025b0:	68c3      	ldr	r3, [r0, #12]
 80025b2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025b6:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b8:	2201      	movs	r2, #1
 80025ba:	f7ff ffbe 	bl	800253a <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025be:	6823      	ldr	r3, [r4, #0]
}
 80025c0:	2000      	movs	r0, #0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c8:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80025ca:	bf1e      	ittt	ne
 80025cc:	681a      	ldrne	r2, [r3, #0]
 80025ce:	f042 0201 	orrne.w	r2, r2, #1
 80025d2:	601a      	strne	r2, [r3, #0]
}
 80025d4:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025d6:	68c3      	ldr	r3, [r0, #12]
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	e7eb      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025de:	68c3      	ldr	r3, [r0, #12]
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	e7e7      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025e6:	68c3      	ldr	r3, [r0, #12]
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	e7e3      	b.n	80025b6 <HAL_TIM_IC_Start_IT+0x22>

080025ee <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80025f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f04f 0302 	mov.w	r3, #2
 80025fa:	d014      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025fc:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002602:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002604:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002606:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002608:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800260a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002612:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002614:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002616:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002618:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800261a:	2301      	movs	r3, #1
 800261c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002620:	2300      	movs	r3, #0
 8002622:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002626:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002628:	bd30      	pop	{r4, r5, pc}

0800262a <HAL_TIMEx_CommutCallback>:
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_BreakCallback>:
 800262c:	4770      	bx	lr
	...

08002630 <stop_movement.6077>:
//  	  }
//  }


  void stop_movement(void)
  {
 8002630:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002632:	4c0e      	ldr	r4, [pc, #56]	; (800266c <stop_movement.6077+0x3c>)
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff f968 	bl	8001910 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff f962 	bl	8001910 <HAL_GPIO_WritePin>
	  TIM2->CCR4 = 150;
 800264c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002650:	2296      	movs	r2, #150	; 0x96
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
	  rotate_speed_can = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	4a06      	ldr	r2, [pc, #24]	; (8002670 <stop_movement.6077+0x40>)
 8002658:	7013      	strb	r3, [r2, #0]
	  rotate_speed_side = 0;
 800265a:	4a06      	ldr	r2, [pc, #24]	; (8002674 <stop_movement.6077+0x44>)
 800265c:	7013      	strb	r3, [r2, #0]
	  rotate_time = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <stop_movement.6077+0x48>)
 8002662:	6013      	str	r3, [r2, #0]
	  rotate_speed = 0;
 8002664:	4a05      	ldr	r2, [pc, #20]	; (800267c <stop_movement.6077+0x4c>)
 8002666:	6013      	str	r3, [r2, #0]
  }
 8002668:	bd10      	pop	{r4, pc}
 800266a:	bf00      	nop
 800266c:	40010c00 	.word	0x40010c00
 8002670:	20000050 	.word	0x20000050
 8002674:	20000051 	.word	0x20000051
 8002678:	20000054 	.word	0x20000054
 800267c:	2000004c 	.word	0x2000004c

08002680 <HAL_TIM_IC_CaptureCallback>:
	if (htim->Instance == TIM3) {
 8002680:	4a03      	ldr	r2, [pc, #12]	; (8002690 <HAL_TIM_IC_CaptureCallback+0x10>)
 8002682:	6803      	ldr	r3, [r0, #0]
 8002684:	4293      	cmp	r3, r2
		TIM3->CNT = 0;
 8002686:	bf04      	itt	eq
 8002688:	2200      	moveq	r2, #0
 800268a:	625a      	streq	r2, [r3, #36]	; 0x24
}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40000400 	.word	0x40000400

08002694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002694:	b510      	push	{r4, lr}
 8002696:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002698:	2210      	movs	r2, #16
 800269a:	2100      	movs	r1, #0
 800269c:	a809      	add	r0, sp, #36	; 0x24
 800269e:	f000 fd89 	bl	80031b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a2:	2214      	movs	r2, #20
 80026a4:	2100      	movs	r1, #0
 80026a6:	a801      	add	r0, sp, #4
 80026a8:	f000 fd84 	bl	80031b4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ac:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80026b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026bc:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80026c6:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026ca:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026cc:	f7ff f926 	bl	800191c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026da:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026dc:	4621      	mov	r1, r4
 80026de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e6:	f7ff faf7 	bl	8001cd8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80026ea:	b010      	add	sp, #64	; 0x40
 80026ec:	bd10      	pop	{r4, pc}
	...

080026f0 <main>:
{
 80026f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	f04f 0801 	mov.w	r8, #1
 80026fa:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	f04f 0902 	mov.w	r9, #2
{
 8002702:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8002704:	f7fe fc92 	bl	800102c <HAL_Init>
  SystemClock_Config();
 8002708:	f7ff ffc4 	bl	8002694 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	2210      	movs	r2, #16
 800270e:	2100      	movs	r1, #0
 8002710:	a80d      	add	r0, sp, #52	; 0x34
 8002712:	f000 fd4f 	bl	80031b4 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002716:	4bc6      	ldr	r3, [pc, #792]	; (8002a30 <main+0x340>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002718:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800271c:	48c5      	ldr	r0, [pc, #788]	; (8002a34 <main+0x344>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	f042 0220 	orr.w	r2, r2, #32
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Prescaler = 8;
 8002726:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800272a:	f002 0220 	and.w	r2, r2, #32
 800272e:	9204      	str	r2, [sp, #16]
 8002730:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8002734:	4ec0      	ldr	r6, [pc, #768]	; (8002a38 <main+0x348>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	f042 0204 	orr.w	r2, r2, #4
 800273a:	619a      	str	r2, [r3, #24]
 800273c:	699a      	ldr	r2, [r3, #24]
  htim3.Instance = TIM3;
 800273e:	4fbf      	ldr	r7, [pc, #764]	; (8002a3c <main+0x34c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	f002 0204 	and.w	r2, r2, #4
 8002744:	9205      	str	r2, [sp, #20]
 8002746:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	699a      	ldr	r2, [r3, #24]
  hcan1.Instance = CAN1;
 800274a:	4dbd      	ldr	r5, [pc, #756]	; (8002a40 <main+0x350>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	9306      	str	r3, [sp, #24]
 800275c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800275e:	f7ff f8d7 	bl	8001910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002762:	2200      	movs	r2, #0
 8002764:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8002768:	48b6      	ldr	r0, [pc, #728]	; (8002a44 <main+0x354>)
 800276a:	f7ff f8d1 	bl	8001910 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	a90d      	add	r1, sp, #52	; 0x34
 8002770:	48b0      	ldr	r0, [pc, #704]	; (8002a34 <main+0x344>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	e9cd 490f 	strd	r4, r9, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	e9cd b80d 	strd	fp, r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f7fe ffe9 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800277e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
                          |GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	a90d      	add	r1, sp, #52	; 0x34
 8002784:	48af      	ldr	r0, [pc, #700]	; (8002a44 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	e9cd 490f 	strd	r4, r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f7fe ffdf 	bl	8001750 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	4621      	mov	r1, r4
 8002794:	2210      	movs	r2, #16
 8002796:	a809      	add	r0, sp, #36	; 0x24
 8002798:	f000 fd0c 	bl	80031b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800279c:	221c      	movs	r2, #28
 800279e:	4621      	mov	r1, r4
 80027a0:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a6:	f000 fd05 	bl	80031b4 <memset>
  htim2.Init.Prescaler = 8;
 80027aa:	2308      	movs	r3, #8
 80027ac:	e9c6 a300 	strd	sl, r3, [r6]
  htim2.Init.Period = 999;
 80027b0:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027b4:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ba:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027bc:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027be:	f7ff fc93 	bl	80020e8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c6:	a909      	add	r1, sp, #36	; 0x24
 80027c8:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ca:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027cc:	f7ff fe21 	bl	8002412 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027d0:	4630      	mov	r0, r6
 80027d2:	f7ff fca3 	bl	800211c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d6:	a907      	add	r1, sp, #28
 80027d8:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027de:	f7ff ff06 	bl	80025ee <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027e4:	220c      	movs	r2, #12
 80027e6:	a90d      	add	r1, sp, #52	; 0x34
 80027e8:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 80027ea:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f0:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027f2:	f7ff fcf3 	bl	80021dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80027f6:	4630      	mov	r0, r6
 80027f8:	f000 fc08 	bl	800300c <HAL_TIM_MspPostInit>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027fc:	4621      	mov	r1, r4
 80027fe:	2210      	movs	r2, #16
 8002800:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002802:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002806:	f000 fcd5 	bl	80031b4 <memset>
  htim3.Init.Prescaler = 72;
 800280a:	2348      	movs	r3, #72	; 0x48
 800280c:	4a8e      	ldr	r2, [pc, #568]	; (8002a48 <main+0x358>)
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800280e:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 72;
 8002810:	e9c7 2300 	strd	r2, r3, [r7]
  htim3.Init.Period = 65535;
 8002814:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	60bc      	str	r4, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281a:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002820:	f7ff fc96 	bl	8002150 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002824:	a909      	add	r1, sp, #36	; 0x24
 8002826:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002828:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800282c:	f7ff fedf 	bl	80025ee <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICFilter = 15;
 8002830:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002832:	220c      	movs	r2, #12
 8002834:	a90d      	add	r1, sp, #52	; 0x34
 8002836:	4638      	mov	r0, r7
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002838:	e9cd 480d 	strd	r4, r8, [sp, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800283c:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigIC.ICFilter = 15;
 800283e:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002840:	f7ff fd58 	bl	80022f4 <HAL_TIM_IC_ConfigChannel>
  hcan1.Instance = CAN1;
 8002844:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <main+0x35c>)
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002846:	4628      	mov	r0, r5
  hcan1.Init.Prescaler = 4;
 8002848:	e9c5 3b00 	strd	r3, fp, [r5]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800284c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002850:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002854:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002858:	762c      	strb	r4, [r5, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800285a:	766c      	strb	r4, [r5, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800285c:	76ac      	strb	r4, [r5, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800285e:	76ec      	strb	r4, [r5, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002860:	772c      	strb	r4, [r5, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002862:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002864:	f7fe fc18 	bl	8001098 <HAL_CAN_Init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002868:	210c      	movs	r1, #12
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff fe92 	bl	8002594 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002870:	210c      	movs	r1, #12
 8002872:	4630      	mov	r0, r6
 8002874:	f7ff fe8c 	bl	8002590 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8002878:	4642      	mov	r2, r8
 800287a:	4659      	mov	r1, fp
 800287c:	486d      	ldr	r0, [pc, #436]	; (8002a34 <main+0x344>)
 800287e:	f7ff f847 	bl	8001910 <HAL_GPIO_WritePin>
  pHeader.DLC = 3;
 8002882:	2203      	movs	r2, #3
 8002884:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <main+0x360>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002886:	4973      	ldr	r1, [pc, #460]	; (8002a54 <main+0x364>)
  pHeader.DLC = 3;
 8002888:	611a      	str	r2, [r3, #16]
  pHeader.StdId = header_id;
 800288a:	4a73      	ldr	r2, [pc, #460]	; (8002a58 <main+0x368>)
  pHeader.RTR = CAN_RTR_DATA;
 800288c:	e9c3 4402 	strd	r4, r4, [r3, #8]
  pHeader.StdId = header_id;
 8002890:	6812      	ldr	r2, [r2, #0]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8002892:	4628      	mov	r0, r5
  pHeader.StdId = header_id;
 8002894:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <main+0x36c>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002898:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 800289a:	681b      	ldr	r3, [r3, #0]
  sFilterConfig.FilterMaskIdLow = 0;
 800289c:	e9c1 4402 	strd	r4, r4, [r1, #8]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 80028a0:	015b      	lsls	r3, r3, #5
  sFilterConfig.FilterIdLow = 0;
 80028a2:	e9c1 3400 	strd	r3, r4, [r1]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80028a6:	e9c1 8406 	strd	r8, r4, [r1, #24]
  sFilterConfig.FilterActivation = ENABLE;
 80028aa:	f8c1 8020 	str.w	r8, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80028ae:	f7fe fc6e 	bl	800118e <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80028b2:	4628      	mov	r0, r5
 80028b4:	f7fe fcd7 	bl	8001266 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80028b8:	4649      	mov	r1, r9
 80028ba:	4628      	mov	r0, r5
 80028bc:	f7fe fdc1 	bl	8001442 <HAL_CAN_ActivateNotification>
  HAL_Delay(50);
 80028c0:	2032      	movs	r0, #50	; 0x32
 80028c2:	f7fe fbd7 	bl	8001074 <HAL_Delay>
  TIM2->CCR4 = 220;
 80028c6:	23dc      	movs	r3, #220	; 0xdc
	  if ((t_speed > 0)&&(flag == State_Right)) {
 80028c8:	2400      	movs	r4, #0
  	  	rotate_speed = (1/rotate_time);
 80028ca:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
  	  	rotate_time = (float)(input_capture*ratio)/1000000;
 80028ce:	4d64      	ldr	r5, [pc, #400]	; (8002a60 <main+0x370>)
  TIM2->CCR4 = 220;
 80028d0:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
	if (TIM2->CCR4 < 1000) {
 80028d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028da:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80028de:	f080 8201 	bcs.w	8002ce4 <main+0x5f4>
	  if ((t_speed > 0)&&(flag == State_Right)) {
 80028e2:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <main+0x374>)
 80028e4:	2100      	movs	r1, #0
 80028e6:	f8d3 8000 	ldr.w	r8, [r3]
 80028ea:	4640      	mov	r0, r8
 80028ec:	f7fe fb50 	bl	8000f90 <__aeabi_fcmpgt>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f000 8105 	beq.w	8002b00 <main+0x410>
 80028f6:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8002a8c <main+0x39c>
 80028fa:	f899 7000 	ldrb.w	r7, [r9]
 80028fe:	2f02      	cmp	r7, #2
 8002900:	f040 821e 	bne.w	8002d40 <main+0x650>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800290a:	484e      	ldr	r0, [pc, #312]	; (8002a44 <main+0x354>)
 800290c:	f7ff f800 	bl	8001910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002916:	484b      	ldr	r0, [pc, #300]	; (8002a44 <main+0x354>)
 8002918:	f7fe fffa 	bl	8001910 <HAL_GPIO_WritePin>
  rotate_speed_side = 1;
 800291c:	2301      	movs	r3, #1
  target_speed_r = r_speed;
 800291e:	f8df a170 	ldr.w	sl, [pc, #368]	; 8002a90 <main+0x3a0>
  rotate_speed_side = 1;
 8002922:	4f51      	ldr	r7, [pc, #324]	; (8002a68 <main+0x378>)
  target_speed_r = r_speed;
 8002924:	f8ca 8000 	str.w	r8, [sl]
  rotate_speed_side = 1;
 8002928:	703b      	strb	r3, [r7, #0]
  if (target_speed_r >= 0.1) {
 800292a:	4640      	mov	r0, r8
 800292c:	f7fd fd74 	bl	8000418 <__aeabi_f2d>
 8002930:	a33b      	add	r3, pc, #236	; (adr r3, 8002a20 <main+0x330>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fe f84d 	bl	80009d4 <__aeabi_dcmpge>
 800293a:	2800      	cmp	r0, #0
 800293c:	d068      	beq.n	8002a10 <main+0x320>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800293e:	210c      	movs	r1, #12
 8002940:	483e      	ldr	r0, [pc, #248]	; (8002a3c <main+0x34c>)
 8002942:	f7ff fada 	bl	8001efa <HAL_TIM_ReadCapturedValue>
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <main+0x37c>)
	  rotate_speed = (1/rotate_time);
 8002948:	f8df b148 	ldr.w	fp, [pc, #328]	; 8002a94 <main+0x3a4>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 800294c:	6018      	str	r0, [r3, #0]
	  rotate_time = (float)(input_capture*ratio)/1000000;
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <main+0x380>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4358      	muls	r0, r3
 8002954:	f7fe f908 	bl	8000b68 <__aeabi_ui2f>
 8002958:	4629      	mov	r1, r5
 800295a:	f7fe fa11 	bl	8000d80 <__aeabi_fdiv>
 800295e:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <main+0x384>)
	  rotate_speed = (1/rotate_time);
 8002960:	4601      	mov	r1, r0
	  rotate_time = (float)(input_capture*ratio)/1000000;
 8002962:	6010      	str	r0, [r2, #0]
	  rotate_speed = (1/rotate_time);
 8002964:	9000      	str	r0, [sp, #0]
 8002966:	4630      	mov	r0, r6
 8002968:	f7fe fa0a 	bl	8000d80 <__aeabi_fdiv>
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 800296c:	4942      	ldr	r1, [pc, #264]	; (8002a78 <main+0x388>)
	  rotate_speed = (1/rotate_time);
 800296e:	f8cb 0000 	str.w	r0, [fp]
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002972:	f7fe f951 	bl	8000c18 <__aeabi_fmul>
 8002976:	f7fe fb15 	bl	8000fa4 <__aeabi_f2uiz>
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <main+0x38c>)
	  if (rotate_time == 0) {
 800297c:	9b00      	ldr	r3, [sp, #0]
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 800297e:	fa5f f880 	uxtb.w	r8, r0
 8002982:	f882 8000 	strb.w	r8, [r2]
	  if (rotate_time == 0) {
 8002986:	4621      	mov	r1, r4
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fad9 	bl	8000f40 <__aeabi_fcmpeq>
 800298e:	b108      	cbz	r0, 8002994 <main+0x2a4>
		  rotate_speed = 0;
 8002990:	f8cb 4000 	str.w	r4, [fp]
	  if ((rotate_speed<(target_speed_r*0.999))&&(rotate_speed!=0)) {
 8002994:	f8db b000 	ldr.w	fp, [fp]
 8002998:	4658      	mov	r0, fp
 800299a:	f7fd fd3d 	bl	8000418 <__aeabi_f2d>
 800299e:	e9cd 0100 	strd	r0, r1, [sp]
 80029a2:	f8da 0000 	ldr.w	r0, [sl]
 80029a6:	f7fd fd37 	bl	8000418 <__aeabi_f2d>
 80029aa:	a31f      	add	r3, pc, #124	; (adr r3, 8002a28 <main+0x338>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029b4:	f7fd fd88 	bl	80004c8 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80029c0:	f7fd fff4 	bl	80009ac <__aeabi_dcmplt>
 80029c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002a88 <main+0x398>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	f000 8081 	beq.w	8002ad0 <main+0x3e0>
 80029ce:	4621      	mov	r1, r4
 80029d0:	4658      	mov	r0, fp
 80029d2:	f7fe fab5 	bl	8000f40 <__aeabi_fcmpeq>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d17a      	bne.n	8002ad0 <main+0x3e0>
		  if (TIM2->CCR4 > 750) {
 80029da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80029e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029e4:	4291      	cmp	r1, r2
			  TIM2->CCR4 = 750;
 80029e6:	bf88      	it	hi
 80029e8:	641a      	strhi	r2, [r3, #64]	; 0x40
	  	  TIM2->CCR4 += 1;
 80029ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ec:	3201      	adds	r2, #1
			  TIM2->CCR4 -= 1;
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
	  	  driver_tx_data[0] = rotate_speed_can;
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <main+0x390>)
	  	  driver_tx_data[1] = rotate_speed_side;
 80029f2:	783b      	ldrb	r3, [r7, #0]
	  	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <main+0x360>)
	  	  driver_tx_data[1] = rotate_speed_side;
 80029f6:	7053      	strb	r3, [r2, #1]
		  driver_tx_data[2] = state;
 80029f8:	f89a 3000 	ldrb.w	r3, [sl]
	  	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 80029fc:	4810      	ldr	r0, [pc, #64]	; (8002a40 <main+0x350>)
		  driver_tx_data[2] = state;
 80029fe:	7093      	strb	r3, [r2, #2]
	  	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <main+0x394>)
	  	  driver_tx_data[0] = rotate_speed_can;
 8002a02:	f882 8000 	strb.w	r8, [r2]
	  	  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002a06:	f7fe fc59 	bl	80012bc <HAL_CAN_AddTxMessage>
	  	  HAL_Delay(3);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f7fe fb32 	bl	8001074 <HAL_Delay>
		  state = 1;
 8002a10:	2201      	movs	r2, #1
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <main+0x398>)
 8002a14:	701a      	strb	r2, [r3, #0]
		  flag = State_Right;
 8002a16:	2302      	movs	r3, #2
 8002a18:	f889 3000 	strb.w	r3, [r9]
 8002a1c:	e03c      	b.n	8002a98 <main+0x3a8>
 8002a1e:	bf00      	nop
 8002a20:	9999999a 	.word	0x9999999a
 8002a24:	3fb99999 	.word	0x3fb99999
 8002a28:	d916872b 	.word	0xd916872b
 8002a2c:	3feff7ce 	.word	0x3feff7ce
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010800 	.word	0x40010800
 8002a38:	200000dc 	.word	0x200000dc
 8002a3c:	20000098 	.word	0x20000098
 8002a40:	20000138 	.word	0x20000138
 8002a44:	40010c00 	.word	0x40010c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40006400 	.word	0x40006400
 8002a50:	20000160 	.word	0x20000160
 8002a54:	2000006c 	.word	0x2000006c
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	49742400 	.word	0x49742400
 8002a64:	2000005c 	.word	0x2000005c
 8002a68:	20000051 	.word	0x20000051
 8002a6c:	20000048 	.word	0x20000048
 8002a70:	20000018 	.word	0x20000018
 8002a74:	20000054 	.word	0x20000054
 8002a78:	42700000 	.word	0x42700000
 8002a7c:	20000050 	.word	0x20000050
 8002a80:	20000044 	.word	0x20000044
 8002a84:	200000d8 	.word	0x200000d8
 8002a88:	20000058 	.word	0x20000058
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	20000064 	.word	0x20000064
 8002a94:	2000004c 	.word	0x2000004c
	  if ((HAL_GetTick() % 20) == 0) {
 8002a98:	f7fe fae6 	bl	8001068 <HAL_GetTick>
 8002a9c:	2314      	movs	r3, #20
 8002a9e:	fbb0 f2f3 	udiv	r2, r0, r3
 8002aa2:	fb02 0013 	mls	r0, r2, r3, r0
 8002aa6:	b970      	cbnz	r0, 8002ac6 <main+0x3d6>
		  driver_tx_data[0] = rotate_speed_can;
 8002aa8:	4b93      	ldr	r3, [pc, #588]	; (8002cf8 <main+0x608>)
 8002aaa:	4a94      	ldr	r2, [pc, #592]	; (8002cfc <main+0x60c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002aae:	4994      	ldr	r1, [pc, #592]	; (8002d00 <main+0x610>)
		  driver_tx_data[0] = rotate_speed_can;
 8002ab0:	7013      	strb	r3, [r2, #0]
		  driver_tx_data[1] = rotate_speed_side;
 8002ab2:	4b94      	ldr	r3, [pc, #592]	; (8002d04 <main+0x614>)
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002ab4:	4894      	ldr	r0, [pc, #592]	; (8002d08 <main+0x618>)
		  driver_tx_data[1] = rotate_speed_side;
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	7053      	strb	r3, [r2, #1]
		  driver_tx_data[2] = state;
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <main+0x61c>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	7093      	strb	r3, [r2, #2]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002ac0:	4b93      	ldr	r3, [pc, #588]	; (8002d10 <main+0x620>)
 8002ac2:	f7fe fbfb 	bl	80012bc <HAL_CAN_AddTxMessage>
	  pred_t_speed = t_speed;
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <main+0x624>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <main+0x628>)
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e701      	b.n	80028d4 <main+0x1e4>
	  else if ((rotate_speed>(target_speed_r*1.001))) {
 8002ad0:	a387      	add	r3, pc, #540	; (adr r3, 8002cf0 <main+0x600>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ada:	f7fd fcf5 	bl	80004c8 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ae6:	f7fd ff7f 	bl	80009e8 <__aeabi_dcmpgt>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d090      	beq.n	8002a10 <main+0x320>
		  if (TIM2->CCR4 > 0) {
 8002aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	f43f af7b 	beq.w	80029f0 <main+0x300>
			  TIM2->CCR4 -= 1;
 8002afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afc:	3a01      	subs	r2, #1
 8002afe:	e776      	b.n	80029ee <main+0x2fe>
	  else if ((t_speed < 0)&&(flag == State_Right)) {
 8002b00:	4621      	mov	r1, r4
 8002b02:	4640      	mov	r0, r8
 8002b04:	f7fe fa26 	bl	8000f54 <__aeabi_fcmplt>
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d076      	beq.n	8002bfa <main+0x50a>
 8002b0c:	4f83      	ldr	r7, [pc, #524]	; (8002d1c <main+0x62c>)
 8002b0e:	783a      	ldrb	r2, [r7, #0]
 8002b10:	2a02      	cmp	r2, #2
 8002b12:	f040 811d 	bne.w	8002d50 <main+0x660>
	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002b16:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8002d3c <main+0x64c>
		  while (TIM2->CCR4 > 0) {
 8002b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002d0c <main+0x61c>
 8002b24:	b93b      	cbnz	r3, 8002b36 <main+0x446>
		  stop_movement();
 8002b26:	f7ff fd83 	bl	8002630 <stop_movement.6077>
		  state = 2;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f888 3000 	strb.w	r3, [r8]
		  flag = State_Left;
 8002b30:	2301      	movs	r3, #1
		  flag = State_Right;
 8002b32:	703b      	strb	r3, [r7, #0]
 8002b34:	e7b0      	b.n	8002a98 <main+0x3a8>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b3c:	4878      	ldr	r0, [pc, #480]	; (8002d20 <main+0x630>)
 8002b3e:	f7fe fee7 	bl	8001910 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b48:	4875      	ldr	r0, [pc, #468]	; (8002d20 <main+0x630>)
 8002b4a:	f7fe fee1 	bl	8001910 <HAL_GPIO_WritePin>
	  	input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002b4e:	210c      	movs	r1, #12
 8002b50:	4874      	ldr	r0, [pc, #464]	; (8002d24 <main+0x634>)
 8002b52:	f7ff f9d2 	bl	8001efa <HAL_TIM_ReadCapturedValue>
 8002b56:	4b74      	ldr	r3, [pc, #464]	; (8002d28 <main+0x638>)
 8002b58:	6018      	str	r0, [r3, #0]
	  	rotate_time = (float)(input_capture*ratio)/1000000;
 8002b5a:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <main+0x63c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4358      	muls	r0, r3
 8002b60:	f7fe f802 	bl	8000b68 <__aeabi_ui2f>
 8002b64:	4629      	mov	r1, r5
 8002b66:	f7fe f90b 	bl	8000d80 <__aeabi_fdiv>
 8002b6a:	4b71      	ldr	r3, [pc, #452]	; (8002d30 <main+0x640>)
	  	rotate_speed = (1/rotate_time);
 8002b6c:	4601      	mov	r1, r0
	  	rotate_time = (float)(input_capture*ratio)/1000000;
 8002b6e:	6018      	str	r0, [r3, #0]
 8002b70:	4683      	mov	fp, r0
	  	rotate_speed = (1/rotate_time);
 8002b72:	4630      	mov	r0, r6
 8002b74:	f7fe f904 	bl	8000d80 <__aeabi_fdiv>
 8002b78:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <main+0x644>)
	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002b7a:	4649      	mov	r1, r9
	  	rotate_speed = (1/rotate_time);
 8002b7c:	6018      	str	r0, [r3, #0]
 8002b7e:	9300      	str	r3, [sp, #0]
	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002b80:	f7fe f84a 	bl	8000c18 <__aeabi_fmul>
 8002b84:	f7fe fa0e 	bl	8000fa4 <__aeabi_f2uiz>
 8002b88:	4a5b      	ldr	r2, [pc, #364]	; (8002cf8 <main+0x608>)
 8002b8a:	fa5f fa80 	uxtb.w	sl, r0
 8002b8e:	f882 a000 	strb.w	sl, [r2]
	  	if (rotate_time == 0) {
 8002b92:	4621      	mov	r1, r4
 8002b94:	4658      	mov	r0, fp
 8002b96:	f7fe f9d3 	bl	8000f40 <__aeabi_fcmpeq>
 8002b9a:	b108      	cbz	r0, 8002ba0 <main+0x4b0>
	  		rotate_speed = 0;
 8002b9c:	9b00      	ldr	r3, [sp, #0]
 8002b9e:	601c      	str	r4, [r3, #0]
	  		if (TIM2->CCR4 > 0) {
 8002ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba6:	b112      	cbz	r2, 8002bae <main+0x4be>
	  			TIM2->CCR4 -= 1;
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002baa:	3a01      	subs	r2, #1
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
	  		driver_tx_data[1] = rotate_speed_side;
 8002bae:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <main+0x614>)
	  		driver_tx_data[0] = rotate_speed_can;
 8002bb0:	4a52      	ldr	r2, [pc, #328]	; (8002cfc <main+0x60c>)
	  		driver_tx_data[1] = rotate_speed_side;
 8002bb2:	781b      	ldrb	r3, [r3, #0]
	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002bb4:	4952      	ldr	r1, [pc, #328]	; (8002d00 <main+0x610>)
	  		driver_tx_data[1] = rotate_speed_side;
 8002bb6:	7053      	strb	r3, [r2, #1]
			driver_tx_data[2] = state;
 8002bb8:	f898 3000 	ldrb.w	r3, [r8]
	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002bbc:	4852      	ldr	r0, [pc, #328]	; (8002d08 <main+0x618>)
			driver_tx_data[2] = state;
 8002bbe:	7093      	strb	r3, [r2, #2]
	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <main+0x620>)
	  		driver_tx_data[0] = rotate_speed_can;
 8002bc2:	f882 a000 	strb.w	sl, [r2]
	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002bc6:	f7fe fb79 	bl	80012bc <HAL_CAN_AddTxMessage>
	  		HAL_Delay(3);
 8002bca:	2003      	movs	r0, #3
 8002bcc:	f7fe fa52 	bl	8001074 <HAL_Delay>
 8002bd0:	e7a3      	b.n	8002b1a <main+0x42a>
	  else if ((rotate_speed>(target_speed_l*1.001f))) {
 8002bd2:	4959      	ldr	r1, [pc, #356]	; (8002d38 <main+0x648>)
 8002bd4:	4658      	mov	r0, fp
 8002bd6:	f7fe f81f 	bl	8000c18 <__aeabi_fmul>
 8002bda:	4601      	mov	r1, r0
 8002bdc:	4650      	mov	r0, sl
 8002bde:	f7fe f9d7 	bl	8000f90 <__aeabi_fcmpgt>
 8002be2:	2800      	cmp	r0, #0
 8002be4:	f000 8130 	beq.w	8002e48 <main+0x758>
		  if (TIM2->CCR4 > 0) {
 8002be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	2a00      	cmp	r2, #0
 8002bf0:	f000 811a 	beq.w	8002e28 <main+0x738>
			  TIM2->CCR4 -= 1;
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	e115      	b.n	8002e26 <main+0x736>
	  else if ((t_speed > 0)&&(flag == State_Left)) {
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	f7fe f9c7 	bl	8000f90 <__aeabi_fcmpgt>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d061      	beq.n	8002cca <main+0x5da>
 8002c06:	4f45      	ldr	r7, [pc, #276]	; (8002d1c <main+0x62c>)
 8002c08:	783b      	ldrb	r3, [r7, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f040 8129 	bne.w	8002e62 <main+0x772>
  	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002c10:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8002d3c <main+0x64c>
		  while (TIM2->CCR4 > 0) {
 8002c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002d0c <main+0x61c>
 8002c1e:	b933      	cbnz	r3, 8002c2e <main+0x53e>
		  stop_movement();
 8002c20:	f7ff fd06 	bl	8002630 <stop_movement.6077>
		  state = 4;
 8002c24:	2304      	movs	r3, #4
 8002c26:	f888 3000 	strb.w	r3, [r8]
		  flag = State_Right;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e781      	b.n	8002b32 <main+0x442>
  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c34:	483a      	ldr	r0, [pc, #232]	; (8002d20 <main+0x630>)
 8002c36:	f7fe fe6b 	bl	8001910 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c40:	4837      	ldr	r0, [pc, #220]	; (8002d20 <main+0x630>)
 8002c42:	f7fe fe65 	bl	8001910 <HAL_GPIO_WritePin>
  	  	input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002c46:	210c      	movs	r1, #12
 8002c48:	4836      	ldr	r0, [pc, #216]	; (8002d24 <main+0x634>)
 8002c4a:	f7ff f956 	bl	8001efa <HAL_TIM_ReadCapturedValue>
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <main+0x638>)
 8002c50:	6018      	str	r0, [r3, #0]
  	  	rotate_time = (float)(input_capture*ratio)/1000000;
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <main+0x63c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4358      	muls	r0, r3
 8002c58:	f7fd ff86 	bl	8000b68 <__aeabi_ui2f>
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fe f88f 	bl	8000d80 <__aeabi_fdiv>
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <main+0x640>)
  	  	rotate_speed = (1/rotate_time);
 8002c64:	4601      	mov	r1, r0
  	  	rotate_time = (float)(input_capture*ratio)/1000000;
 8002c66:	6018      	str	r0, [r3, #0]
 8002c68:	4683      	mov	fp, r0
  	  	rotate_speed = (1/rotate_time);
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f7fe f888 	bl	8000d80 <__aeabi_fdiv>
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <main+0x644>)
  	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002c72:	4649      	mov	r1, r9
  	  	rotate_speed = (1/rotate_time);
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	9300      	str	r3, [sp, #0]
  	  	rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002c78:	f7fd ffce 	bl	8000c18 <__aeabi_fmul>
 8002c7c:	f7fe f992 	bl	8000fa4 <__aeabi_f2uiz>
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <main+0x608>)
 8002c82:	fa5f fa80 	uxtb.w	sl, r0
 8002c86:	f882 a000 	strb.w	sl, [r2]
  	  	if (rotate_time == 0) {
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	4658      	mov	r0, fp
 8002c8e:	f7fe f957 	bl	8000f40 <__aeabi_fcmpeq>
 8002c92:	b108      	cbz	r0, 8002c98 <main+0x5a8>
  	  		rotate_speed = 0;
 8002c94:	9b00      	ldr	r3, [sp, #0]
 8002c96:	601c      	str	r4, [r3, #0]
  			if (TIM2->CCR4 > 0) {
 8002c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9e:	b112      	cbz	r2, 8002ca6 <main+0x5b6>
  				TIM2->CCR4 -= 1;
 8002ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
  	  		driver_tx_data[1] = rotate_speed_side;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <main+0x614>)
  			driver_tx_data[0] = rotate_speed_can;
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <main+0x60c>)
  	  		driver_tx_data[1] = rotate_speed_side;
 8002caa:	781b      	ldrb	r3, [r3, #0]
  	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002cac:	4914      	ldr	r1, [pc, #80]	; (8002d00 <main+0x610>)
  	  		driver_tx_data[1] = rotate_speed_side;
 8002cae:	7053      	strb	r3, [r2, #1]
  	  		driver_tx_data[2] = state;
 8002cb0:	f898 3000 	ldrb.w	r3, [r8]
  	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002cb4:	4814      	ldr	r0, [pc, #80]	; (8002d08 <main+0x618>)
  	  		driver_tx_data[2] = state;
 8002cb6:	7093      	strb	r3, [r2, #2]
  	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <main+0x620>)
  			driver_tx_data[0] = rotate_speed_can;
 8002cba:	f882 a000 	strb.w	sl, [r2]
  	  		HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002cbe:	f7fe fafd 	bl	80012bc <HAL_CAN_AddTxMessage>
  	  		HAL_Delay(3);
 8002cc2:	2003      	movs	r0, #3
 8002cc4:	f7fe f9d6 	bl	8001074 <HAL_Delay>
 8002cc8:	e7a4      	b.n	8002c14 <main+0x524>
	  else if (t_speed == 0) {
 8002cca:	4621      	mov	r1, r4
 8002ccc:	4640      	mov	r0, r8
 8002cce:	f7fe f937 	bl	8000f40 <__aeabi_fcmpeq>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f000 80c5 	beq.w	8002e62 <main+0x772>
		  state = 5;
 8002cd8:	2205      	movs	r2, #5
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <main+0x61c>)
 8002cdc:	701a      	strb	r2, [r3, #0]
		  stop_movement();
 8002cde:	f7ff fca7 	bl	8002630 <stop_movement.6077>
 8002ce2:	e6d9      	b.n	8002a98 <main+0x3a8>
		state = 7;
 8002ce4:	2107      	movs	r1, #7
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <main+0x61c>)
 8002ce8:	7011      	strb	r1, [r2, #0]
		TIM2->CCR4 = 0;
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	e5f1      	b.n	80028d4 <main+0x1e4>
 8002cf0:	9374bc6a 	.word	0x9374bc6a
 8002cf4:	3ff00418 	.word	0x3ff00418
 8002cf8:	20000050 	.word	0x20000050
 8002cfc:	20000044 	.word	0x20000044
 8002d00:	20000160 	.word	0x20000160
 8002d04:	20000051 	.word	0x20000051
 8002d08:	20000138 	.word	0x20000138
 8002d0c:	20000058 	.word	0x20000058
 8002d10:	200000d8 	.word	0x200000d8
 8002d14:	2000005c 	.word	0x2000005c
 8002d18:	20000014 	.word	0x20000014
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	40010c00 	.word	0x40010c00
 8002d24:	20000098 	.word	0x20000098
 8002d28:	20000048 	.word	0x20000048
 8002d2c:	20000018 	.word	0x20000018
 8002d30:	20000054 	.word	0x20000054
 8002d34:	2000004c 	.word	0x2000004c
 8002d38:	3f8020c5 	.word	0x3f8020c5
 8002d3c:	42700000 	.word	0x42700000
	  else if ((t_speed < 0)&&(flag == State_Right)) {
 8002d40:	4621      	mov	r1, r4
 8002d42:	4640      	mov	r0, r8
 8002d44:	f7fe f906 	bl	8000f54 <__aeabi_fcmplt>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f43f af56 	beq.w	8002bfa <main+0x50a>
 8002d4e:	463a      	mov	r2, r7
	  else if ((t_speed < 0)&&(flag == State_Left)) {
 8002d50:	2a01      	cmp	r2, #1
 8002d52:	d17f      	bne.n	8002e54 <main+0x764>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8002d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d58:	4847      	ldr	r0, [pc, #284]	; (8002e78 <main+0x788>)
 8002d5a:	f7fe fdd9 	bl	8001910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d64:	4844      	ldr	r0, [pc, #272]	; (8002e78 <main+0x788>)
 8002d66:	f7fe fdd3 	bl	8001910 <HAL_GPIO_WritePin>
  rotate_speed_side = 2;
 8002d6a:	2302      	movs	r3, #2
		  move_left(-t_speed);
 8002d6c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
  target_speed_l = l_speed;
 8002d70:	f8df a140 	ldr.w	sl, [pc, #320]	; 8002eb4 <main+0x7c4>
  rotate_speed_side = 2;
 8002d74:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8002eb8 <main+0x7c8>
  target_speed_l = l_speed;
 8002d78:	f8ca 7000 	str.w	r7, [sl]
  rotate_speed_side = 2;
 8002d7c:	f888 3000 	strb.w	r3, [r8]
  if (target_speed_l >= 0.1) {
 8002d80:	4638      	mov	r0, r7
 8002d82:	f7fd fb49 	bl	8000418 <__aeabi_f2d>
 8002d86:	a33a      	add	r3, pc, #232	; (adr r3, 8002e70 <main+0x780>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fe22 	bl	80009d4 <__aeabi_dcmpge>
 8002d90:	4f3a      	ldr	r7, [pc, #232]	; (8002e7c <main+0x78c>)
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d058      	beq.n	8002e48 <main+0x758>
	  input_capture = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_4);
 8002d96:	210c      	movs	r1, #12
 8002d98:	4839      	ldr	r0, [pc, #228]	; (8002e80 <main+0x790>)
 8002d9a:	f7ff f8ae 	bl	8001efa <HAL_TIM_ReadCapturedValue>
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <main+0x794>)
 8002da0:	6018      	str	r0, [r3, #0]
	  rotate_time = (float)(input_capture*ratio)/1000000;
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <main+0x798>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4358      	muls	r0, r3
 8002da8:	f7fd fede 	bl	8000b68 <__aeabi_ui2f>
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd ffe7 	bl	8000d80 <__aeabi_fdiv>
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <main+0x79c>)
	  rotate_speed = (1/rotate_time);
 8002db4:	4601      	mov	r1, r0
	  rotate_time = (float)(input_capture*ratio)/1000000;
 8002db6:	6018      	str	r0, [r3, #0]
 8002db8:	4683      	mov	fp, r0
	  rotate_speed = (1/rotate_time);
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f7fd ffe0 	bl	8000d80 <__aeabi_fdiv>
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <main+0x7a0>)
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002dc2:	4934      	ldr	r1, [pc, #208]	; (8002e94 <main+0x7a4>)
	  rotate_speed = (1/rotate_time);
 8002dc4:	6018      	str	r0, [r3, #0]
 8002dc6:	9300      	str	r3, [sp, #0]
	  rotate_speed_can = (uint8_t)(rotate_speed*60);
 8002dc8:	f7fd ff26 	bl	8000c18 <__aeabi_fmul>
 8002dcc:	f7fe f8ea 	bl	8000fa4 <__aeabi_f2uiz>
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <main+0x7a8>)
 8002dd2:	fa5f f980 	uxtb.w	r9, r0
 8002dd6:	f882 9000 	strb.w	r9, [r2]
	  if (rotate_time == 0) {
 8002dda:	4621      	mov	r1, r4
 8002ddc:	4658      	mov	r0, fp
 8002dde:	f7fe f8af 	bl	8000f40 <__aeabi_fcmpeq>
 8002de2:	9b00      	ldr	r3, [sp, #0]
 8002de4:	b100      	cbz	r0, 8002de8 <main+0x6f8>
		  rotate_speed = 0;
 8002de6:	601c      	str	r4, [r3, #0]
	  if ((rotate_speed<(target_speed_l*0.999f))&&(rotate_speed!=0)) {
 8002de8:	f8da b000 	ldr.w	fp, [sl]
 8002dec:	f8d3 a000 	ldr.w	sl, [r3]
 8002df0:	492a      	ldr	r1, [pc, #168]	; (8002e9c <main+0x7ac>)
 8002df2:	4658      	mov	r0, fp
 8002df4:	f7fd ff10 	bl	8000c18 <__aeabi_fmul>
 8002df8:	4651      	mov	r1, sl
 8002dfa:	f7fe f8c9 	bl	8000f90 <__aeabi_fcmpgt>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	f43f aee7 	beq.w	8002bd2 <main+0x4e2>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4650      	mov	r0, sl
 8002e08:	f7fe f89a 	bl	8000f40 <__aeabi_fcmpeq>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	f47f aee0 	bne.w	8002bd2 <main+0x4e2>
		  if (TIM2->CCR4 > 750) {
 8002e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e16:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002e1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e1c:	4291      	cmp	r1, r2
			  TIM2->CCR4 = 750;
 8002e1e:	bf88      	it	hi
 8002e20:	641a      	strhi	r2, [r3, #64]	; 0x40
	  	  TIM2->CCR4 += 1;
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e24:	3201      	adds	r2, #1
			  TIM2->CCR4 -= 1;
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
		  driver_tx_data[0] = rotate_speed_can;
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <main+0x7b0>)
		  driver_tx_data[1] = rotate_speed_side;
 8002e2a:	f898 3000 	ldrb.w	r3, [r8]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002e2e:	491d      	ldr	r1, [pc, #116]	; (8002ea4 <main+0x7b4>)
		  driver_tx_data[1] = rotate_speed_side;
 8002e30:	7053      	strb	r3, [r2, #1]
		  driver_tx_data[2] = state;
 8002e32:	783b      	ldrb	r3, [r7, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002e34:	481c      	ldr	r0, [pc, #112]	; (8002ea8 <main+0x7b8>)
		  driver_tx_data[2] = state;
 8002e36:	7093      	strb	r3, [r2, #2]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <main+0x7bc>)
		  driver_tx_data[0] = rotate_speed_can;
 8002e3a:	f882 9000 	strb.w	r9, [r2]
		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
 8002e3e:	f7fe fa3d 	bl	80012bc <HAL_CAN_AddTxMessage>
	  	  HAL_Delay(3);
 8002e42:	2003      	movs	r0, #3
 8002e44:	f7fe f916 	bl	8001074 <HAL_Delay>
		  state = 3;
 8002e48:	2303      	movs	r3, #3
		  flag = State_Left;
 8002e4a:	2201      	movs	r2, #1
		  state = 3;
 8002e4c:	703b      	strb	r3, [r7, #0]
		  flag = State_Left;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <main+0x7c0>)
	  	state = 6;
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e621      	b.n	8002a98 <main+0x3a8>
	  else if ((t_speed > 0)&&(flag == State_Left)) {
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f7fe f89a 	bl	8000f90 <__aeabi_fcmpgt>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f47f aed2 	bne.w	8002c06 <main+0x516>
	  	 stop_movement();
 8002e62:	f7ff fbe5 	bl	8002630 <stop_movement.6077>
	  	state = 6;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <main+0x78c>)
 8002e68:	2206      	movs	r2, #6
 8002e6a:	e7f1      	b.n	8002e50 <main+0x760>
 8002e6c:	f3af 8000 	nop.w
 8002e70:	9999999a 	.word	0x9999999a
 8002e74:	3fb99999 	.word	0x3fb99999
 8002e78:	40010c00 	.word	0x40010c00
 8002e7c:	20000058 	.word	0x20000058
 8002e80:	20000098 	.word	0x20000098
 8002e84:	20000048 	.word	0x20000048
 8002e88:	20000018 	.word	0x20000018
 8002e8c:	20000054 	.word	0x20000054
 8002e90:	2000004c 	.word	0x2000004c
 8002e94:	42700000 	.word	0x42700000
 8002e98:	20000050 	.word	0x20000050
 8002e9c:	3f7fbe77 	.word	0x3f7fbe77
 8002ea0:	20000044 	.word	0x20000044
 8002ea4:	20000160 	.word	0x20000160
 8002ea8:	20000138 	.word	0x20000138
 8002eac:	200000d8 	.word	0x200000d8
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	20000060 	.word	0x20000060
 8002eb8:	20000051 	.word	0x20000051

08002ebc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <HAL_MspInit+0x3c>)
{
 8002ebe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	619a      	str	r2, [r3, #24]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	f002 0201 	and.w	r2, r2, #1
 8002ece:	9200      	str	r2, [sp, #0]
 8002ed0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ed8:	61da      	str	r2, [r3, #28]
 8002eda:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002ee6:	6853      	ldr	r3, [r2, #4]
 8002ee8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002eec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef2:	b002      	add	sp, #8
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000

08002f00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	2210      	movs	r2, #16
 8002f08:	2100      	movs	r1, #0
 8002f0a:	a802      	add	r0, sp, #8
 8002f0c:	f000 f952 	bl	80031b4 <memset>
  if(hcan->Instance==CAN1)
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_CAN_MspInit+0x78>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d12d      	bne.n	8002f74 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f18:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002f1c:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f24:	61da      	str	r2, [r3, #28]
 8002f26:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	4814      	ldr	r0, [pc, #80]	; (8002f7c <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f2a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002f2e:	9200      	str	r2, [sp, #0]
 8002f30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	f042 0204 	orr.w	r2, r2, #4
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f48:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f7fe fc01 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f52:	2302      	movs	r3, #2
 8002f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f58:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	a902      	add	r1, sp, #8
 8002f5c:	4807      	ldr	r0, [pc, #28]	; (8002f7c <HAL_CAN_MspInit+0x7c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	f7fe fbf6 	bl	8001750 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2014      	movs	r0, #20
 8002f68:	4611      	mov	r1, r2
 8002f6a:	f7fe fb99 	bl	80016a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f6e:	2014      	movs	r0, #20
 8002f70:	f7fe fbca 	bl	8001708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f74:	b006      	add	sp, #24
 8002f76:	bd10      	pop	{r4, pc}
 8002f78:	40006400 	.word	0x40006400
 8002f7c:	40010800 	.word	0x40010800

08002f80 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002f80:	6803      	ldr	r3, [r0, #0]
{
 8002f82:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d10a      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	61da      	str	r2, [r3, #28]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fa0:	b002      	add	sp, #8
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002faa:	2210      	movs	r2, #16
 8002fac:	2100      	movs	r1, #0
 8002fae:	a802      	add	r0, sp, #8
 8002fb0:	f000 f900 	bl	80031b4 <memset>
  if(htim_ic->Instance==TIM3)
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_TIM_IC_MspInit+0x60>)
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d121      	bne.n	8003000 <HAL_TIM_IC_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fbc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002fc0:	69da      	ldr	r2, [r3, #28]
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc4:	f042 0202 	orr.w	r2, r2, #2
 8002fc8:	61da      	str	r2, [r3, #28]
 8002fca:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <HAL_TIM_IC_MspInit+0x64>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fce:	f002 0202 	and.w	r2, r2, #2
 8002fd2:	9200      	str	r2, [sp, #0]
 8002fd4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	f042 0208 	orr.w	r2, r2, #8
 8002fdc:	619a      	str	r2, [r3, #24]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	f7fe fbb0 	bl	8001750 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	201d      	movs	r0, #29
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	f7fe fb53 	bl	80016a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ffa:	201d      	movs	r0, #29
 8002ffc:	f7fe fb84 	bl	8001708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003000:	b006      	add	sp, #24
 8003002:	bd10      	pop	{r4, pc}
 8003004:	40000400 	.word	0x40000400
 8003008:	40010c00 	.word	0x40010c00

0800300c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	2210      	movs	r2, #16
 8003014:	2100      	movs	r1, #0
 8003016:	a802      	add	r0, sp, #8
 8003018:	f000 f8cc 	bl	80031b4 <memset>
  if(htim->Instance==TIM2)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d113      	bne.n	800304c <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003024:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003028:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302c:	f042 0204 	orr.w	r2, r2, #4
 8003030:	619a      	str	r2, [r3, #24]
 8003032:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f7fe fb82 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800304c:	b006      	add	sp, #24
 800304e:	bd10      	pop	{r4, pc}
 8003050:	40010800 	.word	0x40010800

08003054 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003054:	4770      	bx	lr

08003056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003056:	e7fe      	b.n	8003056 <HardFault_Handler>

08003058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003058:	e7fe      	b.n	8003058 <MemManage_Handler>

0800305a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305a:	e7fe      	b.n	800305a <BusFault_Handler>

0800305c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305c:	e7fe      	b.n	800305c <UsageFault_Handler>

0800305e <SVC_Handler>:
 800305e:	4770      	bx	lr

08003060 <DebugMon_Handler>:
 8003060:	4770      	bx	lr

08003062 <PendSV_Handler>:
 8003062:	4770      	bx	lr

08003064 <SysTick_Handler>:
//		  driver_tx_data[1] = rotate_speed_side;
//		  //driver_tx_data[2] = state_can;
//		  HAL_CAN_AddTxMessage(&hcan1, &pHeader, driver_tx_data, &TxMailbox);
//	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003064:	f7fd bff4 	b.w	8001050 <HAL_IncTick>

08003068 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003068:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, control_data);
 800306a:	4c11      	ldr	r4, [pc, #68]	; (80030b0 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
  HAL_CAN_IRQHandler(&hcan1);
 800306c:	4811      	ldr	r0, [pc, #68]	; (80030b4 <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 800306e:	f7fe fa06 	bl	800147e <HAL_CAN_IRQHandler>
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, control_data);
 8003072:	4623      	mov	r3, r4
 8003074:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <USB_LP_CAN1_RX0_IRQHandler+0x50>)
 8003076:	2100      	movs	r1, #0
 8003078:	480e      	ldr	r0, [pc, #56]	; (80030b4 <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 800307a:	f7fe f96c 	bl	8001356 <HAL_CAN_GetRxMessage>

  side = control_data[0];
 800307e:	7823      	ldrb	r3, [r4, #0]
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <USB_LP_CAN1_RX0_IRQHandler+0x54>)
 8003082:	7013      	strb	r3, [r2, #0]
  //t_speed = control_data[1]/60.0f;
  if (side == 0) {
 8003084:	b953      	cbnz	r3, 800309c <USB_LP_CAN1_RX0_IRQHandler+0x34>
	  t_speed = -(control_data[1]/60.0f);
 8003086:	7860      	ldrb	r0, [r4, #1]
 8003088:	f7fd fd72 	bl	8000b70 <__aeabi_i2f>
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <USB_LP_CAN1_RX0_IRQHandler+0x58>)
 800308e:	f7fd fe77 	bl	8000d80 <__aeabi_fdiv>
 8003092:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  }
  else if (side == 1) {
	  t_speed = control_data[1]/60.0f;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <USB_LP_CAN1_RX0_IRQHandler+0x5c>)
 8003098:	6018      	str	r0, [r3, #0]
  }
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800309a:	bd10      	pop	{r4, pc}
  else if (side == 1) {
 800309c:	2b01      	cmp	r3, #1
 800309e:	d1fc      	bne.n	800309a <USB_LP_CAN1_RX0_IRQHandler+0x32>
	  t_speed = control_data[1]/60.0f;
 80030a0:	7860      	ldrb	r0, [r4, #1]
 80030a2:	f7fd fd65 	bl	8000b70 <__aeabi_i2f>
 80030a6:	4906      	ldr	r1, [pc, #24]	; (80030c0 <USB_LP_CAN1_RX0_IRQHandler+0x58>)
 80030a8:	f7fd fe6a 	bl	8000d80 <__aeabi_fdiv>
 80030ac:	e7f3      	b.n	8003096 <USB_LP_CAN1_RX0_IRQHandler+0x2e>
 80030ae:	bf00      	nop
 80030b0:	2000003c 	.word	0x2000003c
 80030b4:	20000138 	.word	0x20000138
 80030b8:	2000011c 	.word	0x2000011c
 80030bc:	20000094 	.word	0x20000094
 80030c0:	42700000 	.word	0x42700000
 80030c4:	2000005c 	.word	0x2000005c

080030c8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <TIM3_IRQHandler+0x8>)
 80030ca:	f7fe bf33 	b.w	8001f34 <HAL_TIM_IRQHandler>
 80030ce:	bf00      	nop
 80030d0:	20000098 	.word	0x20000098

080030d4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <SystemInit+0x40>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <SystemInit+0x44>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003100:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003102:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003106:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <SystemInit+0x48>)
 800310e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	f8ff0000 	.word	0xf8ff0000
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003122:	e003      	b.n	800312c <LoopCopyDataInit>

08003124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800312a:	3104      	adds	r1, #4

0800312c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800312c:	480a      	ldr	r0, [pc, #40]	; (8003158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003134:	d3f6      	bcc.n	8003124 <CopyDataInit>
  ldr r2, =_sbss
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003138:	e002      	b.n	8003140 <LoopFillZerobss>

0800313a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800313c:	f842 3b04 	str.w	r3, [r2], #4

08003140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003144:	d3f9      	bcc.n	800313a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003146:	f7ff ffc5 	bl	80030d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314a:	f000 f80f 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800314e:	f7ff facf 	bl	80026f0 <main>
  bx lr
 8003152:	4770      	bx	lr
  ldr r3, =_sidata
 8003154:	08003204 	.word	0x08003204
  ldr r0, =_sdata
 8003158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800315c:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8003160:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8003164:	20000178 	.word	0x20000178

08003168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003168:	e7fe      	b.n	8003168 <ADC1_2_IRQHandler>
	...

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2500      	movs	r5, #0
 8003170:	4e0c      	ldr	r6, [pc, #48]	; (80031a4 <__libc_init_array+0x38>)
 8003172:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003174:	1ba4      	subs	r4, r4, r6
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a5      	cmp	r5, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	f000 f822 	bl	80031c4 <_init>
 8003180:	2500      	movs	r5, #0
 8003182:	4e0a      	ldr	r6, [pc, #40]	; (80031ac <__libc_init_array+0x40>)
 8003184:	4c0a      	ldr	r4, [pc, #40]	; (80031b0 <__libc_init_array+0x44>)
 8003186:	1ba4      	subs	r4, r4, r6
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a5      	cmp	r5, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003194:	4798      	blx	r3
 8003196:	3501      	adds	r5, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800319e:	4798      	blx	r3
 80031a0:	3501      	adds	r5, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	080031fc 	.word	0x080031fc
 80031a8:	080031fc 	.word	0x080031fc
 80031ac:	080031fc 	.word	0x080031fc
 80031b0:	08003200 	.word	0x08003200

080031b4 <memset>:
 80031b4:	4603      	mov	r3, r0
 80031b6:	4402      	add	r2, r0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	f803 1b01 	strb.w	r1, [r3], #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <_init>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr

080031d0 <_fini>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr
