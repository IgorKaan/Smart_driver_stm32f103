
stm32-f103-smart-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002494  08002494  00012494  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  080024bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  20000048  08002500  00020048  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000164  08002500  00020164  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b204  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b9d  00000000  00000000  0002b271  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052fe  00000000  00000000  0002ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007b0  00000000  00000000  00032110  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a38  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00013631  00000000  00000000  000332f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006582  00000000  00000000  00046929  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006df1d  00000000  00000000  0004ceab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000badc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018f4  00000000  00000000  000bae44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	0800247c 	.word	0x0800247c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	0800247c 	.word	0x0800247c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2uiz>:
 80009f8:	004a      	lsls	r2, r1, #1
 80009fa:	d211      	bcs.n	8000a20 <__aeabi_d2uiz+0x28>
 80009fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a00:	d211      	bcs.n	8000a26 <__aeabi_d2uiz+0x2e>
 8000a02:	d50d      	bpl.n	8000a20 <__aeabi_d2uiz+0x28>
 8000a04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a0c:	d40e      	bmi.n	8000a2c <__aeabi_d2uiz+0x34>
 8000a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1e:	4770      	bx	lr
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_d2uiz+0x3a>
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0000 	mov.w	r0, #0
 8000a36:	4770      	bx	lr

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_InitTick+0x3c>)
{
 8000a3c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3e:	7818      	ldrb	r0, [r3, #0]
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <HAL_InitTick+0x40>)
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a50:	f000 fb80 	bl	8001154 <HAL_SYSTICK_Config>
 8000a54:	4604      	mov	r4, r0
 8000a56:	b958      	cbnz	r0, 8000a70 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	2d0f      	cmp	r5, #15
 8000a5a:	d809      	bhi.n	8000a70 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	f000 fb34 	bl	80010d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4620      	mov	r0, r4
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_InitTick+0x44>)
 8000a6c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a6e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a70:	2001      	movs	r0, #1
 8000a72:	e7fc      	b.n	8000a6e <HAL_InitTick+0x36>
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000040 	.word	0x20000040
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x20>)
{
 8000a82:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8e:	f000 fb0d 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ffd0 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000a98:	f001 fb74 	bl	8002184 <HAL_MspInit>
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd08      	pop	{r3, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_IncTick+0x10>)
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_IncTick+0x14>)
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	20000000 	.word	0x20000000

08000abc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000abc:	4b01      	ldr	r3, [pc, #4]	; (8000ac4 <HAL_GetTick+0x8>)
 8000abe:	6818      	ldr	r0, [r3, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000090 	.word	0x20000090

08000ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aca:	4604      	mov	r4, r0
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d06e      	beq.n	8000bae <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ad0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000ad4:	b90b      	cbnz	r3, 8000ada <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ad6:	f001 fb77 	bl	80021c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ada:	6822      	ldr	r2, [r4, #0]
 8000adc:	6813      	ldr	r3, [r2, #0]
 8000ade:	f023 0302 	bic.w	r3, r3, #2
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae4:	f7ff ffea 	bl	8000abc <HAL_GetTick>
 8000ae8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	0791      	lsls	r1, r2, #30
 8000af0:	d451      	bmi.n	8000b96 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f042 0201 	orr.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000afa:	f7ff ffdf 	bl	8000abc <HAL_GetTick>
 8000afe:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	07d2      	lsls	r2, r2, #31
 8000b06:	d554      	bpl.n	8000bb2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b08:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b0a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b0c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	bf0c      	ite	eq
 8000b12:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b16:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000b1a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b1c:	7e62      	ldrb	r2, [r4, #25]
 8000b1e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	bf0c      	ite	eq
 8000b24:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b28:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000b2c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b2e:	7ea2      	ldrb	r2, [r4, #26]
 8000b30:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	bf0c      	ite	eq
 8000b36:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b3a:	f022 0220 	bicne.w	r2, r2, #32
 8000b3e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b40:	7ee2      	ldrb	r2, [r4, #27]
 8000b42:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	bf0c      	ite	eq
 8000b48:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b4c:	f042 0210 	orrne.w	r2, r2, #16
 8000b50:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b52:	7f22      	ldrb	r2, [r4, #28]
 8000b54:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	bf0c      	ite	eq
 8000b5a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b5e:	f022 0208 	bicne.w	r2, r2, #8
 8000b62:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b64:	7f62      	ldrb	r2, [r4, #29]
 8000b66:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	bf0c      	ite	eq
 8000b6c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b70:	f022 0204 	bicne.w	r2, r2, #4
 8000b74:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b76:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	6921      	ldr	r1, [r4, #16]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	6961      	ldr	r1, [r4, #20]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	6861      	ldr	r1, [r4, #4]
 8000b86:	3901      	subs	r1, #1
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b8c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b8e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000b90:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b96:	f7ff ff91 	bl	8000abc <HAL_GetTick>
 8000b9a:	1b40      	subs	r0, r0, r5
 8000b9c:	280a      	cmp	r0, #10
 8000b9e:	d9a4      	bls.n	8000aea <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ba8:	2305      	movs	r3, #5
 8000baa:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
 8000bb0:	e7f0      	b.n	8000b94 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bb2:	f7ff ff83 	bl	8000abc <HAL_GetTick>
 8000bb6:	1b40      	subs	r0, r0, r5
 8000bb8:	280a      	cmp	r0, #10
 8000bba:	d9a1      	bls.n	8000b00 <HAL_CAN_Init+0x38>
 8000bbc:	e7f0      	b.n	8000ba0 <HAL_CAN_Init+0xd8>

08000bbe <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bbe:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000bc2:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d85f      	bhi.n	8000c8a <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bca:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bcc:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000bd2:	f042 0201 	orr.w	r2, r2, #1
 8000bd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bda:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bdc:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000be0:	f002 001f 	and.w	r0, r2, #31
 8000be4:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000be8:	43c4      	mvns	r4, r0
 8000bea:	4025      	ands	r5, r4
 8000bec:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bf0:	69cd      	ldr	r5, [r1, #28]
 8000bf2:	bb85      	cbnz	r5, 8000c56 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bf8:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bfa:	4025      	ands	r5, r4
 8000bfc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c00:	888d      	ldrh	r5, [r1, #4]
 8000c02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c06:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c0a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c10:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c12:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c16:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c1a:	698a      	ldr	r2, [r1, #24]
 8000c1c:	bb6a      	cbnz	r2, 8000c7a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c22:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c28:	690a      	ldr	r2, [r1, #16]
 8000c2a:	bb52      	cbnz	r2, 8000c82 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c30:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c36:	6a0a      	ldr	r2, [r1, #32]
 8000c38:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c3a:	bf02      	ittt	eq
 8000c3c:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000c40:	4310      	orreq	r0, r2
 8000c42:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000c46:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c56:	2d01      	cmp	r5, #1
 8000c58:	d1df      	bne.n	8000c1a <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c5a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c5e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c60:	4305      	orrs	r5, r0
 8000c62:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c66:	888d      	ldrh	r5, [r1, #4]
 8000c68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c6c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c70:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c74:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c76:	898d      	ldrh	r5, [r1, #12]
 8000c78:	e7cb      	b.n	8000c12 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c7e:	4302      	orrs	r2, r0
 8000c80:	e7d0      	b.n	8000c24 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c86:	4302      	orrs	r2, r0
 8000c88:	e7d3      	b.n	8000c32 <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000c92:	2001      	movs	r0, #1
 8000c94:	e7de      	b.n	8000c54 <HAL_CAN_ConfigFilter+0x96>

08000c96 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c96:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c98:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000c9c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d11f      	bne.n	8000ce2 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ca2:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ca6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cb2:	f7ff ff03 	bl	8000abc <HAL_GetTick>
 8000cb6:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	6858      	ldr	r0, [r3, #4]
 8000cbc:	f010 0001 	ands.w	r0, r0, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cc2:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc6:	f7ff fef9 	bl	8000abc <HAL_GetTick>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	280a      	cmp	r0, #10
 8000cce:	d9f3      	bls.n	8000cb8 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	e7f0      	b.n	8000cc4 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ce2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce8:	6243      	str	r3, [r0, #36]	; 0x24
 8000cea:	e7f8      	b.n	8000cde <HAL_CAN_Start+0x48>

08000cec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cee:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cf2:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf4:	3d01      	subs	r5, #1
 8000cf6:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cf8:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000cfa:	d840      	bhi.n	8000d7e <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cfc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000d00:	d039      	beq.n	8000d76 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d02:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d06:	2c03      	cmp	r4, #3
 8000d08:	f04f 0501 	mov.w	r5, #1
 8000d0c:	d105      	bne.n	8000d1a <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d14:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000d16:	2001      	movs	r0, #1
 8000d18:	e027      	b.n	8000d6a <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d1a:	40a5      	lsls	r5, r4
 8000d1c:	601d      	str	r5, [r3, #0]
 8000d1e:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000d22:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 8000d26:	bb08      	cbnz	r0, 8000d6c <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d28:	6808      	ldr	r0, [r1, #0]
 8000d2a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d32:	6908      	ldr	r0, [r1, #16]
 8000d34:	0124      	lsls	r4, r4, #4
 8000d36:	1933      	adds	r3, r6, r4
 8000d38:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d3e:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d40:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d42:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d44:	bf02      	ittt	eq
 8000d46:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000d4a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000d4e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d52:	6851      	ldr	r1, [r2, #4]
 8000d54:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d5e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d6c:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000d6e:	4338      	orrs	r0, r7
 8000d70:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000d74:	e7db      	b.n	8000d2e <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7c:	e7ca      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	e7c6      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x28>

08000d86 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d86:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d88:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d8c:	3c01      	subs	r4, #1
 8000d8e:	2c01      	cmp	r4, #1
 8000d90:	d86b      	bhi.n	8000e6a <HAL_CAN_GetRxMessage+0xe4>
 8000d92:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d94:	b941      	cbnz	r1, 8000da8 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d96:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d98:	07a4      	lsls	r4, r4, #30
 8000d9a:	d107      	bne.n	8000dac <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
 8000da6:	e055      	b.n	8000e54 <HAL_CAN_GetRxMessage+0xce>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000da8:	6934      	ldr	r4, [r6, #16]
 8000daa:	e7f5      	b.n	8000d98 <HAL_CAN_GetRxMessage+0x12>
 8000dac:	010c      	lsls	r4, r1, #4
 8000dae:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000db0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000db4:	f007 0704 	and.w	r7, r7, #4
 8000db8:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d14b      	bne.n	8000e56 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000dbe:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000dc2:	0d7f      	lsrs	r7, r7, #21
 8000dc4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dc6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dca:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dcc:	f007 0702 	and.w	r7, r7, #2
 8000dd0:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000dd2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000dd6:	f007 070f 	and.w	r7, r7, #15
 8000dda:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ddc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000de0:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000de4:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000de8:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dea:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dec:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dee:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000df2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000df4:	6802      	ldr	r2, [r0, #0]
 8000df6:	4422      	add	r2, r4
 8000df8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000dfc:	0a12      	lsrs	r2, r2, #8
 8000dfe:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e00:	6802      	ldr	r2, [r0, #0]
 8000e02:	4422      	add	r2, r4
 8000e04:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e08:	0c12      	lsrs	r2, r2, #16
 8000e0a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e0c:	6802      	ldr	r2, [r0, #0]
 8000e0e:	4422      	add	r2, r4
 8000e10:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e14:	0e12      	lsrs	r2, r2, #24
 8000e16:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	4422      	add	r2, r4
 8000e1c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e20:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e22:	6802      	ldr	r2, [r0, #0]
 8000e24:	4422      	add	r2, r4
 8000e26:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e2a:	0a12      	lsrs	r2, r2, #8
 8000e2c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e2e:	6802      	ldr	r2, [r0, #0]
 8000e30:	4422      	add	r2, r4
 8000e32:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e36:	0c12      	lsrs	r2, r2, #16
 8000e38:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e3a:	6802      	ldr	r2, [r0, #0]
 8000e3c:	4414      	add	r4, r2
 8000e3e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000e42:	0e12      	lsrs	r2, r2, #24
 8000e44:	71da      	strb	r2, [r3, #7]
 8000e46:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e48:	b951      	cbnz	r1, 8000e60 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000e52:	2000      	movs	r0, #0
  }
}
 8000e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e56:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000e5a:	08ff      	lsrs	r7, r7, #3
 8000e5c:	6057      	str	r7, [r2, #4]
 8000e5e:	e7b2      	b.n	8000dc6 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	e7f3      	b.n	8000e52 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e70:	e797      	b.n	8000da2 <HAL_CAN_GetRxMessage+0x1c>

08000e72 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e72:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e76:	3b01      	subs	r3, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d805      	bhi.n	8000e88 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e7c:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000e7e:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e80:	6953      	ldr	r3, [r2, #20]
 8000e82:	4319      	orrs	r1, r3
 8000e84:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000e86:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
  }
}
 8000e92:	4770      	bx	lr

08000e94 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000e94:	4770      	bx	lr

08000e96 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000e96:	4770      	bx	lr

08000e98 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000e98:	4770      	bx	lr

08000e9a <HAL_CAN_TxMailbox0AbortCallback>:
 8000e9a:	4770      	bx	lr

08000e9c <HAL_CAN_TxMailbox1AbortCallback>:
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_TxMailbox2AbortCallback>:
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_CAN_RxFifo0FullCallback>:
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_CAN_RxFifo1FullCallback>:
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_CAN_SleepCallback>:
 8000ea8:	4770      	bx	lr

08000eaa <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000eaa:	4770      	bx	lr

08000eac <HAL_CAN_ErrorCallback>:
 8000eac:	4770      	bx	lr

08000eae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000eae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000eb2:	6803      	ldr	r3, [r0, #0]
{
 8000eb4:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000eb6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eb8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ebc:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ec0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ec2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ec6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000eca:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ece:	d022      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ed0:	f017 0401 	ands.w	r4, r7, #1
 8000ed4:	d007      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ed6:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ed8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000eda:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000edc:	f140 80a3 	bpl.w	8001026 <HAL_CAN_IRQHandler+0x178>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ee0:	f7ff ffd8 	bl	8000e94 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ee4:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ee6:	05fb      	lsls	r3, r7, #23
 8000ee8:	d509      	bpl.n	8000efe <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eee:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ef0:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ef2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ef4:	f140 80a5 	bpl.w	8001042 <HAL_CAN_IRQHandler+0x194>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff ffcc 	bl	8000e96 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000efe:	03fb      	lsls	r3, r7, #15
 8000f00:	d509      	bpl.n	8000f16 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f06:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f08:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f0a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f0c:	f140 80a7 	bpl.w	800105e <HAL_CAN_IRQHandler+0x1b0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f10:	4628      	mov	r0, r5
 8000f12:	f7ff ffc1 	bl	8000e98 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f16:	0733      	lsls	r3, r6, #28
 8000f18:	d507      	bpl.n	8000f2a <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f1a:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f1e:	bf1f      	itttt	ne
 8000f20:	2210      	movne	r2, #16
 8000f22:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f24:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f28:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f2a:	0777      	lsls	r7, r6, #29
 8000f2c:	d508      	bpl.n	8000f40 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f2e:	f01b 0f08 	tst.w	fp, #8
 8000f32:	d005      	beq.n	8000f40 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f34:	2208      	movs	r2, #8
 8000f36:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f38:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f3a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f3c:	f7ff ffb1 	bl	8000ea2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f40:	07b0      	lsls	r0, r6, #30
 8000f42:	d506      	bpl.n	8000f52 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0799      	lsls	r1, r3, #30
 8000f4a:	d002      	beq.n	8000f52 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f7ff ffa7 	bl	8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f52:	0672      	lsls	r2, r6, #25
 8000f54:	d507      	bpl.n	8000f66 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f56:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f5a:	bf1f      	itttt	ne
 8000f5c:	2210      	movne	r2, #16
 8000f5e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f60:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f64:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f66:	06b3      	lsls	r3, r6, #26
 8000f68:	d508      	bpl.n	8000f7c <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f6a:	f01a 0f08 	tst.w	sl, #8
 8000f6e:	d005      	beq.n	8000f7c <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f70:	2208      	movs	r2, #8
 8000f72:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f74:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f76:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f78:	f7ff ff95 	bl	8000ea6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f7c:	06f7      	lsls	r7, r6, #27
 8000f7e:	d506      	bpl.n	8000f8e <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	0798      	lsls	r0, r3, #30
 8000f86:	d002      	beq.n	8000f8e <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f88:	4628      	mov	r0, r5
 8000f8a:	f7ff ff8b 	bl	8000ea4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f8e:	03b1      	lsls	r1, r6, #14
 8000f90:	d508      	bpl.n	8000fa4 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f92:	f019 0f10 	tst.w	r9, #16
 8000f96:	d005      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f98:	2210      	movs	r2, #16
 8000f9a:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f9c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f9e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000fa0:	f7ff ff82 	bl	8000ea8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fa4:	03f2      	lsls	r2, r6, #15
 8000fa6:	d508      	bpl.n	8000fba <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fa8:	f019 0f08 	tst.w	r9, #8
 8000fac:	d005      	beq.n	8000fba <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fae:	2208      	movs	r2, #8
 8000fb0:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fb2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fb4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fb6:	f7ff ff78 	bl	8000eaa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fba:	0433      	lsls	r3, r6, #16
 8000fbc:	d52a      	bpl.n	8001014 <HAL_CAN_IRQHandler+0x166>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fbe:	f019 0f04 	tst.w	r9, #4
 8000fc2:	682a      	ldr	r2, [r5, #0]
 8000fc4:	d024      	beq.n	8001010 <HAL_CAN_IRQHandler+0x162>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fc6:	05f7      	lsls	r7, r6, #23
 8000fc8:	d504      	bpl.n	8000fd4 <HAL_CAN_IRQHandler+0x126>
 8000fca:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000fce:	bf18      	it	ne
 8000fd0:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000fd4:	05b0      	lsls	r0, r6, #22
 8000fd6:	d504      	bpl.n	8000fe2 <HAL_CAN_IRQHandler+0x134>
 8000fd8:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000fdc:	bf18      	it	ne
 8000fde:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000fe2:	0571      	lsls	r1, r6, #21
 8000fe4:	d504      	bpl.n	8000ff0 <HAL_CAN_IRQHandler+0x142>
 8000fe6:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000fea:	bf18      	it	ne
 8000fec:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ff0:	0533      	lsls	r3, r6, #20
 8000ff2:	d50d      	bpl.n	8001010 <HAL_CAN_IRQHandler+0x162>
 8000ff4:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000ff8:	d00a      	beq.n	8001010 <HAL_CAN_IRQHandler+0x162>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ffa:	2b30      	cmp	r3, #48	; 0x30
 8000ffc:	d04c      	beq.n	8001098 <HAL_CAN_IRQHandler+0x1ea>
 8000ffe:	d83c      	bhi.n	800107a <HAL_CAN_IRQHandler+0x1cc>
 8001000:	2b10      	cmp	r3, #16
 8001002:	d043      	beq.n	800108c <HAL_CAN_IRQHandler+0x1de>
 8001004:	2b20      	cmp	r3, #32
 8001006:	d044      	beq.n	8001092 <HAL_CAN_IRQHandler+0x1e4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001008:	6993      	ldr	r3, [r2, #24]
 800100a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800100e:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001010:	2304      	movs	r3, #4
 8001012:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001014:	b12c      	cbz	r4, 8001022 <HAL_CAN_IRQHandler+0x174>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001018:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800101a:	431c      	orrs	r4, r3
 800101c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800101e:	f7ff ff45 	bl	8000eac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001026:	077a      	lsls	r2, r7, #29
 8001028:	d405      	bmi.n	8001036 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800102a:	f017 0408 	ands.w	r4, r7, #8
 800102e:	d105      	bne.n	800103c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001030:	f7ff ff33 	bl	8000e9a <HAL_CAN_TxMailbox0AbortCallback>
 8001034:	e757      	b.n	8000ee6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001036:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800103a:	e754      	b.n	8000ee6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800103c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001040:	e751      	b.n	8000ee6 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001042:	0579      	lsls	r1, r7, #21
 8001044:	d502      	bpl.n	800104c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001046:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800104a:	e758      	b.n	8000efe <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800104c:	053a      	lsls	r2, r7, #20
 800104e:	d502      	bpl.n	8001056 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001050:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001054:	e753      	b.n	8000efe <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff ff20 	bl	8000e9c <HAL_CAN_TxMailbox1AbortCallback>
 800105c:	e74f      	b.n	8000efe <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800105e:	0379      	lsls	r1, r7, #13
 8001060:	d502      	bpl.n	8001068 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001062:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001066:	e756      	b.n	8000f16 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001068:	033a      	lsls	r2, r7, #12
 800106a:	d502      	bpl.n	8001072 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800106c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8001070:	e751      	b.n	8000f16 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001072:	4628      	mov	r0, r5
 8001074:	f7ff ff13 	bl	8000e9e <HAL_CAN_TxMailbox2AbortCallback>
 8001078:	e74d      	b.n	8000f16 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 800107a:	2b50      	cmp	r3, #80	; 0x50
 800107c:	d00f      	beq.n	800109e <HAL_CAN_IRQHandler+0x1f0>
 800107e:	2b60      	cmp	r3, #96	; 0x60
 8001080:	d010      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x1f6>
 8001082:	2b40      	cmp	r3, #64	; 0x40
 8001084:	d1c0      	bne.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001086:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 800108a:	e7bd      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 800108c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8001090:	e7ba      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001092:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001096:	e7b7      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001098:	f044 0420 	orr.w	r4, r4, #32
            break;
 800109c:	e7b4      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800109e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80010a2:	e7b1      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010a4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80010a8:	e7ae      	b.n	8001008 <HAL_CAN_IRQHandler+0x15a>
	...

080010ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010c8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b570      	push	{r4, r5, r6, lr}
 80010d4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010da:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010de:	f1c4 0507 	rsb	r5, r4, #7
 80010e2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	bf28      	it	cs
 80010ea:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	bf98      	it	ls
 80010f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	bf88      	it	hi
 80010f8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fa:	ea21 0303 	bic.w	r3, r1, r3
 80010fe:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	fa06 f404 	lsl.w	r4, r6, r4
 8001104:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001108:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	bfa8      	it	ge
 8001110:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001114:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	bfb8      	it	lt
 800111a:	4a06      	ldrlt	r2, [pc, #24]	; (8001134 <HAL_NVIC_SetPriority+0x64>)
 800111c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	bfab      	itete	ge
 8001120:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	e000ed14 	.word	0xe000ed14

08001138 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001138:	2800      	cmp	r0, #0
 800113a:	db08      	blt.n	800114e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113c:	2301      	movs	r3, #1
 800113e:	0942      	lsrs	r2, r0, #5
 8001140:	f000 001f 	and.w	r0, r0, #31
 8001144:	fa03 f000 	lsl.w	r0, r3, r0
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <HAL_NVIC_EnableIRQ+0x18>)
 800114a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	3801      	subs	r0, #1
 8001156:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800115a:	d20a      	bcs.n	8001172 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001184:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001186:	4626      	mov	r6, r4
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001330 <HAL_GPIO_Init+0x1b0>
 800118e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001334 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	680a      	ldr	r2, [r1, #0]
 8001194:	fa32 f506 	lsrs.w	r5, r2, r6
 8001198:	d102      	bne.n	80011a0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800119a:	b003      	add	sp, #12
 800119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80011a0:	f04f 0801 	mov.w	r8, #1
 80011a4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80011ac:	4590      	cmp	r8, r2
 80011ae:	d17e      	bne.n	80012ae <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80011b0:	684d      	ldr	r5, [r1, #4]
 80011b2:	2d12      	cmp	r5, #18
 80011b4:	f000 80a9 	beq.w	800130a <HAL_GPIO_Init+0x18a>
 80011b8:	f200 8082 	bhi.w	80012c0 <HAL_GPIO_Init+0x140>
 80011bc:	2d02      	cmp	r5, #2
 80011be:	f000 80a1 	beq.w	8001304 <HAL_GPIO_Init+0x184>
 80011c2:	d876      	bhi.n	80012b2 <HAL_GPIO_Init+0x132>
 80011c4:	2d00      	cmp	r5, #0
 80011c6:	f000 8088 	beq.w	80012da <HAL_GPIO_Init+0x15a>
 80011ca:	2d01      	cmp	r5, #1
 80011cc:	f000 8098 	beq.w	8001300 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d4:	2aff      	cmp	r2, #255	; 0xff
 80011d6:	bf93      	iteet	ls
 80011d8:	4682      	movls	sl, r0
 80011da:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80011de:	3d08      	subhi	r5, #8
 80011e0:	f8d0 b000 	ldrls.w	fp, [r0]
 80011e4:	bf92      	itee	ls
 80011e6:	00b5      	lslls	r5, r6, #2
 80011e8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80011ec:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ee:	fa09 f805 	lsl.w	r8, r9, r5
 80011f2:	ea2b 0808 	bic.w	r8, fp, r8
 80011f6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fa:	bf88      	it	hi
 80011fc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001200:	ea48 0505 	orr.w	r5, r8, r5
 8001204:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001208:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800120c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001210:	d04d      	beq.n	80012ae <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001212:	4f44      	ldr	r7, [pc, #272]	; (8001324 <HAL_GPIO_Init+0x1a4>)
 8001214:	f026 0803 	bic.w	r8, r6, #3
 8001218:	69bd      	ldr	r5, [r7, #24]
 800121a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800121e:	f045 0501 	orr.w	r5, r5, #1
 8001222:	61bd      	str	r5, [r7, #24]
 8001224:	69bd      	ldr	r5, [r7, #24]
 8001226:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800122a:	f005 0501 	and.w	r5, r5, #1
 800122e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001230:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001234:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001236:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800123a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001242:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001246:	4d38      	ldr	r5, [pc, #224]	; (8001328 <HAL_GPIO_Init+0x1a8>)
 8001248:	42a8      	cmp	r0, r5
 800124a:	d063      	beq.n	8001314 <HAL_GPIO_Init+0x194>
 800124c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001250:	42a8      	cmp	r0, r5
 8001252:	d061      	beq.n	8001318 <HAL_GPIO_Init+0x198>
 8001254:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001258:	42a8      	cmp	r0, r5
 800125a:	d05f      	beq.n	800131c <HAL_GPIO_Init+0x19c>
 800125c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001260:	42a8      	cmp	r0, r5
 8001262:	bf0c      	ite	eq
 8001264:	2503      	moveq	r5, #3
 8001266:	2504      	movne	r5, #4
 8001268:	fa05 f50b 	lsl.w	r5, r5, fp
 800126c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001270:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001274:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001276:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800127a:	bf14      	ite	ne
 800127c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800127e:	4395      	biceq	r5, r2
 8001280:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001282:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001288:	bf14      	ite	ne
 800128a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800128c:	4395      	biceq	r5, r2
 800128e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001290:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001292:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001296:	bf14      	ite	ne
 8001298:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129a:	4395      	biceq	r5, r2
 800129c:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800129e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80012a4:	bf14      	ite	ne
 80012a6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a8:	ea25 0202 	biceq.w	r2, r5, r2
 80012ac:	60da      	str	r2, [r3, #12]
	position++;
 80012ae:	3601      	adds	r6, #1
 80012b0:	e76f      	b.n	8001192 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80012b2:	2d03      	cmp	r5, #3
 80012b4:	d022      	beq.n	80012fc <HAL_GPIO_Init+0x17c>
 80012b6:	2d11      	cmp	r5, #17
 80012b8:	d18a      	bne.n	80011d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012ba:	68cc      	ldr	r4, [r1, #12]
 80012bc:	3404      	adds	r4, #4
          break;
 80012be:	e787      	b.n	80011d0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80012c0:	4f1a      	ldr	r7, [pc, #104]	; (800132c <HAL_GPIO_Init+0x1ac>)
 80012c2:	42bd      	cmp	r5, r7
 80012c4:	d009      	beq.n	80012da <HAL_GPIO_Init+0x15a>
 80012c6:	d812      	bhi.n	80012ee <HAL_GPIO_Init+0x16e>
 80012c8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001338 <HAL_GPIO_Init+0x1b8>
 80012cc:	454d      	cmp	r5, r9
 80012ce:	d004      	beq.n	80012da <HAL_GPIO_Init+0x15a>
 80012d0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80012d4:	454d      	cmp	r5, r9
 80012d6:	f47f af7b 	bne.w	80011d0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012da:	688c      	ldr	r4, [r1, #8]
 80012dc:	b1c4      	cbz	r4, 8001310 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012de:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80012e0:	bf0c      	ite	eq
 80012e2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80012e6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ea:	2408      	movs	r4, #8
 80012ec:	e770      	b.n	80011d0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80012ee:	4565      	cmp	r5, ip
 80012f0:	d0f3      	beq.n	80012da <HAL_GPIO_Init+0x15a>
 80012f2:	4575      	cmp	r5, lr
 80012f4:	d0f1      	beq.n	80012da <HAL_GPIO_Init+0x15a>
 80012f6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800133c <HAL_GPIO_Init+0x1bc>
 80012fa:	e7eb      	b.n	80012d4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2400      	movs	r4, #0
 80012fe:	e767      	b.n	80011d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	68cc      	ldr	r4, [r1, #12]
          break;
 8001302:	e765      	b.n	80011d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001304:	68cc      	ldr	r4, [r1, #12]
 8001306:	3408      	adds	r4, #8
          break;
 8001308:	e762      	b.n	80011d0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130a:	68cc      	ldr	r4, [r1, #12]
 800130c:	340c      	adds	r4, #12
          break;
 800130e:	e75f      	b.n	80011d0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001310:	2404      	movs	r4, #4
 8001312:	e75d      	b.n	80011d0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001314:	2500      	movs	r5, #0
 8001316:	e7a7      	b.n	8001268 <HAL_GPIO_Init+0xe8>
 8001318:	2501      	movs	r5, #1
 800131a:	e7a5      	b.n	8001268 <HAL_GPIO_Init+0xe8>
 800131c:	2502      	movs	r5, #2
 800131e:	e7a3      	b.n	8001268 <HAL_GPIO_Init+0xe8>
 8001320:	40010400 	.word	0x40010400
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800
 800132c:	10210000 	.word	0x10210000
 8001330:	10310000 	.word	0x10310000
 8001334:	10320000 	.word	0x10320000
 8001338:	10110000 	.word	0x10110000
 800133c:	10220000 	.word	0x10220000

08001340 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001340:	b10a      	cbz	r2, 8001346 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	6101      	str	r1, [r0, #16]
  }
}
 8001344:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001346:	0409      	lsls	r1, r1, #16
 8001348:	e7fb      	b.n	8001342 <HAL_GPIO_WritePin+0x2>

0800134a <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_EXTI_IRQHandler>:
{
 800134c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001350:	6959      	ldr	r1, [r3, #20]
 8001352:	4201      	tst	r1, r0
 8001354:	d002      	beq.n	800135c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001356:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001358:	f7ff fff7 	bl	800134a <HAL_GPIO_EXTI_Callback>
}
 800135c:	bd08      	pop	{r3, pc}
 800135e:	bf00      	nop
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001368:	4605      	mov	r5, r0
 800136a:	b908      	cbnz	r0, 8001370 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e03c      	b.n	80013ea <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	6803      	ldr	r3, [r0, #0]
 8001372:	07db      	lsls	r3, r3, #31
 8001374:	d410      	bmi.n	8001398 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	079f      	lsls	r7, r3, #30
 800137a:	d45d      	bmi.n	8001438 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	0719      	lsls	r1, r3, #28
 8001380:	f100 8094 	bmi.w	80014ac <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	075a      	lsls	r2, r3, #29
 8001388:	f100 80be 	bmi.w	8001508 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138c:	69e8      	ldr	r0, [r5, #28]
 800138e:	2800      	cmp	r0, #0
 8001390:	f040 812c 	bne.w	80015ec <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001394:	2000      	movs	r0, #0
 8001396:	e028      	b.n	80013ea <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001398:	4c8f      	ldr	r4, [pc, #572]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d007      	beq.n	80013b4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a4:	6863      	ldr	r3, [r4, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	03de      	lsls	r6, r3, #15
 80013b2:	d506      	bpl.n	80013c2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	039c      	lsls	r4, r3, #14
 80013b8:	d5dd      	bpl.n	8001376 <HAL_RCC_OscConfig+0x12>
 80013ba:	686b      	ldr	r3, [r5, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1da      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
 80013c0:	e7d4      	b.n	800136c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	686b      	ldr	r3, [r5, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d112      	bne.n	80013f0 <HAL_RCC_OscConfig+0x8c>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb73 	bl	8000abc <HAL_GetTick>
 80013d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	0398      	lsls	r0, r3, #14
 80013dc:	d4cb      	bmi.n	8001376 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fb6d 	bl	8000abc <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2864      	cmp	r0, #100	; 0x64
 80013e6:	d9f7      	bls.n	80013d8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
}
 80013ea:	b002      	add	sp, #8
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	b99b      	cbnz	r3, 800141a <HAL_RCC_OscConfig+0xb6>
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001402:	f7ff fb5b 	bl	8000abc <HAL_GetTick>
 8001406:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	0399      	lsls	r1, r3, #14
 800140c:	d5b3      	bpl.n	8001376 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140e:	f7ff fb55 	bl	8000abc <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2864      	cmp	r0, #100	; 0x64
 8001416:	d9f7      	bls.n	8001408 <HAL_RCC_OscConfig+0xa4>
 8001418:	e7e6      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	d103      	bne.n	800142a <HAL_RCC_OscConfig+0xc6>
 8001422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	e7cf      	b.n	80013ca <HAL_RCC_OscConfig+0x66>
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6023      	str	r3, [r4, #0]
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	e7cb      	b.n	80013d0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001438:	4c67      	ldr	r4, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	f013 0f0c 	tst.w	r3, #12
 8001440:	d007      	beq.n	8001452 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d110      	bne.n	800146e <HAL_RCC_OscConfig+0x10a>
 800144c:	6863      	ldr	r3, [r4, #4]
 800144e:	03da      	lsls	r2, r3, #15
 8001450:	d40d      	bmi.n	800146e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	079b      	lsls	r3, r3, #30
 8001456:	d502      	bpl.n	800145e <HAL_RCC_OscConfig+0xfa>
 8001458:	692b      	ldr	r3, [r5, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d186      	bne.n	800136c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	696a      	ldr	r2, [r5, #20]
 8001462:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001466:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	e786      	b.n	800137c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146e:	692a      	ldr	r2, [r5, #16]
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <HAL_RCC_OscConfig+0x278>)
 8001472:	b16a      	cbz	r2, 8001490 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001478:	f7ff fb20 	bl	8000abc <HAL_GetTick>
 800147c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	079f      	lsls	r7, r3, #30
 8001482:	d4ec      	bmi.n	800145e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fb1a 	bl	8000abc <HAL_GetTick>
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f7      	bls.n	800147e <HAL_RCC_OscConfig+0x11a>
 800148e:	e7ab      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001490:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001492:	f7ff fb13 	bl	8000abc <HAL_GetTick>
 8001496:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	0798      	lsls	r0, r3, #30
 800149c:	f57f af6e 	bpl.w	800137c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb0c 	bl	8000abc <HAL_GetTick>
 80014a4:	1b80      	subs	r0, r0, r6
 80014a6:	2802      	cmp	r0, #2
 80014a8:	d9f6      	bls.n	8001498 <HAL_RCC_OscConfig+0x134>
 80014aa:	e79d      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ac:	69aa      	ldr	r2, [r5, #24]
 80014ae:	4c4a      	ldr	r4, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_RCC_OscConfig+0x27c>)
 80014b2:	b1da      	cbz	r2, 80014ec <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014b8:	f7ff fb00 	bl	8000abc <HAL_GetTick>
 80014bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014c0:	079b      	lsls	r3, r3, #30
 80014c2:	d50d      	bpl.n	80014e0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x280>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80014d0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80014d2:	bf00      	nop
  }
  while (Delay --);
 80014d4:	9b01      	ldr	r3, [sp, #4]
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f9      	bne.n	80014d2 <HAL_RCC_OscConfig+0x16e>
 80014de:	e751      	b.n	8001384 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff faec 	bl	8000abc <HAL_GetTick>
 80014e4:	1b80      	subs	r0, r0, r6
 80014e6:	2802      	cmp	r0, #2
 80014e8:	d9e9      	bls.n	80014be <HAL_RCC_OscConfig+0x15a>
 80014ea:	e77d      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80014ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014ee:	f7ff fae5 	bl	8000abc <HAL_GetTick>
 80014f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014f6:	079f      	lsls	r7, r3, #30
 80014f8:	f57f af44 	bpl.w	8001384 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fade 	bl	8000abc <HAL_GetTick>
 8001500:	1b80      	subs	r0, r0, r6
 8001502:	2802      	cmp	r0, #2
 8001504:	d9f6      	bls.n	80014f4 <HAL_RCC_OscConfig+0x190>
 8001506:	e76f      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001508:	4c33      	ldr	r4, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800150a:	69e3      	ldr	r3, [r4, #28]
 800150c:	00d8      	lsls	r0, r3, #3
 800150e:	d424      	bmi.n	800155a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001510:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	69e3      	ldr	r3, [r4, #28]
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61e3      	str	r3, [r4, #28]
 800151a:	69e3      	ldr	r3, [r4, #28]
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4e30      	ldr	r6, [pc, #192]	; (80015e8 <HAL_RCC_OscConfig+0x284>)
 8001526:	6833      	ldr	r3, [r6, #0]
 8001528:	05d9      	lsls	r1, r3, #23
 800152a:	d518      	bpl.n	800155e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152c:	68eb      	ldr	r3, [r5, #12]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d126      	bne.n	8001580 <HAL_RCC_OscConfig+0x21c>
 8001532:	6a23      	ldr	r3, [r4, #32]
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800153a:	f7ff fabf 	bl	8000abc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001542:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	6a23      	ldr	r3, [r4, #32]
 8001546:	079b      	lsls	r3, r3, #30
 8001548:	d53f      	bpl.n	80015ca <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800154a:	2f00      	cmp	r7, #0
 800154c:	f43f af1e 	beq.w	800138c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	69e3      	ldr	r3, [r4, #28]
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001556:	61e3      	str	r3, [r4, #28]
 8001558:	e718      	b.n	800138c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2700      	movs	r7, #0
 800155c:	e7e2      	b.n	8001524 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	6833      	ldr	r3, [r6, #0]
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001566:	f7ff faa9 	bl	8000abc <HAL_GetTick>
 800156a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	6833      	ldr	r3, [r6, #0]
 800156e:	05da      	lsls	r2, r3, #23
 8001570:	d4dc      	bmi.n	800152c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff faa3 	bl	8000abc <HAL_GetTick>
 8001576:	eba0 0008 	sub.w	r0, r0, r8
 800157a:	2864      	cmp	r0, #100	; 0x64
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x208>
 800157e:	e733      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	b9ab      	cbnz	r3, 80015ae <HAL_RCC_OscConfig+0x24a>
 8001582:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6223      	str	r3, [r4, #32]
 800158e:	6a23      	ldr	r3, [r4, #32]
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001596:	f7ff fa91 	bl	8000abc <HAL_GetTick>
 800159a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	6a23      	ldr	r3, [r4, #32]
 800159e:	0798      	lsls	r0, r3, #30
 80015a0:	d5d3      	bpl.n	800154a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa8b 	bl	8000abc <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	4540      	cmp	r0, r8
 80015aa:	d9f7      	bls.n	800159c <HAL_RCC_OscConfig+0x238>
 80015ac:	e71c      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	6a23      	ldr	r3, [r4, #32]
 80015b2:	d103      	bne.n	80015bc <HAL_RCC_OscConfig+0x258>
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6223      	str	r3, [r4, #32]
 80015ba:	e7ba      	b.n	8001532 <HAL_RCC_OscConfig+0x1ce>
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6223      	str	r3, [r4, #32]
 80015c2:	6a23      	ldr	r3, [r4, #32]
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	e7b6      	b.n	8001538 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fa77 	bl	8000abc <HAL_GetTick>
 80015ce:	eba0 0008 	sub.w	r0, r0, r8
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	d9b6      	bls.n	8001544 <HAL_RCC_OscConfig+0x1e0>
 80015d6:	e707      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42420000 	.word	0x42420000
 80015e0:	42420480 	.word	0x42420480
 80015e4:	20000040 	.word	0x20000040
 80015e8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x334>)
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	461c      	mov	r4, r3
 80015f2:	f002 020c 	and.w	r2, r2, #12
 80015f6:	2a08      	cmp	r2, #8
 80015f8:	d03d      	beq.n	8001676 <HAL_RCC_OscConfig+0x312>
 80015fa:	2300      	movs	r3, #0
 80015fc:	4e27      	ldr	r6, [pc, #156]	; (800169c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001600:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	d12b      	bne.n	800165c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001604:	f7ff fa5a 	bl	8000abc <HAL_GetTick>
 8001608:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	0199      	lsls	r1, r3, #6
 800160e:	d41f      	bmi.n	8001650 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001610:	6a2b      	ldr	r3, [r5, #32]
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	68a9      	ldr	r1, [r5, #8]
 800161c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001620:	430a      	orrs	r2, r1
 8001622:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001624:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001626:	6862      	ldr	r2, [r4, #4]
 8001628:	430b      	orrs	r3, r1
 800162a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800162e:	4313      	orrs	r3, r2
 8001630:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001632:	2301      	movs	r3, #1
 8001634:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001636:	f7ff fa41 	bl	8000abc <HAL_GetTick>
 800163a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	019a      	lsls	r2, r3, #6
 8001640:	f53f aea8 	bmi.w	8001394 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff fa3a 	bl	8000abc <HAL_GetTick>
 8001648:	1b40      	subs	r0, r0, r5
 800164a:	2802      	cmp	r0, #2
 800164c:	d9f6      	bls.n	800163c <HAL_RCC_OscConfig+0x2d8>
 800164e:	e6cb      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fa34 	bl	8000abc <HAL_GetTick>
 8001654:	1bc0      	subs	r0, r0, r7
 8001656:	2802      	cmp	r0, #2
 8001658:	d9d7      	bls.n	800160a <HAL_RCC_OscConfig+0x2a6>
 800165a:	e6c5      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800165c:	f7ff fa2e 	bl	8000abc <HAL_GetTick>
 8001660:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	019b      	lsls	r3, r3, #6
 8001666:	f57f ae95 	bpl.w	8001394 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fa27 	bl	8000abc <HAL_GetTick>
 800166e:	1b40      	subs	r0, r0, r5
 8001670:	2802      	cmp	r0, #2
 8001672:	d9f6      	bls.n	8001662 <HAL_RCC_OscConfig+0x2fe>
 8001674:	e6b8      	b.n	80013e8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001676:	2801      	cmp	r0, #1
 8001678:	f43f aeb7 	beq.w	80013ea <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800167c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	6a2b      	ldr	r3, [r5, #32]
 8001680:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001684:	429a      	cmp	r2, r3
 8001686:	f47f ae71 	bne.w	800136c <HAL_RCC_OscConfig+0x8>
 800168a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800168c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001690:	1ac0      	subs	r0, r0, r3
 8001692:	bf18      	it	ne
 8001694:	2001      	movne	r0, #1
 8001696:	e6a8      	b.n	80013ea <HAL_RCC_OscConfig+0x86>
 8001698:	40021000 	.word	0x40021000
 800169c:	42420060 	.word	0x42420060

080016a0 <HAL_RCC_GetSysClockFreq>:
{
 80016a0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80016a4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016a6:	ac02      	add	r4, sp, #8
 80016a8:	f103 0510 	add.w	r5, r3, #16
 80016ac:	4622      	mov	r2, r4
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	3308      	adds	r3, #8
 80016b4:	c203      	stmia	r2!, {r0, r1}
 80016b6:	42ab      	cmp	r3, r5
 80016b8:	4614      	mov	r4, r2
 80016ba:	d1f7      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016bc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80016c0:	4913      	ldr	r1, [pc, #76]	; (8001710 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80016c6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016c8:	f003 020c 	and.w	r2, r3, #12
 80016cc:	2a04      	cmp	r2, #4
 80016ce:	d01b      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x68>
 80016d0:	2a08      	cmp	r2, #8
 80016d2:	d002      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSI_VALUE;
 80016d4:	480f      	ldr	r0, [pc, #60]	; (8001714 <HAL_RCC_GetSysClockFreq+0x74>)
}
 80016d6:	b007      	add	sp, #28
 80016d8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016da:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80016de:	a806      	add	r0, sp, #24
 80016e0:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e8:	d50b      	bpl.n	8001702 <HAL_RCC_GetSysClockFreq+0x62>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ea:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <HAL_RCC_GetSysClockFreq+0x78>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ee:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f2:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016f4:	aa06      	add	r2, sp, #24
 80016f6:	4413      	add	r3, r2
 80016f8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001700:	e7e9      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001704:	4350      	muls	r0, r2
 8001706:	e7e6      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <HAL_RCC_GetSysClockFreq+0x78>)
  return sysclockfreq;
 800170a:	e7e4      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
 800170c:	08002494 	.word	0x08002494
 8001710:	40021000 	.word	0x40021000
 8001714:	007a1200 	.word	0x007a1200
 8001718:	00f42400 	.word	0x00f42400
 800171c:	003d0900 	.word	0x003d0900

08001720 <HAL_RCC_ClockConfig>:
{
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001724:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001726:	4604      	mov	r4, r0
 8001728:	b910      	cbnz	r0, 8001730 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800172a:	2001      	movs	r0, #1
}
 800172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4a44      	ldr	r2, [pc, #272]	; (8001844 <HAL_RCC_ClockConfig+0x124>)
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	428b      	cmp	r3, r1
 800173a:	d328      	bcc.n	800178e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	6821      	ldr	r1, [r4, #0]
 800173e:	078e      	lsls	r6, r1, #30
 8001740:	d430      	bmi.n	80017a4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	07ca      	lsls	r2, r1, #31
 8001744:	d443      	bmi.n	80017ce <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001746:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_RCC_ClockConfig+0x124>)
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	42ab      	cmp	r3, r5
 8001750:	d865      	bhi.n	800181e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	6822      	ldr	r2, [r4, #0]
 8001754:	4d3c      	ldr	r5, [pc, #240]	; (8001848 <HAL_RCC_ClockConfig+0x128>)
 8001756:	f012 0f04 	tst.w	r2, #4
 800175a:	d16c      	bne.n	8001836 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	0713      	lsls	r3, r2, #28
 800175e:	d506      	bpl.n	800176e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001760:	686b      	ldr	r3, [r5, #4]
 8001762:	6922      	ldr	r2, [r4, #16]
 8001764:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001768:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800176c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176e:	f7ff ff97 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8001772:	686b      	ldr	r3, [r5, #4]
 8001774:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_RCC_ClockConfig+0x12c>)
 8001776:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	40d8      	lsrs	r0, r3
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_ClockConfig+0x130>)
 8001780:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_ClockConfig+0x134>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f7ff f957 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 800178a:	2000      	movs	r0, #0
 800178c:	e7ce      	b.n	800172c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f023 0307 	bic.w	r3, r3, #7
 8001794:	430b      	orrs	r3, r1
 8001796:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	428b      	cmp	r3, r1
 80017a0:	d1c3      	bne.n	800172a <HAL_RCC_ClockConfig+0xa>
 80017a2:	e7cb      	b.n	800173c <HAL_RCC_ClockConfig+0x1c>
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017aa:	bf1e      	ittt	ne
 80017ac:	685a      	ldrne	r2, [r3, #4]
 80017ae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80017b2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b6:	bf42      	ittt	mi
 80017b8:	685a      	ldrmi	r2, [r3, #4]
 80017ba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80017be:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	68a0      	ldr	r0, [r4, #8]
 80017c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017c8:	4302      	orrs	r2, r0
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e7b9      	b.n	8001742 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	6862      	ldr	r2, [r4, #4]
 80017d0:	4e1d      	ldr	r6, [pc, #116]	; (8001848 <HAL_RCC_ClockConfig+0x128>)
 80017d2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	d11a      	bne.n	800180e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	d0a5      	beq.n	800172a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e4:	f023 0303 	bic.w	r3, r3, #3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80017ec:	f7ff f966 	bl	8000abc <HAL_GetTick>
 80017f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	6873      	ldr	r3, [r6, #4]
 80017f4:	6862      	ldr	r2, [r4, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017fe:	d0a2      	beq.n	8001746 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff f95c 	bl	8000abc <HAL_GetTick>
 8001804:	1bc0      	subs	r0, r0, r7
 8001806:	4540      	cmp	r0, r8
 8001808:	d9f3      	bls.n	80017f2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800180a:	2003      	movs	r0, #3
 800180c:	e78e      	b.n	800172c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180e:	2a02      	cmp	r2, #2
 8001810:	d102      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001816:	e7e1      	b.n	80017dc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	f013 0f02 	tst.w	r3, #2
 800181c:	e7de      	b.n	80017dc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	f023 0307 	bic.w	r3, r3, #7
 8001824:	432b      	orrs	r3, r5
 8001826:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	42ab      	cmp	r3, r5
 8001830:	f47f af7b 	bne.w	800172a <HAL_RCC_ClockConfig+0xa>
 8001834:	e78d      	b.n	8001752 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001836:	686b      	ldr	r3, [r5, #4]
 8001838:	68e1      	ldr	r1, [r4, #12]
 800183a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800183e:	430b      	orrs	r3, r1
 8001840:	606b      	str	r3, [r5, #4]
 8001842:	e78b      	b.n	800175c <HAL_RCC_ClockConfig+0x3c>
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	080024a4 	.word	0x080024a4
 8001850:	20000040 	.word	0x20000040
 8001854:	20000004 	.word	0x20000004

08001858 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001858:	6a03      	ldr	r3, [r0, #32]
{
 800185a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001862:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001864:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001866:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001868:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800186a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800186e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001870:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001872:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001876:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001878:	4d0a      	ldr	r5, [pc, #40]	; (80018a4 <TIM_OC1_SetConfig+0x4c>)
 800187a:	42a8      	cmp	r0, r5
 800187c:	d10b      	bne.n	8001896 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800187e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001880:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001884:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001886:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800188a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800188e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001890:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001894:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001896:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001898:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800189a:	684a      	ldr	r2, [r1, #4]
 800189c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800189e:	6203      	str	r3, [r0, #32]
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop
 80018a4:	40012c00 	.word	0x40012c00

080018a8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018a8:	6a03      	ldr	r3, [r0, #32]
{
 80018aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80018ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80018c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80018ca:	4d0b      	ldr	r5, [pc, #44]	; (80018f8 <TIM_OC3_SetConfig+0x50>)
 80018cc:	42a8      	cmp	r0, r5
 80018ce:	d10d      	bne.n	80018ec <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018d0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80018d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80018da:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018de:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80018e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80018e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018e8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018ee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80018f0:	684a      	ldr	r2, [r1, #4]
 80018f2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018f4:	6203      	str	r3, [r0, #32]
}
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	40012c00 	.word	0x40012c00

080018fc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80018fc:	6a03      	ldr	r3, [r0, #32]
{
 80018fe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001904:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001906:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001908:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800190a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800190c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800190e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001912:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001916:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800191c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001920:	4d06      	ldr	r5, [pc, #24]	; (800193c <TIM_OC4_SetConfig+0x40>)
 8001922:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001924:	bf02      	ittt	eq
 8001926:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001928:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800192c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001930:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001932:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001934:	684a      	ldr	r2, [r1, #4]
 8001936:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001938:	6203      	str	r3, [r0, #32]
}
 800193a:	bd30      	pop	{r4, r5, pc}
 800193c:	40012c00 	.word	0x40012c00

08001940 <HAL_TIM_PWM_MspInit>:
 8001940:	4770      	bx	lr
	...

08001944 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001946:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001948:	4290      	cmp	r0, r2
 800194a:	d00a      	beq.n	8001962 <TIM_Base_SetConfig+0x1e>
 800194c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001950:	d007      	beq.n	8001962 <TIM_Base_SetConfig+0x1e>
 8001952:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001956:	4290      	cmp	r0, r2
 8001958:	d003      	beq.n	8001962 <TIM_Base_SetConfig+0x1e>
 800195a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195e:	4290      	cmp	r0, r2
 8001960:	d115      	bne.n	800198e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001962:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001968:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <TIM_Base_SetConfig+0x6c>)
 800196c:	4290      	cmp	r0, r2
 800196e:	d00a      	beq.n	8001986 <TIM_Base_SetConfig+0x42>
 8001970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001974:	d007      	beq.n	8001986 <TIM_Base_SetConfig+0x42>
 8001976:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800197a:	4290      	cmp	r0, r2
 800197c:	d003      	beq.n	8001986 <TIM_Base_SetConfig+0x42>
 800197e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001982:	4290      	cmp	r0, r2
 8001984:	d103      	bne.n	800198e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001986:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800198c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800198e:	694a      	ldr	r2, [r1, #20]
 8001990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001994:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001996:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001998:	688b      	ldr	r3, [r1, #8]
 800199a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800199c:	680b      	ldr	r3, [r1, #0]
 800199e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <TIM_Base_SetConfig+0x6c>)
 80019a2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80019a4:	bf04      	itt	eq
 80019a6:	690b      	ldreq	r3, [r1, #16]
 80019a8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80019aa:	2301      	movs	r3, #1
 80019ac:	6143      	str	r3, [r0, #20]
}
 80019ae:	4770      	bx	lr
 80019b0:	40012c00 	.word	0x40012c00

080019b4 <HAL_TIM_Base_Init>:
{
 80019b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019b6:	4604      	mov	r4, r0
 80019b8:	b1a0      	cbz	r0, 80019e4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019c2:	b91b      	cbnz	r3, 80019cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019c8:	f000 fc3e 	bl	8002248 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ce:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80019d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d4:	1d21      	adds	r1, r4, #4
 80019d6:	f7ff ffb5 	bl	8001944 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019da:	2301      	movs	r3, #1
  return HAL_OK;
 80019dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80019e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7fc      	b.n	80019e2 <HAL_TIM_Base_Init+0x2e>

080019e8 <HAL_TIM_PWM_Init>:
{
 80019e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019ea:	4604      	mov	r4, r0
 80019ec:	b1a0      	cbz	r0, 8001a18 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f6:	b91b      	cbnz	r3, 8001a00 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019fc:	f7ff ffa0 	bl	8001940 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a02:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a08:	1d21      	adds	r1, r4, #4
 8001a0a:	f7ff ff9b 	bl	8001944 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a0e:	2301      	movs	r3, #1
  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001a16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e7fc      	b.n	8001a16 <HAL_TIM_PWM_Init+0x2e>

08001a1c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a1c:	6a03      	ldr	r3, [r0, #32]
{
 8001a1e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a20:	f023 0310 	bic.w	r3, r3, #16
 8001a24:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a26:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001a28:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a2a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a38:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a40:	4d0b      	ldr	r5, [pc, #44]	; (8001a70 <TIM_OC2_SetConfig+0x54>)
 8001a42:	42a8      	cmp	r0, r5
 8001a44:	d10d      	bne.n	8001a62 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a46:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a50:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a54:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001a58:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a5e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a62:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a64:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a66:	684a      	ldr	r2, [r1, #4]
 8001a68:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a6a:	6203      	str	r3, [r0, #32]
}
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00

08001a74 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a7a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	f04f 0002 	mov.w	r0, #2
 8001a82:	d025      	beq.n	8001ad0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001a84:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001a86:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001a8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001a8e:	2a0c      	cmp	r2, #12
 8001a90:	d818      	bhi.n	8001ac4 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001a92:	e8df f002 	tbb	[pc, r2]
 8001a96:	1707      	.short	0x1707
 8001a98:	171e1717 	.word	0x171e1717
 8001a9c:	172f1717 	.word	0x172f1717
 8001aa0:	1717      	.short	0x1717
 8001aa2:	40          	.byte	0x40
 8001aa3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001aa4:	6820      	ldr	r0, [r4, #0]
 8001aa6:	f7ff fed7 	bl	8001858 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aaa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001aac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	f042 0208 	orr.w	r2, r2, #8
 8001ab4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	f022 0204 	bic.w	r2, r2, #4
 8001abc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ac2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001ac6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ac8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001acc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ad0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ad2:	6820      	ldr	r0, [r4, #0]
 8001ad4:	f7ff ffa2 	bl	8001a1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ad8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ada:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001af2:	e7e6      	b.n	8001ac2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	f7ff fed7 	bl	80018a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001afa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001afc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	f042 0208 	orr.w	r2, r2, #8
 8001b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	f022 0204 	bic.w	r2, r2, #4
 8001b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b12:	61da      	str	r2, [r3, #28]
      break;
 8001b14:	e7d6      	b.n	8001ac4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b16:	6820      	ldr	r0, [r4, #0]
 8001b18:	f7ff fef0 	bl	80018fc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b1c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b1e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b36:	e7ec      	b.n	8001b12 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b38:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b3c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b3e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b42:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001b46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b48:	6083      	str	r3, [r0, #8]
}
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001b4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b50:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001b52:	2b01      	cmp	r3, #1
{
 8001b54:	4604      	mov	r4, r0
 8001b56:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b5a:	d019      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x44>
 8001b5c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001b62:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001b64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001b68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001b72:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b74:	680b      	ldr	r3, [r1, #0]
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d065      	beq.n	8001c46 <HAL_TIM_ConfigClockSource+0xfa>
 8001b7a:	d815      	bhi.n	8001ba8 <HAL_TIM_ConfigClockSource+0x5c>
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d00c      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x4e>
 8001b80:	d807      	bhi.n	8001b92 <HAL_TIM_ConfigClockSource+0x46>
 8001b82:	b153      	cbz	r3, 8001b9a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001b86:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b8c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d001      	beq.n	8001b9a <HAL_TIM_ConfigClockSource+0x4e>
 8001b96:	2b30      	cmp	r3, #48	; 0x30
 8001b98:	d1f4      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001b9a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b9c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ba0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	e01a      	b.n	8001bde <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001ba8:	2b60      	cmp	r3, #96	; 0x60
 8001baa:	d034      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0xca>
 8001bac:	d819      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x96>
 8001bae:	2b50      	cmp	r3, #80	; 0x50
 8001bb0:	d1e8      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb2:	684a      	ldr	r2, [r1, #4]
 8001bb4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001bb6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bba:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bbe:	f025 0501 	bic.w	r5, r5, #1
 8001bc2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bc4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001bc6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bcc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001bd0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bd2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001bd4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001bda:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001bde:	6083      	str	r3, [r0, #8]
 8001be0:	e7d0      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001be2:	2b70      	cmp	r3, #112	; 0x70
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_ConfigClockSource+0xb4>
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bea:	d1cb      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001bec:	68cb      	ldr	r3, [r1, #12]
 8001bee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001bf2:	f7ff ffa1 	bl	8001b38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6893      	ldr	r3, [r2, #8]
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfe:	e008      	b.n	8001c12 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8001c00:	68cb      	ldr	r3, [r1, #12]
 8001c02:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001c06:	f7ff ff97 	bl	8001b38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c12:	6093      	str	r3, [r2, #8]
      break;
 8001c14:	e7b6      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c16:	684d      	ldr	r5, [r1, #4]
 8001c18:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c1a:	6a01      	ldr	r1, [r0, #32]
 8001c1c:	f021 0110 	bic.w	r1, r1, #16
 8001c20:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c22:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c24:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c26:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c32:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001c36:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c38:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001c3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c40:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001c44:	e7cb      	b.n	8001bde <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c46:	684a      	ldr	r2, [r1, #4]
 8001c48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c4c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c4e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c52:	f025 0501 	bic.w	r5, r5, #1
 8001c56:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c58:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001c5a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c60:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001c68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c6e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001c72:	e7b4      	b.n	8001bde <HAL_TIM_ConfigClockSource+0x92>

08001c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c74:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c76:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c78:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c7a:	f001 011f 	and.w	r1, r1, #31
 8001c7e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001c80:	ea23 0304 	bic.w	r3, r3, r4
 8001c84:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c86:	6a03      	ldr	r3, [r0, #32]
 8001c88:	408a      	lsls	r2, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	6202      	str	r2, [r0, #32]
}
 8001c8e:	bd10      	pop	{r4, pc}

08001c90 <HAL_TIM_OC_Start>:
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c94:	2201      	movs	r2, #1
 8001c96:	6800      	ldr	r0, [r0, #0]
 8001c98:	f7ff ffec 	bl	8001c74 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_TIM_OC_Start+0x34>)
}
 8001ca0:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ca2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001ca4:	bf02      	ittt	eq
 8001ca6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001ca8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001cac:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001cb6:	bf1e      	ittt	ne
 8001cb8:	681a      	ldrne	r2, [r3, #0]
 8001cba:	f042 0201 	orrne.w	r2, r2, #1
 8001cbe:	601a      	strne	r2, [r3, #0]
}
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00

08001cc8 <HAL_TIM_PWM_Start>:
 8001cc8:	f7ff bfe2 	b.w	8001c90 <HAL_TIM_OC_Start>

08001ccc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ccc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001cd0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f04f 0302 	mov.w	r3, #2
 8001cd8:	d014      	beq.n	8001d04 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cda:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001ce0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ce4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ce6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ce8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cf0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cf4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001cf6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001d04:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d06:	bd30      	pop	{r4, r5, pc}

08001d08 <stop_movement.6081>:
	  }
	  TIM2->CCR4 = (uint16_t)dc_driver_pwm;
  }

  void stop_movement(void)
  {
 8001d08:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8001d0a:	4c09      	ldr	r4, [pc, #36]	; (8001d30 <stop_movement.6081+0x28>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fb14 	bl	8001340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fb0e 	bl	8001340 <HAL_GPIO_WritePin>
	  TIM2->CCR4 = 0;
 8001d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d28:	2200      	movs	r2, #0
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
  }
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <calculate>:
{
 8001d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    double error = target_speed - current_speed;
 8001d38:	f7fe fa0c 	bl	8000154 <__aeabi_dsub>
    double derivative = (error - _pre_error) / _dt;
 8001d3c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8001dd0 <calculate+0x9c>
    double error = target_speed - current_speed;
 8001d40:	4680      	mov	r8, r0
    double derivative = (error - _pre_error) / _dt;
 8001d42:	e9da 2300 	ldrd	r2, r3, [sl]
    double error = target_speed - current_speed;
 8001d46:	4689      	mov	r9, r1
    double derivative = (error - _pre_error) / _dt;
 8001d48:	f7fe fa04 	bl	8000154 <__aeabi_dsub>
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <calculate+0x88>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe fce1 	bl	8000718 <__aeabi_ddiv>
    double Dout = _Kd * derivative;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <calculate+0x8c>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fbb2 	bl	80004c4 <__aeabi_dmul>
    double Pout = _Kp * error;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <calculate+0x90>)
    double Dout = _Kd * derivative;
 8001d62:	4604      	mov	r4, r0
    double Pout = _Kp * error;
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
    double Dout = _Kd * derivative;
 8001d68:	460d      	mov	r5, r1
    double Pout = _Kp * error;
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	f7fe fba9 	bl	80004c4 <__aeabi_dmul>
    double output = Pout + Dout;
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4620      	mov	r0, r4
 8001d78:	4629      	mov	r1, r5
 8001d7a:	f7fe f9ed 	bl	8000158 <__adddf3>
    if( output > _max )
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <calculate+0x94>)
    double output = Pout + Dout;
 8001d80:	4606      	mov	r6, r0
    if( output > _max )
 8001d82:	e9d3 4500 	ldrd	r4, r5, [r3]
    double output = Pout + Dout;
 8001d86:	460f      	mov	r7, r1
    if( output > _max )
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	4629      	mov	r1, r5
 8001d90:	f7fe fe0a 	bl	80009a8 <__aeabi_dcmplt>
 8001d94:	b958      	cbnz	r0, 8001dae <calculate+0x7a>
    else if( output < _min )
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <calculate+0x98>)
 8001d98:	4632      	mov	r2, r6
 8001d9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fe1e 	bl	80009e4 <__aeabi_dcmpgt>
 8001da8:	b908      	cbnz	r0, 8001dae <calculate+0x7a>
    double output = Pout + Dout;
 8001daa:	4634      	mov	r4, r6
 8001dac:	463d      	mov	r5, r7
    _pre_error = error;
 8001dae:	e9ca 8900 	strd	r8, r9, [sl]
}
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000020 	.word	0x20000020
 8001dcc:	20000028 	.word	0x20000028
 8001dd0:	20000068 	.word	0x20000068

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd8:	2210      	movs	r2, #16
 8001dda:	2100      	movs	r1, #0
 8001ddc:	a809      	add	r0, sp, #36	; 0x24
 8001dde:	f000 fb45 	bl	800246c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de2:	2214      	movs	r2, #20
 8001de4:	2100      	movs	r1, #0
 8001de6:	a801      	add	r0, sp, #4
 8001de8:	f000 fb40 	bl	800246c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dec:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001df4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dfc:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001e06:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e08:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e0a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0c:	f7ff faaa 	bl	8001364 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e10:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e20:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e26:	f7ff fc7b 	bl	8001720 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001e2a:	b010      	add	sp, #64	; 0x40
 8001e2c:	bd10      	pop	{r4, pc}
	...

08001e30 <main>:
{
 8001e30:	b580      	push	{r7, lr}

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	f04f 0904 	mov.w	r9, #4
{
 8001e3e:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8001e40:	f7fe fe1e 	bl	8000a80 <HAL_Init>
  SystemClock_Config();
 8001e44:	f7ff ffc6 	bl	8001dd4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	2210      	movs	r2, #16
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	a809      	add	r0, sp, #36	; 0x24
 8001e4e:	f000 fb0d 	bl	800246c <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e52:	4bb9      	ldr	r3, [pc, #740]	; (8002138 <main+0x308>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e54:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e56:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e58:	48b8      	ldr	r0, [pc, #736]	; (800213c <main+0x30c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	f042 0220 	orr.w	r2, r2, #32
 8001e5e:	619a      	str	r2, [r3, #24]
 8001e60:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 8001e62:	4eb7      	ldr	r6, [pc, #732]	; (8002140 <main+0x310>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e64:	f002 0220 	and.w	r2, r2, #32
 8001e68:	9200      	str	r2, [sp, #0]
 8001e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	699a      	ldr	r2, [r3, #24]
  hcan.Instance = CAN1;
 8001e6e:	4db5      	ldr	r5, [pc, #724]	; (8002144 <main+0x314>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	f042 0204 	orr.w	r2, r2, #4
 8001e74:	619a      	str	r2, [r3, #24]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	f002 0204 	and.w	r2, r2, #4
 8001e7c:	9201      	str	r2, [sp, #4]
 8001e7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	f042 0208 	orr.w	r2, r2, #8
 8001e86:	619a      	str	r2, [r3, #24]
 8001e88:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e94:	f7ff fa54 	bl	8001340 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8001e9e:	48aa      	ldr	r0, [pc, #680]	; (8002148 <main+0x318>)
 8001ea0:	f7ff fa4e 	bl	8001340 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	a909      	add	r1, sp, #36	; 0x24
 8001ea6:	48a5      	ldr	r0, [pc, #660]	; (800213c <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	e9cd 9709 	strd	r9, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f7ff f966 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb4:	4ba5      	ldr	r3, [pc, #660]	; (800214c <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	a909      	add	r1, sp, #36	; 0x24
 8001eb8:	48a3      	ldr	r0, [pc, #652]	; (8002148 <main+0x318>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eba:	e9cd 380a 	strd	r3, r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ebe:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f7ff f95d 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001ec6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
                          |GPIO_PIN_14|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	a909      	add	r1, sp, #36	; 0x24
 8001ecc:	489e      	ldr	r0, [pc, #632]	; (8002148 <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	e9cd 480b 	strd	r4, r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f7ff f953 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001eda:	4622      	mov	r2, r4
 8001edc:	4621      	mov	r1, r4
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f7ff f8f6 	bl	80010d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ee4:	2007      	movs	r0, #7
 8001ee6:	f7ff f927 	bl	8001138 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	2210      	movs	r2, #16
 8001eec:	4621      	mov	r1, r4
 8001eee:	a805      	add	r0, sp, #20
 8001ef0:	f000 fabc 	bl	800246c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef4:	221c      	movs	r2, #28
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efa:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efe:	f000 fab5 	bl	800246c <memset>
  htim2.Instance = TIM2;
 8001f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 1;
 8001f06:	e9c6 3700 	strd	r3, r7, [r6]
  htim2.Init.Period = 7199;
 8001f0a:	f641 431f 	movw	r3, #7199	; 0x1c1f
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f0e:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f18:	f7ff fd4c 	bl	80019b4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f20:	a905      	add	r1, sp, #20
 8001f22:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f26:	f7ff fe11 	bl	8001b4c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f2a:	4630      	mov	r0, r6
 8001f2c:	f7ff fd5c 	bl	80019e8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f30:	a903      	add	r1, sp, #12
 8001f32:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	e9cd 4403 	strd	r4, r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f38:	f7ff fec8 	bl	8001ccc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	a909      	add	r1, sp, #36	; 0x24
 8001f42:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8001f44:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f48:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4a:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f4c:	f7ff fd92 	bl	8001a74 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001f50:	4630      	mov	r0, r6
 8001f52:	f000 f98b 	bl	800226c <HAL_TIM_MspPostInit>
  hcan.Instance = CAN1;
 8001f56:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <main+0x320>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f58:	4628      	mov	r0, r5
  hcan.Init.Prescaler = 4;
 8001f5a:	e9c5 3900 	strd	r3, r9, [r5]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001f5e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f62:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f66:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001f6a:	762c      	strb	r4, [r5, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001f6c:	766c      	strb	r4, [r5, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001f6e:	76ac      	strb	r4, [r5, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001f70:	76ec      	strb	r4, [r5, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f72:	772c      	strb	r4, [r5, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001f74:	776c      	strb	r4, [r5, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f76:	f7fe fda7 	bl	8000ac8 <HAL_CAN_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f7a:	210c      	movs	r1, #12
 8001f7c:	4630      	mov	r0, r6
 8001f7e:	f7ff fea3 	bl	8001cc8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8001f82:	463a      	mov	r2, r7
 8001f84:	4649      	mov	r1, r9
 8001f86:	486d      	ldr	r0, [pc, #436]	; (800213c <main+0x30c>)
 8001f88:	f7ff f9da 	bl	8001340 <HAL_GPIO_WritePin>
  pHeader.StdId = header_id;
 8001f8c:	4a71      	ldr	r2, [pc, #452]	; (8002154 <main+0x324>)
  pHeader.DLC = 4;
 8001f8e:	4b72      	ldr	r3, [pc, #456]	; (8002158 <main+0x328>)
  pHeader.StdId = header_id;
 8001f90:	6812      	ldr	r2, [r2, #0]
  pHeader.DLC = 4;
 8001f92:	f8c3 9010 	str.w	r9, [r3, #16]
  pHeader.StdId = header_id;
 8001f96:	601a      	str	r2, [r3, #0]
  pHeader.RTR = CAN_RTR_DATA;
 8001f98:	e9c3 4402 	strd	r4, r4, [r3, #8]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <main+0x32c>)
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001f9e:	4970      	ldr	r1, [pc, #448]	; (8002160 <main+0x330>)
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8001fa0:	681b      	ldr	r3, [r3, #0]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001fa2:	4628      	mov	r0, r5
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8001fa4:	015b      	lsls	r3, r3, #5
  sFilterConfig.FilterIdLow = 0;
 8001fa6:	e9c1 3400 	strd	r3, r4, [r1]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001faa:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterMaskIdLow = 0;
 8001fac:	e9c1 4402 	strd	r4, r4, [r1, #8]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001fb0:	e9c1 7406 	strd	r7, r4, [r1, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8001fb4:	620f      	str	r7, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8001fb6:	f7fe fe02 	bl	8000bbe <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f7fe fe6b 	bl	8000c96 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	f7fe ff55 	bl	8000e72 <HAL_CAN_ActivateNotification>
	  if ((can_rx_speed > 0)&&(flag == State_CCW)) {
 8001fc8:	4d66      	ldr	r5, [pc, #408]	; (8002164 <main+0x334>)
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <main+0x338>)
 8001fcc:	781c      	ldrb	r4, [r3, #0]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	f000 80af 	beq.w	8002132 <main+0x302>
 8001fd4:	782b      	ldrb	r3, [r5, #0]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d153      	bne.n	8002082 <main+0x252>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe0:	4859      	ldr	r0, [pc, #356]	; (8002148 <main+0x318>)
 8001fe2:	f7ff f9ad 	bl	8001340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fec:	4856      	ldr	r0, [pc, #344]	; (8002148 <main+0x318>)
 8001fee:	f7ff f9a7 	bl	8001340 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() % 100 == 0) {
 8001ff2:	f7fe fd63 	bl	8000abc <HAL_GetTick>
 8001ff6:	2364      	movs	r3, #100	; 0x64
 8001ff8:	fbb0 f2f3 	udiv	r2, r0, r3
 8001ffc:	fb02 0013 	mls	r0, r2, r3, r0
 8002000:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8002180 <main+0x350>
 8002004:	2800      	cmp	r0, #0
 8002006:	d134      	bne.n	8002072 <main+0x242>
		  inc = calculate((double)(r_speed), (double)encoder_speed);
 8002008:	4b58      	ldr	r3, [pc, #352]	; (800216c <main+0x33c>)
 800200a:	7818      	ldrb	r0, [r3, #0]
 800200c:	f7fe f9e0 	bl	80003d0 <__aeabi_ui2d>
 8002010:	4606      	mov	r6, r0
 8002012:	460f      	mov	r7, r1
 8002014:	4620      	mov	r0, r4
 8002016:	f7fe f9db 	bl	80003d0 <__aeabi_ui2d>
 800201a:	4632      	mov	r2, r6
 800201c:	463b      	mov	r3, r7
 800201e:	f7ff fe89 	bl	8001d34 <calculate>
		  u_pwm += inc;
 8002022:	4c53      	ldr	r4, [pc, #332]	; (8002170 <main+0x340>)
		  inc = calculate((double)(r_speed), (double)encoder_speed);
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <main+0x344>)
 8002026:	e9c3 0100 	strd	r0, r1, [r3]
		  u_pwm += inc;
 800202a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800202e:	f7fe f893 	bl	8000158 <__adddf3>
 8002032:	4680      	mov	r8, r0
 8002034:	4689      	mov	r9, r1
		  if( u_pwm > _max )
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <main+0x348>)
		  u_pwm += inc;
 8002038:	e9c4 8900 	strd	r8, r9, [r4]
		  if( u_pwm > _max )
 800203c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002040:	4632      	mov	r2, r6
 8002042:	463b      	mov	r3, r7
 8002044:	f7fe fcce 	bl	80009e4 <__aeabi_dcmpgt>
 8002048:	b110      	cbz	r0, 8002050 <main+0x220>
			  u_pwm = _min;
 800204a:	e9c4 6700 	strd	r6, r7, [r4]
 800204e:	e00a      	b.n	8002066 <main+0x236>
		  else if( u_pwm < _min )
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <main+0x34c>)
 8002052:	4640      	mov	r0, r8
 8002054:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002058:	4649      	mov	r1, r9
 800205a:	4632      	mov	r2, r6
 800205c:	463b      	mov	r3, r7
 800205e:	f7fe fca3 	bl	80009a8 <__aeabi_dcmplt>
 8002062:	2800      	cmp	r0, #0
 8002064:	d1f1      	bne.n	800204a <main+0x21a>
		  dc_driver_pwm = u_pwm;
 8002066:	e9d4 0100 	ldrd	r0, r1, [r4]
 800206a:	f7fe fcc5 	bl	80009f8 <__aeabi_d2uiz>
 800206e:	f8aa 0000 	strh.w	r0, [sl]
	  TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8002072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002076:	f8ba 2000 	ldrh.w	r2, [sl]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
		  flag = State_CCW;
 800207c:	2302      	movs	r3, #2
 800207e:	702b      	strb	r3, [r5, #0]
 8002080:	e7a3      	b.n	8001fca <main+0x19a>
	  else if ((can_rx_speed > 0)&&(flag == State_CW)) {
 8002082:	2b01      	cmp	r3, #1
 8002084:	d1a1      	bne.n	8001fca <main+0x19a>
		  u_pwm += inc;
 8002086:	4c3a      	ldr	r4, [pc, #232]	; (8002170 <main+0x340>)
		  while (TIM2->CCR4 > 0) {
 8002088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	b913      	cbnz	r3, 8002096 <main+0x266>
		  stop_movement();
 8002090:	f7ff fe3a 	bl	8001d08 <stop_movement.6081>
 8002094:	e7f2      	b.n	800207c <main+0x24c>
  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <main+0x318>)
 800209e:	f7ff f94f 	bl	8001340 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a8:	4827      	ldr	r0, [pc, #156]	; (8002148 <main+0x318>)
 80020aa:	f7ff f949 	bl	8001340 <HAL_GPIO_WritePin>
	  if (HAL_GetTick() % 100 == 0) {
 80020ae:	f7fe fd05 	bl	8000abc <HAL_GetTick>
 80020b2:	2364      	movs	r3, #100	; 0x64
 80020b4:	fbb0 f2f3 	udiv	r2, r0, r3
 80020b8:	fb02 0013 	mls	r0, r2, r3, r0
 80020bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002180 <main+0x350>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d130      	bne.n	8002126 <main+0x2f6>
		  inc = calculate(0, (double)encoder_speed);
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <main+0x33c>)
 80020c6:	7818      	ldrb	r0, [r3, #0]
 80020c8:	f7fe f982 	bl	80003d0 <__aeabi_ui2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	2000      	movs	r0, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	f7ff fe2e 	bl	8001d34 <calculate>
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <main+0x344>)
 80020da:	e9c3 0100 	strd	r0, r1, [r3]
		  u_pwm += inc;
 80020de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80020e2:	f7fe f839 	bl	8000158 <__adddf3>
 80020e6:	4680      	mov	r8, r0
 80020e8:	4689      	mov	r9, r1
		  if( u_pwm > _max )
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <main+0x348>)
		  u_pwm += inc;
 80020ec:	e9c4 8900 	strd	r8, r9, [r4]
		  if( u_pwm > _max )
 80020f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80020f4:	4632      	mov	r2, r6
 80020f6:	463b      	mov	r3, r7
 80020f8:	f7fe fc74 	bl	80009e4 <__aeabi_dcmpgt>
 80020fc:	b110      	cbz	r0, 8002104 <main+0x2d4>
			  u_pwm = _min;
 80020fe:	e9c4 6700 	strd	r6, r7, [r4]
 8002102:	e00a      	b.n	800211a <main+0x2ea>
		  else if( u_pwm < _min )
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <main+0x34c>)
 8002106:	4640      	mov	r0, r8
 8002108:	e9d3 6700 	ldrd	r6, r7, [r3]
 800210c:	4649      	mov	r1, r9
 800210e:	4632      	mov	r2, r6
 8002110:	463b      	mov	r3, r7
 8002112:	f7fe fc49 	bl	80009a8 <__aeabi_dcmplt>
 8002116:	2800      	cmp	r0, #0
 8002118:	d1f1      	bne.n	80020fe <main+0x2ce>
		  dc_driver_pwm = u_pwm;
 800211a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800211e:	f7fe fc6b 	bl	80009f8 <__aeabi_d2uiz>
 8002122:	f8aa 0000 	strh.w	r0, [sl]
	  TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8002126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800212a:	f8ba 2000 	ldrh.w	r2, [sl]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
 8002130:	e7aa      	b.n	8002088 <main+0x258>
		  stop_movement();
 8002132:	f7ff fde9 	bl	8001d08 <stop_movement.6081>
 8002136:	e748      	b.n	8001fca <main+0x19a>
 8002138:	40021000 	.word	0x40021000
 800213c:	40010800 	.word	0x40010800
 8002140:	200000ec 	.word	0x200000ec
 8002144:	200000bc 	.word	0x200000bc
 8002148:	40010c00 	.word	0x40010c00
 800214c:	10110000 	.word	0x10110000
 8002150:	40006400 	.word	0x40006400
 8002154:	2000003c 	.word	0x2000003c
 8002158:	20000148 	.word	0x20000148
 800215c:	20000034 	.word	0x20000034
 8002160:	20000094 	.word	0x20000094
 8002164:	20000038 	.word	0x20000038
 8002168:	20000160 	.word	0x20000160
 800216c:	20000161 	.word	0x20000161
 8002170:	20000088 	.word	0x20000088
 8002174:	20000080 	.word	0x20000080
 8002178:	20000020 	.word	0x20000020
 800217c:	20000028 	.word	0x20000028
 8002180:	20000078 	.word	0x20000078

08002184 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_MspInit+0x3c>)
{
 8002186:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	619a      	str	r2, [r3, #24]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	f002 0201 	and.w	r2, r2, #1
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021a0:	61da      	str	r2, [r3, #28]
 80021a2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80021ae:	6853      	ldr	r3, [r2, #4]
 80021b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	b002      	add	sp, #8
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000

080021c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021c8:	b510      	push	{r4, lr}
 80021ca:	4604      	mov	r4, r0
 80021cc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	2210      	movs	r2, #16
 80021d0:	2100      	movs	r1, #0
 80021d2:	a802      	add	r0, sp, #8
 80021d4:	f000 f94a 	bl	800246c <memset>
  if(hcan->Instance==CAN1)
 80021d8:	6822      	ldr	r2, [r4, #0]
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_CAN_MspInit+0x78>)
 80021dc:	429a      	cmp	r2, r3
 80021de:	d12d      	bne.n	800223c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021e0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80021e4:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021e8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80021ec:	61da      	str	r2, [r3, #28]
 80021ee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	4814      	ldr	r0, [pc, #80]	; (8002244 <HAL_CAN_MspInit+0x7c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021f2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80021f6:	9200      	str	r2, [sp, #0]
 80021f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	f042 0204 	orr.w	r2, r2, #4
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800220c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002210:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f7fe ffb5 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800221a:	2302      	movs	r3, #2
 800221c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002220:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	a902      	add	r1, sp, #8
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <HAL_CAN_MspInit+0x7c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002226:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f7fe ffaa 	bl	8001180 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2014      	movs	r0, #20
 8002230:	4611      	mov	r1, r2
 8002232:	f7fe ff4d 	bl	80010d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002236:	2014      	movs	r0, #20
 8002238:	f7fe ff7e 	bl	8001138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800223c:	b006      	add	sp, #24
 800223e:	bd10      	pop	{r4, pc}
 8002240:	40006400 	.word	0x40006400
 8002244:	40010800 	.word	0x40010800

08002248 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002248:	6803      	ldr	r3, [r0, #0]
{
 800224a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002250:	d10a      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002252:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	61da      	str	r2, [r3, #28]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002268:	b002      	add	sp, #8
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
 8002270:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	2210      	movs	r2, #16
 8002274:	2100      	movs	r1, #0
 8002276:	a802      	add	r0, sp, #8
 8002278:	f000 f8f8 	bl	800246c <memset>
  if(htim->Instance==TIM2)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d113      	bne.n	80022ac <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002288:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	619a      	str	r2, [r3, #24]
 8002292:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	4803      	ldr	r0, [pc, #12]	; (80022b0 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f7fe ff6a 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022ac:	b006      	add	sp, #24
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	40010800 	.word	0x40010800

080022b4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022b4:	4770      	bx	lr

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler>

080022be <SVC_Handler>:
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c6:	f7fe fbed 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (HAL_GetTick() % 100 == 0) {
 80022ca:	2464      	movs	r4, #100	; 0x64
 80022cc:	f7fe fbf6 	bl	8000abc <HAL_GetTick>
 80022d0:	fbb0 f3f4 	udiv	r3, r0, r4
 80022d4:	fb03 0414 	mls	r4, r3, r4, r0
 80022d8:	b9cc      	cbnz	r4, 800230e <SysTick_Handler+0x4a>
	  encoder_speed = (uint8_t)(encoder_tick*(600/encoder_ratio));
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <SysTick_Handler+0x4c>)
 80022dc:	4d0d      	ldr	r5, [pc, #52]	; (8002314 <SysTick_Handler+0x50>)
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80022e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e8:	882a      	ldrh	r2, [r5, #0]
	  driver_tx_data[0] = encoder_speed;
	  driver_tx_data[1] = (uint8_t)(encoder_tick);
	  driver_tx_data[2] = (uint8_t)(encoder_tick>>8);
	  HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_tx_data, &TxMailbox);
 80022ea:	490b      	ldr	r1, [pc, #44]	; (8002318 <SysTick_Handler+0x54>)
	  encoder_speed = (uint8_t)(encoder_tick*(600/encoder_ratio));
 80022ec:	4353      	muls	r3, r2
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <SysTick_Handler+0x58>)
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	7013      	strb	r3, [r2, #0]
	  driver_tx_data[0] = encoder_speed;
 80022f4:	7813      	ldrb	r3, [r2, #0]
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Handler+0x5c>)
	  HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_tx_data, &TxMailbox);
 80022f8:	480a      	ldr	r0, [pc, #40]	; (8002324 <SysTick_Handler+0x60>)
	  driver_tx_data[0] = encoder_speed;
 80022fa:	7013      	strb	r3, [r2, #0]
	  driver_tx_data[1] = (uint8_t)(encoder_tick);
 80022fc:	882b      	ldrh	r3, [r5, #0]
 80022fe:	7053      	strb	r3, [r2, #1]
	  driver_tx_data[2] = (uint8_t)(encoder_tick>>8);
 8002300:	882b      	ldrh	r3, [r5, #0]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	7093      	strb	r3, [r2, #2]
	  HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_tx_data, &TxMailbox);
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <SysTick_Handler+0x64>)
 8002308:	f7fe fcf0 	bl	8000cec <HAL_CAN_AddTxMessage>
	  encoder_tick = 0;
 800230c:	802c      	strh	r4, [r5, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000030 	.word	0x20000030
 8002314:	200000e6 	.word	0x200000e6
 8002318:	20000148 	.word	0x20000148
 800231c:	20000161 	.word	0x20000161
 8002320:	2000007a 	.word	0x2000007a
 8002324:	200000bc 	.word	0x200000bc
 8002328:	200000e8 	.word	0x200000e8

0800232c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800232c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800232e:	2002      	movs	r0, #2
 8002330:	f7ff f80c 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  encoder_tick++;
 8002334:	4a02      	ldr	r2, [pc, #8]	; (8002340 <EXTI1_IRQHandler+0x14>)
 8002336:	8813      	ldrh	r3, [r2, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 800233e:	bd08      	pop	{r3, pc}
 8002340:	200000e6 	.word	0x200000e6

08002344 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002344:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, can_rx_control_data);
 8002346:	4c0c      	ldr	r4, [pc, #48]	; (8002378 <USB_LP_CAN1_RX0_IRQHandler+0x34>)
  HAL_CAN_IRQHandler(&hcan);
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <USB_LP_CAN1_RX0_IRQHandler+0x38>)
 800234a:	f7fe fdb0 	bl	8000eae <HAL_CAN_IRQHandler>
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, can_rx_control_data);
 800234e:	4623      	mov	r3, r4
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 8002352:	2100      	movs	r1, #0
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <USB_LP_CAN1_RX0_IRQHandler+0x38>)
 8002356:	f7fe fd16 	bl	8000d86 <HAL_CAN_GetRxMessage>
  can_rx_side = can_rx_control_data[0];
 800235a:	7823      	ldrb	r3, [r4, #0]
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <USB_LP_CAN1_RX0_IRQHandler+0x40>)
 800235e:	7013      	strb	r3, [r2, #0]
  if (can_rx_side == 0) {
 8002360:	b923      	cbnz	r3, 800236c <USB_LP_CAN1_RX0_IRQHandler+0x28>
	  can_rx_speed = -can_rx_control_data[1];
 8002362:	7863      	ldrb	r3, [r4, #1]
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8002366:	425b      	negs	r3, r3
 8002368:	7013      	strb	r3, [r2, #0]
  }
  else if (can_rx_side == 1) {
	  can_rx_speed = can_rx_control_data[1];
  }
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800236a:	bd10      	pop	{r4, pc}
  else if (can_rx_side == 1) {
 800236c:	2b01      	cmp	r3, #1
	  can_rx_speed = can_rx_control_data[1];
 800236e:	bf02      	ittt	eq
 8002370:	7862      	ldrbeq	r2, [r4, #1]
 8002372:	4b05      	ldreq	r3, [pc, #20]	; (8002388 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8002374:	701a      	strbeq	r2, [r3, #0]
}
 8002376:	e7f8      	b.n	800236a <USB_LP_CAN1_RX0_IRQHandler+0x26>
 8002378:	20000070 	.word	0x20000070
 800237c:	200000bc 	.word	0x200000bc
 8002380:	2000012c 	.word	0x2000012c
 8002384:	200000e4 	.word	0x200000e4
 8002388:	20000160 	.word	0x20000160

0800238c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <SystemInit+0x40>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <SystemInit+0x44>)
 800239a:	400a      	ands	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <SystemInit+0x48>)
 80023c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f8ff0000 	.word	0xf8ff0000
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023da:	e003      	b.n	80023e4 <LoopCopyDataInit>

080023dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023e2:	3104      	adds	r1, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023e4:	480a      	ldr	r0, [pc, #40]	; (8002410 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023ec:	d3f6      	bcc.n	80023dc <CopyDataInit>
  ldr r2, =_sbss
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023f0:	e002      	b.n	80023f8 <LoopFillZerobss>

080023f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023f4:	f842 3b04 	str.w	r3, [r2], #4

080023f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023fc:	d3f9      	bcc.n	80023f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023fe:	f7ff ffc5 	bl	800238c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f000 f80f 	bl	8002424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002406:	f7ff fd13 	bl	8001e30 <main>
  bx lr
 800240a:	4770      	bx	lr
  ldr r3, =_sidata
 800240c:	080024bc 	.word	0x080024bc
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002414:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 8002418:	20000048 	.word	0x20000048
  ldr r3, = _ebss
 800241c:	20000164 	.word	0x20000164

08002420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_2_IRQHandler>
	...

08002424 <__libc_init_array>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	2500      	movs	r5, #0
 8002428:	4e0c      	ldr	r6, [pc, #48]	; (800245c <__libc_init_array+0x38>)
 800242a:	4c0d      	ldr	r4, [pc, #52]	; (8002460 <__libc_init_array+0x3c>)
 800242c:	1ba4      	subs	r4, r4, r6
 800242e:	10a4      	asrs	r4, r4, #2
 8002430:	42a5      	cmp	r5, r4
 8002432:	d109      	bne.n	8002448 <__libc_init_array+0x24>
 8002434:	f000 f822 	bl	800247c <_init>
 8002438:	2500      	movs	r5, #0
 800243a:	4e0a      	ldr	r6, [pc, #40]	; (8002464 <__libc_init_array+0x40>)
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <__libc_init_array+0x44>)
 800243e:	1ba4      	subs	r4, r4, r6
 8002440:	10a4      	asrs	r4, r4, #2
 8002442:	42a5      	cmp	r5, r4
 8002444:	d105      	bne.n	8002452 <__libc_init_array+0x2e>
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800244c:	4798      	blx	r3
 800244e:	3501      	adds	r5, #1
 8002450:	e7ee      	b.n	8002430 <__libc_init_array+0xc>
 8002452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002456:	4798      	blx	r3
 8002458:	3501      	adds	r5, #1
 800245a:	e7f2      	b.n	8002442 <__libc_init_array+0x1e>
 800245c:	080024b4 	.word	0x080024b4
 8002460:	080024b4 	.word	0x080024b4
 8002464:	080024b4 	.word	0x080024b4
 8002468:	080024b8 	.word	0x080024b8

0800246c <memset>:
 800246c:	4603      	mov	r3, r0
 800246e:	4402      	add	r2, r0
 8002470:	4293      	cmp	r3, r2
 8002472:	d100      	bne.n	8002476 <memset+0xa>
 8002474:	4770      	bx	lr
 8002476:	f803 1b01 	strb.w	r1, [r3], #1
 800247a:	e7f9      	b.n	8002470 <memset+0x4>

0800247c <_init>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr

08002488 <_fini>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr
